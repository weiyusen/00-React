{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\react-app-copy\\\\src\\\\App.js\";\nimport React from 'react';\nimport A from './Components/A';\nimport B from './Components/B';\nimport TestContext from './store/testContext';\n\n/**\r\n*     Xxx.Provider\r\n*       - 表示数据的生产者，可以使用它来指定Context中的数据\r\n*       - 通过value来指定Context中存储的数据，\r\n*           这样一来，在该组件的所有的子组件中都可以通过Context来访问它所指定数据\r\n*\r\n*   当我们通过Context访问数据时，他会读取离他最近的Provider中的数据，\r\n*       如果没有Provider，则读取Context中的默认数据\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(A, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TestContext.Provider, {\n      value: {\n        name: 'ls',\n        age: 11\n      },\n      children: [/*#__PURE__*/_jsxDEV(TestContext.Provider, {\n        value: {\n          name: 'vv',\n          age: 44\n        },\n        children: /*#__PURE__*/_jsxDEV(B, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(B, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","A","B","TestContext","App","name","age"],"sources":["D:/前端学习/00-react/react-app-copy/src/App.js"],"sourcesContent":["import React from 'react'\r\nimport A from './Components/A'\r\nimport B from './Components/B'\r\nimport TestContext from './store/testContext'\r\n\r\n/**\r\n*     Xxx.Provider\r\n*       - 表示数据的生产者，可以使用它来指定Context中的数据\r\n*       - 通过value来指定Context中存储的数据，\r\n*           这样一来，在该组件的所有的子组件中都可以通过Context来访问它所指定数据\r\n*\r\n*   当我们通过Context访问数据时，他会读取离他最近的Provider中的数据，\r\n*       如果没有Provider，则读取Context中的默认数据\r\n */\r\nexport default function App() {\r\n    return (\r\n        <>\r\n            {/* 如果A组件不被Xxx.Provider包裹，那么A组件所显示的数据就是store文件夹里定义时的数据了 */}\r\n            <A></A>\r\n            <TestContext.Provider value={{ name: 'ls', age: 11 }}>\r\n                <TestContext.Provider value={{ name: 'vv', age: 44 }} >\r\n                    <B></B>\r\n                </TestContext.Provider>\r\n            <B></B>\r\n        </TestContext.Provider>\r\n        </>\r\n    )\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,CAAC,MAAM,gBAAgB;AAC9B,OAAOC,CAAC,MAAM,gBAAgB;AAC9B,OAAOC,WAAW,MAAM,qBAAqB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AASA,eAAe,SAASC,GAAG,GAAG;EAC1B,oBACI;IAAA,wBAEI,QAAC,CAAC;MAAA;MAAA;MAAA;IAAA,QAAK,eACP,QAAC,WAAW,CAAC,QAAQ;MAAC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,GAAG,EAAE;MAAG,CAAE;MAAA,wBACjD,QAAC,WAAW,CAAC,QAAQ;QAAC,KAAK,EAAE;UAAED,IAAI,EAAE,IAAI;UAAEC,GAAG,EAAE;QAAG,CAAE;QAAA,uBACjD,QAAC,CAAC;UAAA;UAAA;UAAA;QAAA;MAAK;QAAA;QAAA;QAAA;MAAA,QACY,eAC3B,QAAC,CAAC;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QACY;EAAA,gBACpB;AAEX;AAAC,KAbuBF,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}