{"ast":null,"code":"// 使用RTK来构建store\n// createSlice 创建reducer的切片\n// 它需要一个配置对象作为参数，通过对象的不同的属性来指定它的配置\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\n// 会自动给我们生成reducer和action\nconst stuSlice = createSlice({\n  name: 'stu',\n  // 用来自动生成action中的type,作为type的前缀  即case后面跟的常量\n  initialState: {\n    name: 'zs',\n    age: 15,\n    gender: '男',\n    address: 'hhh'\n  },\n  //当前切片的state的初始值\n  reducers: {\n    // 指定state的各种操作，直接在对象中添加方法   注意加s\n    setName(state, action) {\n      // 可以通过不同的方法来指定对state的不同操作\n      // 两个参数：state 这个state的是一个代理对象，不是原来的state,可以直接修改 不用展开复制了\n      // action, 你传的参数会放到action.payload里\n      state.name = action.payload ? action.payload : 'lss';\n    },\n    setAge(state, action) {\n      state.age = action.payload ? action.payload : 28;\n    }\n  }\n});\n// 切片对象会自动的帮助我们生成action\nconsole.log(stuSlice.actions);\n// actions中存储的是slice自动生成action创建器（函数），调用函数后会自动创建action对象\n// action对象的结构 {type:name/函数名, payload:函数的参数}\n// 这样就不用手动写了，避免了type值写错的情况\nexport const {\n  setName,\n  setAge\n} = stuSlice.actions;\n// const nameAction = setName('hh')\n// const ageAction = setAge('11')\n// console.log(nameAction);  //{type: \"stu/setName\" ,payload:'hh'}\n\n// 切片可以很多个\n// 创建学校的slice\nconst schoolSlice = createSlice({\n  name: 'school',\n  initialState: {\n    name: ''\n  },\n  reducuers: {}\n});\n\n// 通过切片创建store 配置对象的方式, 返回一个store对象\nconst store = configureStore({\n  // reducer: stuSlice.reducer   //只有一个的时候可以这么写\n  reducer: {\n    student: stuSlice.reducer //有多个的时候这么用, 常用\n  }\n});\n\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","stuSlice","name","initialState","age","gender","address","reducers","setName","state","action","payload","setAge","console","log","actions","schoolSlice","reducuers","store","reducer","student"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/store/index.js"],"sourcesContent":["// 使用RTK来构建store\r\n// createSlice 创建reducer的切片\r\n// 它需要一个配置对象作为参数，通过对象的不同的属性来指定它的配置\r\nimport {configureStore, createSlice} from '@reduxjs/toolkit'\r\n// 会自动给我们生成reducer和action\r\nconst stuSlice = createSlice({\r\n    name: 'stu', // 用来自动生成action中的type,作为type的前缀  即case后面跟的常量\r\n    initialState: {\r\n        name:'zs',\r\n        age:15,\r\n        gender:'男',\r\n        address:'hhh'\r\n    },    //当前切片的state的初始值\r\n    reducers:{// 指定state的各种操作，直接在对象中添加方法   注意加s\r\n        setName(state, action){\r\n            // 可以通过不同的方法来指定对state的不同操作\r\n            // 两个参数：state 这个state的是一个代理对象，不是原来的state,可以直接修改 不用展开复制了\r\n            // action, 你传的参数会放到action.payload里\r\n            state.name = action.payload ? action.payload : 'lss'\r\n        },\r\n        setAge(state, action){\r\n            state.age = action.payload ? action.payload : 28;\r\n        }\r\n    }\r\n})\r\n// 切片对象会自动的帮助我们生成action\r\nconsole.log(stuSlice.actions);\r\n// actions中存储的是slice自动生成action创建器（函数），调用函数后会自动创建action对象\r\n// action对象的结构 {type:name/函数名, payload:函数的参数}\r\n// 这样就不用手动写了，避免了type值写错的情况\r\nexport const {setName, setAge} = stuSlice.actions\r\n// const nameAction = setName('hh')\r\n// const ageAction = setAge('11')\r\n// console.log(nameAction);  //{type: \"stu/setName\" ,payload:'hh'}\r\n\r\n// 切片可以很多个\r\n// 创建学校的slice\r\nconst schoolSlice =  createSlice({\r\n    name:'school',\r\n    initialState: {\r\n        name:''\r\n    },\r\n    reducuers: {\r\n        \r\n    }\r\n})\r\n\r\n\r\n\r\n// 通过切片创建store 配置对象的方式, 返回一个store对象\r\nconst store = configureStore({\r\n    // reducer: stuSlice.reducer   //只有一个的时候可以这么写\r\n    reducer: {\r\n        student: stuSlice.reducer   //有多个的时候这么用, 常用\r\n    }\r\n})\r\n\r\nexport default store"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,cAAc,EAAEC,WAAW,QAAO,kBAAkB;AAC5D;AACA,MAAMC,QAAQ,GAAGD,WAAW,CAAC;EACzBE,IAAI,EAAE,KAAK;EAAE;EACbC,YAAY,EAAE;IACVD,IAAI,EAAC,IAAI;IACTE,GAAG,EAAC,EAAE;IACNC,MAAM,EAAC,GAAG;IACVC,OAAO,EAAC;EACZ,CAAC;EAAK;EACNC,QAAQ,EAAC;IAAC;IACNC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAC;MAClB;MACA;MACA;MACAD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO,GAAGD,MAAM,CAACC,OAAO,GAAG,KAAK;IACxD,CAAC;IACDC,MAAM,CAACH,KAAK,EAAEC,MAAM,EAAC;MACjBD,KAAK,CAACL,GAAG,GAAGM,MAAM,CAACC,OAAO,GAAGD,MAAM,CAACC,OAAO,GAAG,EAAE;IACpD;EACJ;AACJ,CAAC,CAAC;AACF;AACAE,OAAO,CAACC,GAAG,CAACb,QAAQ,CAACc,OAAO,CAAC;AAC7B;AACA;AACA;AACA,OAAO,MAAM;EAACP,OAAO;EAAEI;AAAM,CAAC,GAAGX,QAAQ,CAACc,OAAO;AACjD;AACA;AACA;;AAEA;AACA;AACA,MAAMC,WAAW,GAAIhB,WAAW,CAAC;EAC7BE,IAAI,EAAC,QAAQ;EACbC,YAAY,EAAE;IACVD,IAAI,EAAC;EACT,CAAC;EACDe,SAAS,EAAE,CAEX;AACJ,CAAC,CAAC;;AAIF;AACA,MAAMC,KAAK,GAAGnB,cAAc,CAAC;EACzB;EACAoB,OAAO,EAAE;IACLC,OAAO,EAAEnB,QAAQ,CAACkB,OAAO,CAAG;EAChC;AACJ,CAAC,CAAC;;AAEF,eAAeD,KAAK"},"metadata":{},"sourceType":"module"}