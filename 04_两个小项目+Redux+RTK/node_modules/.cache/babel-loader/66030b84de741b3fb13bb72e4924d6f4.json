{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/**\r\n * Strapi 可以帮助我们快速搭建一个供我们使用的API服务器\r\n * 在server文件夹下\r\n */\n\nimport React, { useEffect, useState } from 'react';\nimport StudentList from \"./components/StudentList\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [stuData, setStuData] = useState([]);\n\n  /*  需求：\r\n  *   将写死的数据替换为从接口 http://localhost:1337/api/students  中加载的数据\r\n  *\r\n  *   组件初始化时需要向服务器发送请求来加载数据    只是这一次 所以用useEffect\r\n  * */\n  useEffect(() => {\n    // 在effect中加载数据\n    // fetch() 用来向服务器发送请求加载数据，是Ajax的升级版\n    // 它需要两个参数：1.请求地址 2.请求信息  默认发的就是get请求\n    fetch('http://localhost:1337/api/students').then(res => {\n      // 请求发送成功时调用\n      // response表示响应信息\n      // console.log(res);\n      return res.json(); // 该方法可以将响应的json直接转换为js对象 返回的是一个promise   只有fetch里能用的\n      /**\r\n       * Response mixin 的 json() 方法接收一个 Response 流，并将其读取完成。\r\n       * 它返回一个 Promise，Promise 的解析 resolve 结果是将文本体解析为 JSON。 */\n    }).then(() => {\n      // 参数是上一个then里转换得到的\n    }).catch(() => {\n      // 请求失败的时候调用\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(StudentList, {\n      stus: stuData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"MOI8IxLFp9YRpDI9eETgMWZJ5vI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","StudentList","App","stuData","setStuData","fetch","then","res","json","catch"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["/**\r\n * Strapi 可以帮助我们快速搭建一个供我们使用的API服务器\r\n * 在server文件夹下\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport StudentList from \"./components/StudentList\";\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [stuData, setStuData] = useState([]);\r\n\r\n    /*  需求：\r\n    *   将写死的数据替换为从接口 http://localhost:1337/api/students  中加载的数据\r\n    *\r\n    *   组件初始化时需要向服务器发送请求来加载数据    只是这一次 所以用useEffect\r\n    * */\r\n    useEffect(() => {\r\n        // 在effect中加载数据\r\n        // fetch() 用来向服务器发送请求加载数据，是Ajax的升级版\r\n        // 它需要两个参数：1.请求地址 2.请求信息  默认发的就是get请求\r\n        fetch('http://localhost:1337/api/students',)\r\n            .then((res) => {\r\n                // 请求发送成功时调用\r\n                // response表示响应信息\r\n                // console.log(res);\r\n                return res.json() // 该方法可以将响应的json直接转换为js对象 返回的是一个promise   只有fetch里能用的\r\n                /**\r\n                 * Response mixin 的 json() 方法接收一个 Response 流，并将其读取完成。\r\n                 * 它返回一个 Promise，Promise 的解析 resolve 结果是将文本体解析为 JSON。 */\r\n            })\r\n            .then(() => {\r\n                // 参数是上一个then里转换得到的\r\n            })\r\n            .catch(() => {\r\n                // 请求失败的时候调用\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <StudentList stus={stuData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAO,WAAW;AAAC;AAGnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAEd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;EACID,SAAS,CAAC,MAAM;IACZ;IACA;IACA;IACAM,KAAK,CAAC,oCAAoC,CAAE,CACvCC,IAAI,CAAEC,GAAG,IAAK;MACX;MACA;MACA;MACA,OAAOA,GAAG,CAACC,IAAI,EAAE,EAAC;MAClB;AAChB;AACA;IACY,CAAC,CAAC,CACDF,IAAI,CAAC,MAAM;MACR;IACJ,CAAC,CAAC,CACDG,KAAK,CAAC,MAAM;MACT;IACJ,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,uBAChB,QAAC,WAAW;MAAC,IAAI,EAAEN;IAAQ;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC5B;AAEd,CAAC;AAAC,GApCID,GAAG;AAAA,KAAHA,GAAG;AAsCT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}