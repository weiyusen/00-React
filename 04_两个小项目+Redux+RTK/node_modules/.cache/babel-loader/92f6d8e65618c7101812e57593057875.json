{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useGetStudentsQuery } from './store/studentApi';\nimport StudentList from './components/StudentList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet num = 0;\nconst App = () => {\n  _s();\n  const result = useGetStudentsQuery(num); //传参的作用体现在data和currentData上\n  /*\r\n  currentData: undefined // 当前参数的最新数据 currentData存数据是会考虑参数的,当参数改变时,它只保存当前参数的最新数据\r\n  data: undefined // 最新的数据  data存数据是不考虑传进来的参数的变化的\r\n  isError: false // 布尔值，是否有错误\r\n  error: Error() // 对象，有错时才存在\r\n  isFetching: true // 布尔值，数据是否在加载   status为pending的时候为true, 为fullfiled的时候为false\r\n  isLoading: true // 布尔值，数据是否第一次加载  通过refetch刷新的时候是false\r\n  isSuccess: false // 布尔值，请求是否成功\r\n  isUninitialized: false // 布尔值，请求是否还没有开始发送\r\n  refetch: ƒ () // 一个函数，用来重新加载数据 唯一的一个函数\r\n  status: \"pending\" // 字符串，请求的状态\r\n  * */\n  console.log(result.data === result.currentData);\n  /**\r\n   * \r\n   */\n  const {\n    data: stus,\n    isSuccess,\n    isLoading,\n    refetch\n  } = result;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => refetch(),\n      children: \"\\u5237\\u65B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => refetch(),\n      children: \"\\u6539\\u53D8num\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6570\\u636E\\u52A0\\u8F7D\\u4E2D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 27\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(StudentList, {\n      stus: stus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"oDRi4PqEuNdOH8MaAbTZ5Q868cg=\", false, function () {\n  return [useGetStudentsQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useGetStudentsQuery","StudentList","num","App","result","console","log","data","currentData","stus","isSuccess","isLoading","refetch"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport { useGetStudentsQuery } from './store/studentApi';\r\nimport StudentList from './components/StudentList'\r\n\r\nlet num = 0\r\n\r\nconst App = () => {\r\n    const result = useGetStudentsQuery(num) //传参的作用体现在data和currentData上\r\n    /*\r\n    currentData: undefined // 当前参数的最新数据 currentData存数据是会考虑参数的,当参数改变时,它只保存当前参数的最新数据\r\n    data: undefined // 最新的数据  data存数据是不考虑传进来的参数的变化的\r\n    isError: false // 布尔值，是否有错误\r\n    error: Error() // 对象，有错时才存在\r\n    isFetching: true // 布尔值，数据是否在加载   status为pending的时候为true, 为fullfiled的时候为false\r\n    isLoading: true // 布尔值，数据是否第一次加载  通过refetch刷新的时候是false\r\n    isSuccess: false // 布尔值，请求是否成功\r\n    isUninitialized: false // 布尔值，请求是否还没有开始发送\r\n    refetch: ƒ () // 一个函数，用来重新加载数据 唯一的一个函数\r\n    status: \"pending\" // 字符串，请求的状态\r\n* */\r\n    console.log(result.data === result.currentData);\r\n    /**\r\n     * \r\n     */\r\n    const { data: stus, isSuccess, isLoading, refetch } = result\r\n    return (\r\n        <div>\r\n            <button onClick={() => refetch()}>刷新</button>\r\n            <button onClick={() => refetch()}>改变num</button>\r\n            {isLoading && <p>数据加载中</p>}\r\n            {isSuccess && <StudentList stus={stus}></StudentList>}\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAAA;AAElD,IAAIC,GAAG,GAAG,CAAC;AAEX,MAAMC,GAAG,GAAG,MAAM;EAAA;EACd,MAAMC,MAAM,GAAGJ,mBAAmB,CAACE,GAAG,CAAC,EAAC;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,KAAKH,MAAM,CAACI,WAAW,CAAC;EAC/C;AACJ;AACA;EACI,MAAM;IAAED,IAAI,EAAEE,IAAI;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGR,MAAM;EAC5D,oBACI;IAAA,wBACI;MAAQ,OAAO,EAAE,MAAMQ,OAAO,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,eAC7C;MAAQ,OAAO,EAAE,MAAMA,OAAO,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,EAC/CD,SAAS,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,EACzBD,SAAS,iBAAI,QAAC,WAAW;MAAC,IAAI,EAAED;IAAK;MAAA;MAAA;MAAA;IAAA,QAAe;EAAA;IAAA;IAAA;IAAA;EAAA,QACnD;AAEd,CAAC;AAAC,GA3BIN,GAAG;EAAA,QACUH,mBAAmB;AAAA;AAAA,KADhCG,GAAG;AA4BT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}