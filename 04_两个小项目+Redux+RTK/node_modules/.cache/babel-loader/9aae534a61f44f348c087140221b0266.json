{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useGetStudentsQuery } from './store/studentApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // 调用API查询数据\n  // 这个钩子函数它会返回一个对象作为返回值，请求过程中的相关数据都会在该对象中存储\n  const {\n    data,\n    isSuccess,\n    isLoading\n  } = useGetStudentsQuery(); //调用Api中的钩子查询数据\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6570\\u636E\\u52A0\\u8F7D\\u4E2D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 27\n    }, this), isSuccess && data.data.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [item.attributes.name, \"---\", item.attributes.age, \"---\", item.attributes.gender, \"---\", item.attributes.address]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 49\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n// 优势是不需要trycatch 、 setLoading 、 setError 这一系列的东西了  内部都处理好了，想要什么就直接解构\n/*\r\n过程回顾：首先创建api对象，传入三个参数（reducerPath、baseQuery、endpoints)\r\n         然后从api对象中解构出对应的钩子函数\r\n         接着配置store，加中间件\r\n         \r\n*/\n_s(App, \"S65fuMXdTZXWPTHgD3vFgSdgUpE=\", false, function () {\n  return [useGetStudentsQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useGetStudentsQuery","App","data","isSuccess","isLoading","map","item","attributes","name","age","gender","address","id"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport { useGetStudentsQuery } from './store/studentApi';\r\n\r\nconst App = () => {\r\n    // 调用API查询数据\r\n    // 这个钩子函数它会返回一个对象作为返回值，请求过程中的相关数据都会在该对象中存储\r\n    const {data, isSuccess, isLoading} = useGetStudentsQuery() //调用Api中的钩子查询数据\r\n    return (\r\n        <div>\r\n            {/* useGetStudentsQuery是异步的，如果上面的data还没有回来，那么页面这里的data.data就会报错（undefined的属性读取） */}\r\n            {/* 所以要加个判断,这个判断isSuccess就在返回的数据里 */}\r\n            {/* 如果想有正在加载的提示，有isLoading */}\r\n            {isLoading && <p>数据加载中</p>}\r\n            {isSuccess && data.data.map(item => <p key={item.id}>\r\n                {item.attributes.name}---\r\n                {item.attributes.age}---\r\n                {item.attributes.gender}---\r\n                {item.attributes.address}\r\n                </p>)}\r\n        </div>\r\n    );\r\n};\r\n// 优势是不需要trycatch 、 setLoading 、 setError 这一系列的东西了  内部都处理好了，想要什么就直接解构\r\n/*\r\n过程回顾：首先创建api对象，传入三个参数（reducerPath、baseQuery、endpoints)\r\n         然后从api对象中解构出对应的钩子函数\r\n         接着配置store，加中间件\r\n         \r\n*/\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAQ,oBAAoB;AAAC;AAEzD,MAAMC,GAAG,GAAG,MAAM;EAAA;EACd;EACA;EACA,MAAM;IAACC,IAAI;IAAEC,SAAS;IAAEC;EAAS,CAAC,GAAGJ,mBAAmB,EAAE,EAAC;EAC3D,oBACI;IAAA,WAIKI,SAAS,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,EACzBD,SAAS,IAAID,IAAI,CAACA,IAAI,CAACG,GAAG,CAACC,IAAI,iBAAI;MAAA,WAC/BA,IAAI,CAACC,UAAU,CAACC,IAAI,SACpBF,IAAI,CAACC,UAAU,CAACE,GAAG,SACnBH,IAAI,CAACC,UAAU,CAACG,MAAM,SACtBJ,IAAI,CAACC,UAAU,CAACI,OAAO;IAAA,GAJgBL,IAAI,CAACM,EAAE;MAAA;MAAA;MAAA;IAAA,QAK3C,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AALA,GApBMX,GAAG;EAAA,QAGgCD,mBAAmB;AAAA;AAAA,KAHtDC,GAAG;AA0BT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}