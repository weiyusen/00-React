{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\components\\\\B.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst B = () => {\n  console.log('B渲染');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u7EC4\\u4EF6B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n/*\r\n*   React.memo() 是一个高阶组件\r\n*       它接收另一个组件作为参数，并且会返回一个包装过的新组件\r\n*       包装过的新组件就会具有缓存功能，\r\n*           包装过后，只有组件的props发生变化化\r\n*           才会触发组件的重新的渲染，否则总是返回缓存中结果\r\n* */\n_c = B;\nexport default _c2 = /*#__PURE__*/React.memo(B);\nvar _c, _c2;\n$RefreshReg$(_c, \"B\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","B","console","log","memo"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/components/B.js"],"sourcesContent":["import React,{useState} from 'react';\r\n\r\nconst B = () => {\r\n    console.log('B渲染');\r\n    return (\r\n        <div>\r\n            <h2>组件B</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\n/*\r\n*   React.memo() 是一个高阶组件\r\n*       它接收另一个组件作为参数，并且会返回一个包装过的新组件\r\n*       包装过的新组件就会具有缓存功能，\r\n*           包装过后，只有组件的props发生变化化\r\n*           才会触发组件的重新的渲染，否则总是返回缓存中结果\r\n* */\r\n\r\nexport default React.memo(B);"],"mappings":";AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAC;AAErC,MAAMC,CAAC,GAAG,MAAM;EACZC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAClB,oBACI;IAAA,uBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAY;IAAA;IAAA;IAAA;EAAA,QACV;AAEd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AANA,KATMF,CAAC;AAiBP,kCAAeF,KAAK,CAACK,IAAI,CAACH,CAAC,CAAC;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}