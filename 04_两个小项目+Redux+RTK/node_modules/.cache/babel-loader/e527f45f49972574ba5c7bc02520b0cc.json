{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/**\r\n * Strapi 可以帮助我们快速搭建一个供我们使用的API服务器\r\n * 在server文件夹下\r\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport StudentList from \"./components/StudentList\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [stuData, setStuData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 可以放到外面，然后套个useCallback避免重复创建\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null); //重置，不能保存上一次的错误\n      // 用await async改写\n      const res = await fetch('http://localhost:1337/api/students');\n      // 判断请求是否加载成功\n      if (res.ok) {\n        const data = await res.json();\n        setStuData(data.data);\n      } else {\n        throw new Error('数据加载失败！'); //因为这里是同步写法，所以用不了.catch, 只能用try catch\n      }\n    } catch (error) {\n      setError(error);\n    } finally {\n      // try catch 里不管出没出错都要执行的代码放这里\n      setLoading(false);\n    }\n  }, []);\n  // useEffect must not return anything besides a function, which is used for clean-up\n  // useEffect不能传异步函数，所以传一个普通函数，里面定义了异步函数（多定义了一层）\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\u52A0\\u8F7D\\u6570\\u636E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(StudentList, {\n      stus: stuData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 38\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6570\\u636E\\u6B63\\u5728\\u52A0\\u8F7D\\u4E2D\\u3002\\u3002\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6570\\u636E\\u52A0\\u8F7D\\u5F02\\u5E38\\uFF01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"mdqY1P8/HxnzBtOKnoKg1UW8OXI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","StudentList","App","stuData","setStuData","loading","setLoading","error","setError","fetchData","res","fetch","ok","data","json","Error"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["/**\r\n * Strapi 可以帮助我们快速搭建一个供我们使用的API服务器\r\n * 在server文件夹下\r\n */\r\n\r\nimport React, { useEffect, useState,useCallback } from 'react';\r\nimport StudentList from \"./components/StudentList\";\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [stuData, setStuData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null)\r\n\r\n    // 可以放到外面，然后套个useCallback避免重复创建\r\n    const fetchData = useCallback(async () => {\r\n        try {\r\n            setLoading(true)\r\n            setError(null) //重置，不能保存上一次的错误\r\n            // 用await async改写\r\n            const res = await fetch('http://localhost:1337/api/students')\r\n            // 判断请求是否加载成功\r\n            if (res.ok) {\r\n                const data = await res.json()\r\n                setStuData(data.data)\r\n            } else {\r\n                throw new Error('数据加载失败！') //因为这里是同步写法，所以用不了.catch, 只能用try catch\r\n            }\r\n        } catch (error) {\r\n            setError(error)\r\n        } finally {\r\n            // try catch 里不管出没出错都要执行的代码放这里\r\n            setLoading(false)\r\n        }\r\n    },[])\r\n    // useEffect must not return anything besides a function, which is used for clean-up\r\n    // useEffect不能传异步函数，所以传一个普通函数，里面定义了异步函数（多定义了一层）\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {/* 点按钮可以手动刷新 */}\r\n            <button>加载数据</button>\r\n            {/* 数据没在加载或没出错，就显示表格 */}\r\n            {(!loading && !error) && <StudentList stus={stuData} />}\r\n            {loading && <p>数据正在加载中。。。</p>}\r\n            {/* 与运算：如果请求正常，那么error为null 则返回的是null,而null不会显示到页面上；如果error是个对象，返回的是第二个值即P标签 */}\r\n            {error && <p>数据加载异常！</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAACC,WAAW,QAAQ,OAAO;AAC9D,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAO,WAAW;AAAC;AAGnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAEd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMU,SAAS,GAAGT,WAAW,CAAC,YAAY;IACtC,IAAI;MACAM,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC,EAAC;MACf;MACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAC7D;MACA,IAAID,GAAG,CAACE,EAAE,EAAE;QACR,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;QAC7BV,UAAU,CAACS,IAAI,CAACA,IAAI,CAAC;MACzB,CAAC,MAAM;QACH,MAAM,IAAIE,KAAK,CAAC,SAAS,CAAC,EAAC;MAC/B;IACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC;IACnB,CAAC,SAAS;MACN;MACAD,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAC,EAAE,CAAC;EACL;EACA;EACAR,SAAS,CAAC,MAAM;IACZW,SAAS,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,wBAEhB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAqB,EAEnB,CAACJ,OAAO,IAAI,CAACE,KAAK,iBAAK,QAAC,WAAW;MAAC,IAAI,EAAEJ;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,EACtDE,OAAO,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,EAE5BE,KAAK,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc;EAAA;IAAA;IAAA;IAAA;EAAA,QACtB;AAEd,CAAC;AAAC,GA5CIL,GAAG;AAAA,KAAHA,GAAG;AA8CT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}