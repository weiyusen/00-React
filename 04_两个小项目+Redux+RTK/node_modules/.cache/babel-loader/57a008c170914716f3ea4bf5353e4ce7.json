{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useReducer } from 'react';\n// useReducer(reducer, initialArg, init)\n/*\r\n*   参数：\r\n*       reducer : 整合函数\r\n*           对于我们当前state的所有操作都应该在该函数中定义\r\n*           该函数的返回值，会成为state的新值\r\n*           reducer在执行时，会收到两个参数：\r\n*               state 当前最新的state\r\n*               action 它需要一个对象\r\n*                       在对象中会存储dispatch所发送的指令\r\n*       initialArg : state的初始值，作用和useState()中的值是一样\r\n        init:\r\n*   返回值：\r\n*       数组：\r\n*           第一个参数，state 用来获取state的值\r\n*           第二个参数，state 修改的派发器\r\n*                   通过派发器可以发送操作state的命令\r\n*                   具体的修改行为将会由另外一个函数(reducer)执行（就是我们传的第一个参数（函数））\r\n*\r\n* */\n\n// 为了避免reducuer会重复创建，通常reducer会定义到组件的外部\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countReducer = (state, action) => {\n  // console.log(\"reducer执行了\", state);\n  // 整合的作用体现在这里，根据不同的dispatch派发的任务实现不同的功能\n  // 可以根据action中不同的type来执行不同的操作\n  // console.log(action.type);\n  // if (action.type === 'ADD') {\n  //     return state + 1\n  // } else if (action.type === 'SUB') {\n  //     return state - 1\n  // }\n  // return state //以防用户传的值无效\n\n  // 也可以用switch，更清晰\n  switch (action.type) {\n    case 'ADD':\n      return state + 1;\n    case 'SUB':\n      return state - 1;\n    default:\n      return state;\n  }\n};\nconst App = () => {\n  _s();\n  /*  之前的做法\r\n      const [count, setCount] = useState(1)\r\n  \r\n      const addHandler = () => {\r\n          setCount(prevState => prevState + 1)\r\n      }\r\n  \r\n      const subHandler = () => {\r\n          setCount(prevState => prevState - 1)\r\n      }\r\n  */\n\n  // 使用useReducer\n  const [count, countDispatch] = useReducer(countReducer, 1);\n  const addHandler = () => {\n    // 增加count的值\n    countDispatch({\n      type: 'ADD'\n    });\n  };\n  const subHandler = () => {\n    // 减少count的值\n    countDispatch({\n      type: 'SUB'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 30,\n      width: 200,\n      height: 200,\n      margin: '100px auto',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subHandler,\n      children: \"\\u51CF\\u5C11\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), count, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHandler,\n      children: \"\\u589E\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"I1ziWp55P/2jWhb8brp8uXhD2+s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useReducer","countReducer","state","action","type","App","count","countDispatch","addHandler","subHandler","fontSize","width","height","margin","textAlign"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React, { useState, useReducer } from 'react'\r\n// useReducer(reducer, initialArg, init)\r\n/*\r\n*   参数：\r\n*       reducer : 整合函数\r\n*           对于我们当前state的所有操作都应该在该函数中定义\r\n*           该函数的返回值，会成为state的新值\r\n*           reducer在执行时，会收到两个参数：\r\n*               state 当前最新的state\r\n*               action 它需要一个对象\r\n*                       在对象中会存储dispatch所发送的指令\r\n*       initialArg : state的初始值，作用和useState()中的值是一样\r\n        init:\r\n*   返回值：\r\n*       数组：\r\n*           第一个参数，state 用来获取state的值\r\n*           第二个参数，state 修改的派发器\r\n*                   通过派发器可以发送操作state的命令\r\n*                   具体的修改行为将会由另外一个函数(reducer)执行（就是我们传的第一个参数（函数））\r\n*\r\n* */\r\n\r\n// 为了避免reducuer会重复创建，通常reducer会定义到组件的外部\r\nconst countReducer = (state, action) => {\r\n    // console.log(\"reducer执行了\", state);\r\n    // 整合的作用体现在这里，根据不同的dispatch派发的任务实现不同的功能\r\n    // 可以根据action中不同的type来执行不同的操作\r\n    // console.log(action.type);\r\n    // if (action.type === 'ADD') {\r\n    //     return state + 1\r\n    // } else if (action.type === 'SUB') {\r\n    //     return state - 1\r\n    // }\r\n    // return state //以防用户传的值无效\r\n\r\n    // 也可以用switch，更清晰\r\n    switch (action.type) {\r\n        case 'ADD':\r\n            return state + 1\r\n        case 'SUB':\r\n            return state - 1\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst App = () => {\r\n    /*  之前的做法\r\n        const [count, setCount] = useState(1)\r\n    \r\n        const addHandler = () => {\r\n            setCount(prevState => prevState + 1)\r\n        }\r\n    \r\n        const subHandler = () => {\r\n            setCount(prevState => prevState - 1)\r\n        }\r\n    */\r\n\r\n    // 使用useReducer\r\n    const [count, countDispatch] = useReducer(countReducer , 1)\r\n    const addHandler = () => {\r\n        // 增加count的值\r\n        countDispatch({ type: 'ADD' })\r\n    }\r\n    const subHandler = () => {\r\n        // 减少count的值\r\n        countDispatch({ type: 'SUB' })\r\n    }\r\n    return (\r\n        <div style={{ fontSize: 30, width: 200, height: 200, margin: '100px auto', textAlign: 'center' }}>\r\n            <button onClick={subHandler}>减少</button>\r\n            {count}\r\n            <button onClick={addHandler}>增加</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA,MAAMC,YAAY,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,KAAK;MACN,OAAOF,KAAK,GAAG,CAAC;IACpB,KAAK,KAAK;MACN,OAAOA,KAAK,GAAG,CAAC;IACpB;MACI,OAAOA,KAAK;EAAA;AAExB,CAAC;AAGD,MAAMG,GAAG,GAAG,MAAM;EAAA;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;EACA,MAAM,CAACC,KAAK,EAAEC,aAAa,CAAC,GAAGP,UAAU,CAACC,YAAY,EAAG,CAAC,CAAC;EAC3D,MAAMO,UAAU,GAAG,MAAM;IACrB;IACAD,aAAa,CAAC;MAAEH,IAAI,EAAE;IAAM,CAAC,CAAC;EAClC,CAAC;EACD,MAAMK,UAAU,GAAG,MAAM;IACrB;IACAF,aAAa,CAAC;MAAEH,IAAI,EAAE;IAAM,CAAC,CAAC;EAClC,CAAC;EACD,oBACI;IAAK,KAAK,EAAE;MAAEM,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE,GAAG;MAAEC,MAAM,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAA,wBAC7F;MAAQ,OAAO,EAAEL,UAAW;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,EACvCH,KAAK,eACN;MAAQ,OAAO,EAAEE,UAAW;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY;EAAA;IAAA;IAAA;IAAA;EAAA,QACtC;AAEd,CAAC;AAAA,GA9BKH,GAAG;AAAA,KAAHA,GAAG;AAgCT,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}