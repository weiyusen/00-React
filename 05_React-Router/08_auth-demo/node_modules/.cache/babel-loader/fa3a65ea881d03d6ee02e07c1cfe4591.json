{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = function (obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __spreadValues = function (a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var _j = 0, _k = __getOwnPropSymbols(b); _j < _k.length; _j++) {\n    var prop = _k[_j];\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = function (a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\n\nvar __objRest = function (source, exclude) {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var _j = 0, _k = __getOwnPropSymbols(source); _j < _k.length; _j++) {\n    var prop = _k[_j];\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nvar __async = function (__this, __arguments, generator) {\n  return new Promise(function (resolve, reject) {\n    var fulfilled = function (value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var rejected = function (value) {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var step = function (x) {\n      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    };\n\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n}; // src/query/core/apiState.ts\n\n\nvar QueryStatus;\n\n(function (QueryStatus2) {\n  QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n  QueryStatus2[\"pending\"] = \"pending\";\n  QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n  QueryStatus2[\"rejected\"] = \"rejected\";\n})(QueryStatus || (QueryStatus = {}));\n\nfunction getRequestStatusFlags(status) {\n  return {\n    status: status,\n    isUninitialized: status === QueryStatus.uninitialized,\n    isLoading: status === QueryStatus.pending,\n    isSuccess: status === QueryStatus.fulfilled,\n    isError: status === QueryStatus.rejected\n  };\n} // src/query/utils/isAbsoluteUrl.ts\n\n\nfunction isAbsoluteUrl(url) {\n  return new RegExp(\"(^|:)//\").test(url);\n} // src/query/utils/joinUrls.ts\n\n\nvar withoutTrailingSlash = function (url) {\n  return url.replace(/\\/$/, \"\");\n};\n\nvar withoutLeadingSlash = function (url) {\n  return url.replace(/^\\//, \"\");\n};\n\nfunction joinUrls(base, url) {\n  if (!base) {\n    return url;\n  }\n\n  if (!url) {\n    return base;\n  }\n\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n\n  var delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return \"\" + base + delimiter + url;\n} // src/query/utils/flatten.ts\n\n\nvar flatten = function (arr) {\n  return [].concat.apply([], arr);\n}; // src/query/utils/isOnline.ts\n\n\nfunction isOnline() {\n  return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n} // src/query/utils/isDocumentVisible.ts\n\n\nfunction isDocumentVisible() {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n\n  return document.visibilityState !== \"hidden\";\n} // src/query/utils/copyWithStructuralSharing.ts\n\n\nimport { isPlainObject as _iPO } from \"@reduxjs/toolkit\";\nvar isPlainObject = _iPO;\n\nfunction copyWithStructuralSharing(oldObj, newObj) {\n  if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n\n  var newKeys = Object.keys(newObj);\n  var oldKeys = Object.keys(oldObj);\n  var isSameObject = newKeys.length === oldKeys.length;\n  var mergeObj = Array.isArray(newObj) ? [] : {};\n\n  for (var _j = 0, newKeys_1 = newKeys; _j < newKeys_1.length; _j++) {\n    var key = newKeys_1[_j];\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n\n  return isSameObject ? oldObj : mergeObj;\n} // src/query/fetchBaseQuery.ts\n\n\nimport { isPlainObject as isPlainObject2 } from \"@reduxjs/toolkit\";\n\nvar defaultFetchFn = function () {\n  var args = [];\n\n  for (var _j = 0; _j < arguments.length; _j++) {\n    args[_j] = arguments[_j];\n  }\n\n  return fetch.apply(void 0, args);\n};\n\nvar defaultValidateStatus = function (response) {\n  return response.status >= 200 && response.status <= 299;\n};\n\nvar defaultIsJsonContentType = function (headers) {\n  return /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\");\n};\n\nfunction stripUndefined(obj) {\n  if (!isPlainObject2(obj)) {\n    return obj;\n  }\n\n  var copy = __spreadValues({}, obj);\n\n  for (var _j = 0, _k = Object.entries(copy); _j < _k.length; _j++) {\n    var _l = _k[_j],\n        k = _l[0],\n        v = _l[1];\n    if (v === void 0) delete copy[k];\n  }\n\n  return copy;\n}\n\nfunction fetchBaseQuery(_a) {\n  var _this = this;\n\n  if (_a === void 0) {\n    _a = {};\n  }\n\n  var _b = _a,\n      baseUrl = _b.baseUrl,\n      _j = _b.prepareHeaders,\n      prepareHeaders = _j === void 0 ? function (x) {\n    return x;\n  } : _j,\n      _k = _b.fetchFn,\n      fetchFn = _k === void 0 ? defaultFetchFn : _k,\n      paramsSerializer = _b.paramsSerializer,\n      _l = _b.isJsonContentType,\n      isJsonContentType = _l === void 0 ? defaultIsJsonContentType : _l,\n      _m = _b.jsonContentType,\n      jsonContentType = _m === void 0 ? \"application/json\" : _m,\n      defaultTimeout = _b.timeout,\n      globalValidateStatus = _b.validateStatus,\n      baseFetchOptions = __objRest(_b, [\"baseUrl\", \"prepareHeaders\", \"fetchFn\", \"paramsSerializer\", \"isJsonContentType\", \"jsonContentType\", \"timeout\", \"validateStatus\"]);\n\n  if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n    console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n  }\n\n  return function (arg, api) {\n    return __async(_this, null, function () {\n      var signal, getState, extra, endpoint, forced, type, meta, _a2, url, _j, method, _k, headers, _l, body, _m, params, _o, responseHandler, _p, validateStatus, _q, timeout, rest, config, _r, isJsonifiable, divider, query, request, requestClone, response, timedOut, timeoutId, e_1, responseClone, resultData, responseText, handleResponseError_1, e_2;\n\n      return __generator(this, function (_s) {\n        switch (_s.label) {\n          case 0:\n            signal = api.signal, getState = api.getState, extra = api.extra, endpoint = api.endpoint, forced = api.forced, type = api.type;\n            _a2 = typeof arg == \"string\" ? {\n              url: arg\n            } : arg, url = _a2.url, _j = _a2.method, method = _j === void 0 ? \"GET\" : _j, _k = _a2.headers, headers = _k === void 0 ? new Headers(baseFetchOptions.headers) : _k, _l = _a2.body, body = _l === void 0 ? void 0 : _l, _m = _a2.params, params = _m === void 0 ? void 0 : _m, _o = _a2.responseHandler, responseHandler = _o === void 0 ? \"json\" : _o, _p = _a2.validateStatus, validateStatus = _p === void 0 ? globalValidateStatus != null ? globalValidateStatus : defaultValidateStatus : _p, _q = _a2.timeout, timeout = _q === void 0 ? defaultTimeout : _q, rest = __objRest(_a2, [\"url\", \"method\", \"headers\", \"body\", \"params\", \"responseHandler\", \"validateStatus\", \"timeout\"]);\n            config = __spreadValues(__spreadProps(__spreadValues({}, baseFetchOptions), {\n              method: method,\n              signal: signal,\n              body: body\n            }), rest);\n            headers = new Headers(stripUndefined(headers));\n            _r = config;\n            return [4\n            /*yield*/\n            , prepareHeaders(headers, {\n              getState: getState,\n              extra: extra,\n              endpoint: endpoint,\n              forced: forced,\n              type: type\n            })];\n\n          case 1:\n            _r.headers = _s.sent() || headers;\n\n            isJsonifiable = function (body2) {\n              return typeof body2 === \"object\" && (isPlainObject2(body2) || Array.isArray(body2) || typeof body2.toJSON === \"function\");\n            };\n\n            if (!config.headers.has(\"content-type\") && isJsonifiable(body)) {\n              config.headers.set(\"content-type\", jsonContentType);\n            }\n\n            if (isJsonifiable(body) && isJsonContentType(config.headers)) {\n              config.body = JSON.stringify(body);\n            }\n\n            if (params) {\n              divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n              query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n              url += divider + query;\n            }\n\n            url = joinUrls(baseUrl, url);\n            request = new Request(url, config);\n            requestClone = request.clone();\n            meta = {\n              request: requestClone\n            };\n            timedOut = false, timeoutId = timeout && setTimeout(function () {\n              timedOut = true;\n              api.abort();\n            }, timeout);\n            _s.label = 2;\n\n          case 2:\n            _s.trys.push([2, 4, 5, 6]);\n\n            return [4\n            /*yield*/\n            , fetchFn(request)];\n\n          case 3:\n            response = _s.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            e_1 = _s.sent();\n            return [2\n            /*return*/\n            , {\n              error: {\n                status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n                error: String(e_1)\n              },\n              meta: meta\n            }];\n\n          case 5:\n            if (timeoutId) clearTimeout(timeoutId);\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            responseClone = response.clone();\n            meta.response = responseClone;\n            responseText = \"\";\n            _s.label = 7;\n\n          case 7:\n            _s.trys.push([7, 9,, 10]);\n\n            return [4\n            /*yield*/\n            , Promise.all([handleResponse(response, responseHandler).then(function (r) {\n              return resultData = r;\n            }, function (e) {\n              return handleResponseError_1 = e;\n            }), responseClone.text().then(function (r) {\n              return responseText = r;\n            }, function () {})])];\n\n          case 8:\n            _s.sent();\n\n            if (handleResponseError_1) throw handleResponseError_1;\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            e_2 = _s.sent();\n            return [2\n            /*return*/\n            , {\n              error: {\n                status: \"PARSING_ERROR\",\n                originalStatus: response.status,\n                data: responseText,\n                error: String(e_2)\n              },\n              meta: meta\n            }];\n\n          case 10:\n            return [2\n            /*return*/\n            , validateStatus(response, resultData) ? {\n              data: resultData,\n              meta: meta\n            } : {\n              error: {\n                status: response.status,\n                data: resultData\n              },\n              meta: meta\n            }];\n        }\n      });\n    });\n  };\n\n  function handleResponse(response, responseHandler) {\n    return __async(this, null, function () {\n      var text;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            if (typeof responseHandler === \"function\") {\n              return [2\n              /*return*/\n              , responseHandler(response)];\n            }\n\n            if (responseHandler === \"content-type\") {\n              responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n            }\n\n            if (!(responseHandler === \"json\")) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , response.text()];\n\n          case 1:\n            text = _j.sent();\n            return [2\n            /*return*/\n            , text.length ? JSON.parse(text) : null];\n\n          case 2:\n            return [2\n            /*return*/\n            , response.text()];\n        }\n      });\n    });\n  }\n} // src/query/HandledError.ts\n\n\nvar HandledError =\n/** @class */\nfunction () {\n  function HandledError(value, meta) {\n    if (meta === void 0) {\n      meta = void 0;\n    }\n\n    this.value = value;\n    this.meta = meta;\n  }\n\n  return HandledError;\n}(); // src/query/retry.ts\n\n\nfunction defaultBackoff(attempt, maxRetries) {\n  if (attempt === void 0) {\n    attempt = 0;\n  }\n\n  if (maxRetries === void 0) {\n    maxRetries = 5;\n  }\n\n  return __async(this, null, function () {\n    var attempts, timeout;\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          attempts = Math.min(attempt, maxRetries);\n          timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n          return [4\n          /*yield*/\n          , new Promise(function (resolve) {\n            return setTimeout(function (res) {\n              return resolve(res);\n            }, timeout);\n          })];\n\n        case 1:\n          _j.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction fail(e) {\n  throw Object.assign(new HandledError({\n    error: e\n  }), {\n    throwImmediately: true\n  });\n}\n\nvar EMPTY_OPTIONS = {};\n\nvar retryWithBackoff = function (baseQuery, defaultOptions) {\n  return function (args, api, extraOptions) {\n    return __async(void 0, null, function () {\n      var possibleMaxRetries, maxRetries, defaultRetryCondition, options, retry2, result, e_3;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            possibleMaxRetries = [5, (defaultOptions || EMPTY_OPTIONS).maxRetries, (extraOptions || EMPTY_OPTIONS).maxRetries].filter(Boolean);\n            maxRetries = possibleMaxRetries.slice(-1)[0];\n\n            defaultRetryCondition = function (_, __, _j) {\n              var attempt = _j.attempt;\n              return attempt <= maxRetries;\n            };\n\n            options = __spreadValues(__spreadValues({\n              maxRetries: maxRetries,\n              backoff: defaultBackoff,\n              retryCondition: defaultRetryCondition\n            }, defaultOptions), extraOptions);\n            retry2 = 0;\n            _j.label = 1;\n\n          case 1:\n            if (!true) return [3\n            /*break*/\n            , 7];\n            _j.label = 2;\n\n          case 2:\n            _j.trys.push([2, 4,, 6]);\n\n            return [4\n            /*yield*/\n            , baseQuery(args, api, extraOptions)];\n\n          case 3:\n            result = _j.sent();\n\n            if (result.error) {\n              throw new HandledError(result);\n            }\n\n            return [2\n            /*return*/\n            , result];\n\n          case 4:\n            e_3 = _j.sent();\n            retry2++;\n\n            if (e_3.throwImmediately) {\n              if (e_3 instanceof HandledError) {\n                return [2\n                /*return*/\n                , e_3.value];\n              }\n\n              throw e_3;\n            }\n\n            if (e_3 instanceof HandledError && !options.retryCondition(e_3.value.error, args, {\n              attempt: retry2,\n              baseQueryApi: api,\n              extraOptions: extraOptions\n            })) {\n              return [2\n              /*return*/\n              , e_3.value];\n            }\n\n            return [4\n            /*yield*/\n            , options.backoff(retry2, options.maxRetries)];\n\n          case 5:\n            _j.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n};\n\nvar retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail: fail\n}); // src/query/core/setupListeners.ts\n\nimport { createAction } from \"@reduxjs/toolkit\";\nvar onFocus = /* @__PURE__ */createAction(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */createAction(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */createAction(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */createAction(\"__rtkq/offline\");\nvar initialized = false;\n\nfunction setupListeners(dispatch, customHandler) {\n  function defaultHandler() {\n    var handleFocus = function () {\n      return dispatch(onFocus());\n    };\n\n    var handleFocusLost = function () {\n      return dispatch(onFocusLost());\n    };\n\n    var handleOnline = function () {\n      return dispatch(onOnline());\n    };\n\n    var handleOffline = function () {\n      return dispatch(onOffline());\n    };\n\n    var handleVisibilityChange = function () {\n      if (window.document.visibilityState === \"visible\") {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n\n    if (!initialized) {\n      if (typeof window !== \"undefined\" && window.addEventListener) {\n        window.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\n        window.addEventListener(\"focus\", handleFocus, false);\n        window.addEventListener(\"online\", handleOnline, false);\n        window.addEventListener(\"offline\", handleOffline, false);\n        initialized = true;\n      }\n    }\n\n    var unsubscribe = function () {\n      window.removeEventListener(\"focus\", handleFocus);\n      window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n      initialized = false;\n    };\n\n    return unsubscribe;\n  }\n\n  return customHandler ? customHandler(dispatch, {\n    onFocus: onFocus,\n    onFocusLost: onFocusLost,\n    onOffline: onOffline,\n    onOnline: onOnline\n  }) : defaultHandler();\n} // src/query/core/buildSelectors.ts\n\n\nimport { createNextState as createNextState2, createSelector } from \"@reduxjs/toolkit\"; // src/query/endpointDefinitions.ts\n\nvar DefinitionType;\n\n(function (DefinitionType2) {\n  DefinitionType2[\"query\"] = \"query\";\n  DefinitionType2[\"mutation\"] = \"mutation\";\n})(DefinitionType || (DefinitionType = {}));\n\nfunction isQueryDefinition(e) {\n  return e.type === DefinitionType.query;\n}\n\nfunction isMutationDefinition(e) {\n  return e.type === DefinitionType.mutation;\n}\n\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n  if (isFunction(description)) {\n    return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\n  }\n\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n\n  return [];\n}\n\nfunction isFunction(t) {\n  return typeof t === \"function\";\n}\n\nfunction expandTagDescription(description) {\n  return typeof description === \"string\" ? {\n    type: description\n  } : description;\n} // src/query/core/buildSlice.ts\n\n\nimport { combineReducers, createAction as createAction2, createSlice, isAnyOf, isFulfilled as isFulfilled2, isRejectedWithValue as isRejectedWithValue2, createNextState, prepareAutoBatched } from \"@reduxjs/toolkit\"; // src/query/utils/isNotNullish.ts\n\nfunction isNotNullish(v) {\n  return v != null;\n} // src/query/core/buildInitiate.ts\n\n\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\n\nvar isUpsertQuery = function (arg) {\n  return typeof arg[forceQueryFnSymbol] === \"function\";\n};\n\nfunction buildInitiate(_j) {\n  var serializeQueryArgs = _j.serializeQueryArgs,\n      queryThunk = _j.queryThunk,\n      mutationThunk = _j.mutationThunk,\n      api = _j.api,\n      context = _j.context;\n  var runningQueries = new Map();\n  var runningMutations = new Map();\n  var _k = api.internalActions,\n      unsubscribeQueryResult = _k.unsubscribeQueryResult,\n      removeMutationResult = _k.removeMutationResult,\n      updateSubscriptionOptions = _k.updateSubscriptionOptions;\n  return {\n    buildInitiateQuery: buildInitiateQuery,\n    buildInitiateMutation: buildInitiateMutation,\n    getRunningQueryThunk: getRunningQueryThunk,\n    getRunningMutationThunk: getRunningMutationThunk,\n    getRunningQueriesThunk: getRunningQueriesThunk,\n    getRunningMutationsThunk: getRunningMutationsThunk,\n    getRunningOperationPromises: getRunningOperationPromises,\n    removalWarning: removalWarning\n  };\n\n  function removalWarning() {\n    throw new Error(\"This method had to be removed due to a conceptual bug in RTK.\\n       Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\\n       See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for new guidance on SSR.\");\n  }\n\n  function getRunningOperationPromises() {\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      removalWarning();\n    } else {\n      var extract = function (v) {\n        return Array.from(v.values()).flatMap(function (queriesForStore) {\n          return queriesForStore ? Object.values(queriesForStore) : [];\n        });\n      };\n\n      return __spreadArray(__spreadArray([], extract(runningQueries)), extract(runningMutations)).filter(isNotNullish);\n    }\n  }\n\n  function getRunningQueryThunk(endpointName, queryArgs) {\n    return function (dispatch) {\n      var _a;\n\n      var endpointDefinition = context.endpointDefinitions[endpointName];\n      var queryCacheKey = serializeQueryArgs({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      });\n      return (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\n    };\n  }\n\n  function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n    return function (dispatch) {\n      var _a;\n\n      return (_a = runningMutations.get(dispatch)) == null ? void 0 : _a[fixedCacheKeyOrRequestId];\n    };\n  }\n\n  function getRunningQueriesThunk() {\n    return function (dispatch) {\n      return Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n    };\n  }\n\n  function getRunningMutationsThunk() {\n    return function (dispatch) {\n      return Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n    };\n  }\n\n  function middlewareWarning(dispatch) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (middlewareWarning.triggered) return;\n      var registered = dispatch(api.internalActions.internal_probeSubscription({\n        queryCacheKey: \"DOES_NOT_EXIST\",\n        requestId: \"DUMMY_REQUEST_ID\"\n      }));\n      middlewareWarning.triggered = true;\n\n      if (typeof registered !== \"boolean\") {\n        throw new Error(\"Warning: Middleware for RTK-Query API at reducerPath \\\"\" + api.reducerPath + \"\\\" has not been added to the store.\\nYou must add the middleware for RTK-Query to function correctly!\");\n      }\n    }\n  }\n\n  function buildInitiateQuery(endpointName, endpointDefinition) {\n    var queryAction = function (arg, _j) {\n      var _k = _j === void 0 ? {} : _j,\n          _l = _k.subscribe,\n          subscribe = _l === void 0 ? true : _l,\n          forceRefetch = _k.forceRefetch,\n          subscriptionOptions = _k.subscriptionOptions,\n          _m = forceQueryFnSymbol,\n          forceQueryFn = _k[_m];\n\n      return function (dispatch, getState) {\n        var _j;\n\n        var _a;\n\n        var queryCacheKey = serializeQueryArgs({\n          queryArgs: arg,\n          endpointDefinition: endpointDefinition,\n          endpointName: endpointName\n        });\n        var thunk = queryThunk((_j = {\n          type: \"query\",\n          subscribe: subscribe,\n          forceRefetch: forceRefetch,\n          subscriptionOptions: subscriptionOptions,\n          endpointName: endpointName,\n          originalArgs: arg,\n          queryCacheKey: queryCacheKey\n        }, _j[forceQueryFnSymbol] = forceQueryFn, _j));\n        var selector = api.endpoints[endpointName].select(arg);\n        var thunkResult = dispatch(thunk);\n        var stateAfter = selector(getState());\n        middlewareWarning(dispatch);\n        var requestId = thunkResult.requestId,\n            abort = thunkResult.abort;\n        var skippedSynchronously = stateAfter.requestId !== requestId;\n        var runningQuery = (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\n\n        var selectFromState = function () {\n          return selector(getState());\n        };\n\n        var statePromise = Object.assign(forceQueryFn ? thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ? Promise.resolve(stateAfter) : Promise.all([runningQuery, thunkResult]).then(selectFromState), {\n          arg: arg,\n          requestId: requestId,\n          subscriptionOptions: subscriptionOptions,\n          queryCacheKey: queryCacheKey,\n          abort: abort,\n          unwrap: function () {\n            return __async(this, null, function () {\n              var result;\n              return __generator(this, function (_j) {\n                switch (_j.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , statePromise];\n\n                  case 1:\n                    result = _j.sent();\n\n                    if (result.isError) {\n                      throw result.error;\n                    }\n\n                    return [2\n                    /*return*/\n                    , result.data];\n                }\n              });\n            });\n          },\n          refetch: function () {\n            return dispatch(queryAction(arg, {\n              subscribe: false,\n              forceRefetch: true\n            }));\n          },\n          unsubscribe: function () {\n            if (subscribe) dispatch(unsubscribeQueryResult({\n              queryCacheKey: queryCacheKey,\n              requestId: requestId\n            }));\n          },\n          updateSubscriptionOptions: function (options) {\n            statePromise.subscriptionOptions = options;\n            dispatch(updateSubscriptionOptions({\n              endpointName: endpointName,\n              requestId: requestId,\n              queryCacheKey: queryCacheKey,\n              options: options\n            }));\n          }\n        });\n\n        if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n          var running_1 = runningQueries.get(dispatch) || {};\n          running_1[queryCacheKey] = statePromise;\n          runningQueries.set(dispatch, running_1);\n          statePromise.then(function () {\n            delete running_1[queryCacheKey];\n\n            if (!Object.keys(running_1).length) {\n              runningQueries.delete(dispatch);\n            }\n          });\n        }\n\n        return statePromise;\n      };\n    };\n\n    return queryAction;\n  }\n\n  function buildInitiateMutation(endpointName) {\n    return function (arg, _j) {\n      var _k = _j === void 0 ? {} : _j,\n          _l = _k.track,\n          track = _l === void 0 ? true : _l,\n          fixedCacheKey = _k.fixedCacheKey;\n\n      return function (dispatch, getState) {\n        var thunk = mutationThunk({\n          type: \"mutation\",\n          endpointName: endpointName,\n          originalArgs: arg,\n          track: track,\n          fixedCacheKey: fixedCacheKey\n        });\n        var thunkResult = dispatch(thunk);\n        middlewareWarning(dispatch);\n        var requestId = thunkResult.requestId,\n            abort = thunkResult.abort,\n            unwrap = thunkResult.unwrap;\n        var returnValuePromise = thunkResult.unwrap().then(function (data) {\n          return {\n            data: data\n          };\n        }).catch(function (error) {\n          return {\n            error: error\n          };\n        });\n\n        var reset = function () {\n          dispatch(removeMutationResult({\n            requestId: requestId,\n            fixedCacheKey: fixedCacheKey\n          }));\n        };\n\n        var ret = Object.assign(returnValuePromise, {\n          arg: thunkResult.arg,\n          requestId: requestId,\n          abort: abort,\n          unwrap: unwrap,\n          unsubscribe: reset,\n          reset: reset\n        });\n        var running = runningMutations.get(dispatch) || {};\n        runningMutations.set(dispatch, running);\n        running[requestId] = ret;\n        ret.then(function () {\n          delete running[requestId];\n\n          if (!Object.keys(running).length) {\n            runningMutations.delete(dispatch);\n          }\n        });\n\n        if (fixedCacheKey) {\n          running[fixedCacheKey] = ret;\n          ret.then(function () {\n            if (running[fixedCacheKey] === ret) {\n              delete running[fixedCacheKey];\n\n              if (!Object.keys(running).length) {\n                runningMutations.delete(dispatch);\n              }\n            }\n          });\n        }\n\n        return ret;\n      };\n    };\n  }\n} // src/query/core/buildThunks.ts\n\n\nimport { isAllOf, isFulfilled, isPending, isRejected, isRejectedWithValue } from \"@reduxjs/toolkit\";\nimport { isDraftable, produceWithPatches } from \"immer\";\nimport { createAsyncThunk, SHOULD_AUTOBATCH } from \"@reduxjs/toolkit\";\n\nfunction defaultTransformResponse(baseQueryReturnValue) {\n  return baseQueryReturnValue;\n}\n\nfunction buildThunks(_j) {\n  var _this = this;\n\n  var reducerPath = _j.reducerPath,\n      baseQuery = _j.baseQuery,\n      endpointDefinitions = _j.context.endpointDefinitions,\n      serializeQueryArgs = _j.serializeQueryArgs,\n      api = _j.api;\n\n  var patchQueryData = function (endpointName, args, patches) {\n    return function (dispatch) {\n      var endpointDefinition = endpointDefinitions[endpointName];\n      dispatch(api.internalActions.queryResultPatched({\n        queryCacheKey: serializeQueryArgs({\n          queryArgs: args,\n          endpointDefinition: endpointDefinition,\n          endpointName: endpointName\n        }),\n        patches: patches\n      }));\n    };\n  };\n\n  var updateQueryData = function (endpointName, args, updateRecipe) {\n    return function (dispatch, getState) {\n      var _j, _k;\n\n      var currentState = api.endpoints[endpointName].select(args)(getState());\n      var ret = {\n        patches: [],\n        inversePatches: [],\n        undo: function () {\n          return dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches));\n        }\n      };\n\n      if (currentState.status === QueryStatus.uninitialized) {\n        return ret;\n      }\n\n      if (\"data\" in currentState) {\n        if (isDraftable(currentState.data)) {\n          var _l = produceWithPatches(currentState.data, updateRecipe),\n              patches = _l[1],\n              inversePatches = _l[2];\n\n          (_j = ret.patches).push.apply(_j, patches);\n\n          (_k = ret.inversePatches).push.apply(_k, inversePatches);\n        } else {\n          var value = updateRecipe(currentState.data);\n          ret.patches.push({\n            op: \"replace\",\n            path: [],\n            value: value\n          });\n          ret.inversePatches.push({\n            op: \"replace\",\n            path: [],\n            value: currentState.data\n          });\n        }\n      }\n\n      dispatch(api.util.patchQueryData(endpointName, args, ret.patches));\n      return ret;\n    };\n  };\n\n  var upsertQueryData = function (endpointName, args, value) {\n    return function (dispatch) {\n      var _j;\n\n      return dispatch(api.endpoints[endpointName].initiate(args, (_j = {\n        subscribe: false,\n        forceRefetch: true\n      }, _j[forceQueryFnSymbol] = function () {\n        return {\n          data: value\n        };\n      }, _j)));\n    };\n  };\n\n  var executeEndpoint = function (_0, _1) {\n    return __async(_this, [_0, _1], function (arg, _j) {\n      var endpointDefinition, transformResponse, result, baseQueryApi_1, forceQueryFn, what, err, _k, _l, key, _m, error_1, catchedError, transformErrorResponse, _o, e_4;\n\n      var _p, _q;\n\n      var signal = _j.signal,\n          abort = _j.abort,\n          rejectWithValue = _j.rejectWithValue,\n          fulfillWithValue = _j.fulfillWithValue,\n          dispatch = _j.dispatch,\n          getState = _j.getState,\n          extra = _j.extra;\n      return __generator(this, function (_r) {\n        switch (_r.label) {\n          case 0:\n            endpointDefinition = endpointDefinitions[arg.endpointName];\n            _r.label = 1;\n\n          case 1:\n            _r.trys.push([1, 8,, 13]);\n\n            transformResponse = defaultTransformResponse;\n            result = void 0;\n            baseQueryApi_1 = {\n              signal: signal,\n              abort: abort,\n              dispatch: dispatch,\n              getState: getState,\n              extra: extra,\n              endpoint: arg.endpointName,\n              type: arg.type,\n              forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\n            };\n            forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n            if (!forceQueryFn) return [3\n            /*break*/\n            , 2];\n            result = forceQueryFn();\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            if (!endpointDefinition.query) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi_1, endpointDefinition.extraOptions)];\n\n          case 3:\n            result = _r.sent();\n\n            if (endpointDefinition.transformResponse) {\n              transformResponse = endpointDefinition.transformResponse;\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , endpointDefinition.queryFn(arg.originalArgs, baseQueryApi_1, endpointDefinition.extraOptions, function (arg2) {\n              return baseQuery(arg2, baseQueryApi_1, endpointDefinition.extraOptions);\n            })];\n\n          case 5:\n            result = _r.sent();\n            _r.label = 6;\n\n          case 6:\n            if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n              what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n              err = void 0;\n\n              if (!result) {\n                err = what + \" did not return anything.\";\n              } else if (typeof result !== \"object\") {\n                err = what + \" did not return an object.\";\n              } else if (result.error && result.data) {\n                err = what + \" returned an object containing both `error` and `result`.\";\n              } else if (result.error === void 0 && result.data === void 0) {\n                err = what + \" returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`\";\n              } else {\n                for (_k = 0, _l = Object.keys(result); _k < _l.length; _k++) {\n                  key = _l[_k];\n\n                  if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n                    err = \"The object returned by \" + what + \" has the unknown property \" + key + \".\";\n                    break;\n                  }\n                }\n              }\n\n              if (err) {\n                console.error(\"Error encountered handling the endpoint \" + arg.endpointName + \".\\n              \" + err + \"\\n              It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\\n              Object returned was:\", result);\n              }\n            }\n\n            if (result.error) throw new HandledError(result.error, result.meta);\n            _m = fulfillWithValue;\n            return [4\n            /*yield*/\n            , transformResponse(result.data, result.meta, arg.originalArgs)];\n\n          case 7:\n            return [2\n            /*return*/\n            , _m.apply(void 0, [_r.sent(), (_p = {\n              fulfilledTimeStamp: Date.now(),\n              baseQueryMeta: result.meta\n            }, _p[SHOULD_AUTOBATCH] = true, _p)])];\n\n          case 8:\n            error_1 = _r.sent();\n            catchedError = error_1;\n            if (!(catchedError instanceof HandledError)) return [3\n            /*break*/\n            , 12];\n            transformErrorResponse = defaultTransformResponse;\n\n            if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\n              transformErrorResponse = endpointDefinition.transformErrorResponse;\n            }\n\n            _r.label = 9;\n\n          case 9:\n            _r.trys.push([9, 11,, 12]);\n\n            _o = rejectWithValue;\n            return [4\n            /*yield*/\n            , transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs)];\n\n          case 10:\n            return [2\n            /*return*/\n            , _o.apply(void 0, [_r.sent(), (_q = {\n              baseQueryMeta: catchedError.meta\n            }, _q[SHOULD_AUTOBATCH] = true, _q)])];\n\n          case 11:\n            e_4 = _r.sent();\n            catchedError = e_4;\n            return [3\n            /*break*/\n            , 12];\n\n          case 12:\n            if (typeof process !== \"undefined\" && process.env.NODE_ENV !== \"production\") {\n              console.error(\"An unhandled error occurred processing a request for the endpoint \\\"\" + arg.endpointName + \"\\\".\\nIn the case of an unhandled error, no tags will be \\\"provided\\\" or \\\"invalidated\\\".\", catchedError);\n            } else {\n              console.error(catchedError);\n            }\n\n            throw catchedError;\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  function isForcedQuery(arg, state) {\n    var _a, _b, _c, _d;\n\n    var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[arg.queryCacheKey];\n    var baseFetchOnMountOrArgChange = (_c = state[reducerPath]) == null ? void 0 : _c.config.refetchOnMountOrArgChange;\n    var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\n    var refetchVal = (_d = arg.forceRefetch) != null ? _d : arg.subscribe && baseFetchOnMountOrArgChange;\n\n    if (refetchVal) {\n      return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n    }\n\n    return false;\n  }\n\n  var queryThunk = createAsyncThunk(reducerPath + \"/executeQuery\", executeEndpoint, {\n    getPendingMeta: function () {\n      var _j;\n\n      return _j = {\n        startedTimeStamp: Date.now()\n      }, _j[SHOULD_AUTOBATCH] = true, _j;\n    },\n    condition: function (queryThunkArgs, _j) {\n      var getState = _j.getState;\n\n      var _a, _b, _c;\n\n      var state = getState();\n      var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[queryThunkArgs.queryCacheKey];\n      var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\n      var currentArg = queryThunkArgs.originalArgs;\n      var previousArg = requestState == null ? void 0 : requestState.originalArgs;\n      var endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\n\n      if (isUpsertQuery(queryThunkArgs)) {\n        return true;\n      }\n\n      if ((requestState == null ? void 0 : requestState.status) === \"pending\") {\n        return false;\n      }\n\n      if (isForcedQuery(queryThunkArgs, state)) {\n        return true;\n      }\n\n      if (isQueryDefinition(endpointDefinition) && ((_c = endpointDefinition == null ? void 0 : endpointDefinition.forceRefetch) == null ? void 0 : _c.call(endpointDefinition, {\n        currentArg: currentArg,\n        previousArg: previousArg,\n        endpointState: requestState,\n        state: state\n      }))) {\n        return true;\n      }\n\n      if (fulfilledVal) {\n        return false;\n      }\n\n      return true;\n    },\n    dispatchConditionRejection: true\n  });\n  var mutationThunk = createAsyncThunk(reducerPath + \"/executeMutation\", executeEndpoint, {\n    getPendingMeta: function () {\n      var _j;\n\n      return _j = {\n        startedTimeStamp: Date.now()\n      }, _j[SHOULD_AUTOBATCH] = true, _j;\n    }\n  });\n\n  var hasTheForce = function (options) {\n    return \"force\" in options;\n  };\n\n  var hasMaxAge = function (options) {\n    return \"ifOlderThan\" in options;\n  };\n\n  var prefetch = function (endpointName, arg, options) {\n    return function (dispatch, getState) {\n      var force = hasTheForce(options) && options.force;\n      var maxAge = hasMaxAge(options) && options.ifOlderThan;\n\n      var queryAction = function (force2) {\n        if (force2 === void 0) {\n          force2 = true;\n        }\n\n        return api.endpoints[endpointName].initiate(arg, {\n          forceRefetch: force2\n        });\n      };\n\n      var latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n\n      if (force) {\n        dispatch(queryAction());\n      } else if (maxAge) {\n        var lastFulfilledTs = latestStateValue == null ? void 0 : latestStateValue.fulfilledTimeStamp;\n\n        if (!lastFulfilledTs) {\n          dispatch(queryAction());\n          return;\n        }\n\n        var shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n\n        if (shouldRetrigger) {\n          dispatch(queryAction());\n        }\n      } else {\n        dispatch(queryAction(false));\n      }\n    };\n  };\n\n  function matchesEndpoint(endpointName) {\n    return function (action) {\n      var _a, _b;\n\n      return ((_b = (_a = action == null ? void 0 : action.meta) == null ? void 0 : _a.arg) == null ? void 0 : _b.endpointName) === endpointName;\n    };\n  }\n\n  function buildMatchThunkActions(thunk, endpointName) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(isFulfilled(thunk), matchesEndpoint(endpointName)),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName))\n    };\n  }\n\n  return {\n    queryThunk: queryThunk,\n    mutationThunk: mutationThunk,\n    prefetch: prefetch,\n    updateQueryData: updateQueryData,\n    upsertQueryData: upsertQueryData,\n    patchQueryData: patchQueryData,\n    buildMatchThunkActions: buildMatchThunkActions\n  };\n}\n\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], isFulfilled(action) ? action.payload : void 0, isRejectedWithValue(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n} // src/query/core/buildSlice.ts\n\n\nimport { applyPatches } from \"immer\";\n\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n  var substate = state[queryCacheKey];\n\n  if (substate) {\n    update(substate);\n  }\n}\n\nfunction getMutationCacheKey(id) {\n  var _a;\n\n  return (_a = \"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) != null ? _a : id.requestId;\n}\n\nfunction updateMutationSubstateIfExists(state, id, update) {\n  var substate = state[getMutationCacheKey(id)];\n\n  if (substate) {\n    update(substate);\n  }\n}\n\nvar initialState = {};\n\nfunction buildSlice(_j) {\n  var reducerPath = _j.reducerPath,\n      queryThunk = _j.queryThunk,\n      mutationThunk = _j.mutationThunk,\n      _k = _j.context,\n      definitions = _k.endpointDefinitions,\n      apiUid = _k.apiUid,\n      extractRehydrationInfo = _k.extractRehydrationInfo,\n      hasRehydrationInfo = _k.hasRehydrationInfo,\n      assertTagType = _j.assertTagType,\n      config = _j.config;\n  var resetApiState = createAction2(reducerPath + \"/resetApiState\");\n  var querySlice = createSlice({\n    name: reducerPath + \"/queries\",\n    initialState: initialState,\n    reducers: {\n      removeQueryResult: {\n        reducer: function (draft, _j) {\n          var queryCacheKey = _j.payload.queryCacheKey;\n          delete draft[queryCacheKey];\n        },\n        prepare: prepareAutoBatched()\n      },\n      queryResultPatched: function (draft, _j) {\n        var _k = _j.payload,\n            queryCacheKey = _k.queryCacheKey,\n            patches = _k.patches;\n        updateQuerySubstateIfExists(draft, queryCacheKey, function (substate) {\n          substate.data = applyPatches(substate.data, patches.concat());\n        });\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(queryThunk.pending, function (draft, _j) {\n        var meta = _j.meta,\n            arg = _j.meta.arg;\n\n        var _a, _b;\n\n        var upserting = isUpsertQuery(arg);\n\n        if (arg.subscribe || upserting) {\n          (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {\n            status: QueryStatus.uninitialized,\n            endpointName: arg.endpointName\n          };\n        }\n\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\n          substate.status = QueryStatus.pending;\n          substate.requestId = upserting && substate.requestId ? substate.requestId : meta.requestId;\n\n          if (arg.originalArgs !== void 0) {\n            substate.originalArgs = arg.originalArgs;\n          }\n\n          substate.startedTimeStamp = meta.startedTimeStamp;\n        });\n      }).addCase(queryThunk.fulfilled, function (draft, _j) {\n        var meta = _j.meta,\n            payload = _j.payload;\n        updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, function (substate) {\n          var _a;\n\n          if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg)) return;\n          var merge = definitions[meta.arg.endpointName].merge;\n          substate.status = QueryStatus.fulfilled;\n\n          if (merge) {\n            if (substate.data !== void 0) {\n              var newData = createNextState(substate.data, function (draftSubstateData) {\n                return merge(draftSubstateData, payload);\n              });\n              substate.data = newData;\n            } else {\n              substate.data = payload;\n            }\n          } else {\n            substate.data = ((_a = definitions[meta.arg.endpointName].structuralSharing) != null ? _a : true) ? copyWithStructuralSharing(substate.data, payload) : payload;\n          }\n\n          delete substate.error;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(queryThunk.rejected, function (draft, _j) {\n        var _k = _j.meta,\n            condition = _k.condition,\n            arg = _k.arg,\n            requestId = _k.requestId,\n            error = _j.error,\n            payload = _j.payload;\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\n          if (condition) {} else {\n            if (substate.requestId !== requestId) return;\n            substate.status = QueryStatus.rejected;\n            substate.error = payload != null ? payload : error;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var queries = extractRehydrationInfo(action).queries;\n\n        for (var _j = 0, _k = Object.entries(queries); _j < _k.length; _j++) {\n          var _l = _k[_j],\n              key = _l[0],\n              entry = _l[1];\n\n          if ((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  var mutationSlice = createSlice({\n    name: reducerPath + \"/mutations\",\n    initialState: initialState,\n    reducers: {\n      removeMutationResult: {\n        reducer: function (draft, _j) {\n          var payload = _j.payload;\n          var cacheKey = getMutationCacheKey(payload);\n\n          if (cacheKey in draft) {\n            delete draft[cacheKey];\n          }\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(mutationThunk.pending, function (draft, _j) {\n        var meta = _j.meta,\n            _k = _j.meta,\n            requestId = _k.requestId,\n            arg = _k.arg,\n            startedTimeStamp = _k.startedTimeStamp;\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId: requestId,\n          status: QueryStatus.pending,\n          endpointName: arg.endpointName,\n          startedTimeStamp: startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, function (draft, _j) {\n        var payload = _j.payload,\n            meta = _j.meta;\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, function (substate) {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.fulfilled;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, function (draft, _j) {\n        var payload = _j.payload,\n            error = _j.error,\n            meta = _j.meta;\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, function (substate) {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.rejected;\n          substate.error = payload != null ? payload : error;\n        });\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var mutations = extractRehydrationInfo(action).mutations;\n\n        for (var _j = 0, _k = Object.entries(mutations); _j < _k.length; _j++) {\n          var _l = _k[_j],\n              key = _l[0],\n              entry = _l[1];\n\n          if (((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) && key !== (entry == null ? void 0 : entry.requestId)) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  var invalidationSlice = createSlice({\n    name: reducerPath + \"/invalidation\",\n    initialState: initialState,\n    reducers: {},\n    extraReducers: function (builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, function (draft, _j) {\n        var queryCacheKey = _j.payload.queryCacheKey;\n\n        for (var _k = 0, _l = Object.values(draft); _k < _l.length; _k++) {\n          var tagTypeSubscriptions = _l[_k];\n\n          for (var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++) {\n            var idSubscriptions = _o[_m];\n            var foundAt = idSubscriptions.indexOf(queryCacheKey);\n\n            if (foundAt !== -1) {\n              idSubscriptions.splice(foundAt, 1);\n            }\n          }\n        }\n      }).addMatcher(hasRehydrationInfo, function (draft, action) {\n        var _a, _b, _c, _d;\n\n        var provided = extractRehydrationInfo(action).provided;\n\n        for (var _j = 0, _k = Object.entries(provided); _j < _k.length; _j++) {\n          var _l = _k[_j],\n              type = _l[0],\n              incomingTags = _l[1];\n\n          for (var _m = 0, _o = Object.entries(incomingTags); _m < _o.length; _m++) {\n            var _p = _o[_m],\n                id = _p[0],\n                cacheKeys = _p[1];\n            var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\n\n            for (var _q = 0, cacheKeys_1 = cacheKeys; _q < cacheKeys_1.length; _q++) {\n              var queryCacheKey = cacheKeys_1[_q];\n              var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          }\n        }\n      }).addMatcher(isAnyOf(isFulfilled2(queryThunk), isRejectedWithValue2(queryThunk)), function (draft, action) {\n        var _a, _b, _c, _d;\n\n        var providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n        var queryCacheKey = action.meta.arg.queryCacheKey;\n\n        for (var _j = 0, _k = Object.values(draft); _j < _k.length; _j++) {\n          var tagTypeSubscriptions = _k[_j];\n\n          for (var _l = 0, _m = Object.values(tagTypeSubscriptions); _l < _m.length; _l++) {\n            var idSubscriptions = _m[_l];\n            var foundAt = idSubscriptions.indexOf(queryCacheKey);\n\n            if (foundAt !== -1) {\n              idSubscriptions.splice(foundAt, 1);\n            }\n          }\n        }\n\n        for (var _o = 0, providedTags_1 = providedTags; _o < providedTags_1.length; _o++) {\n          var _p = providedTags_1[_o],\n              type = _p.type,\n              id = _p.id;\n          var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\n          var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n\n          if (!alreadySubscribed) {\n            subscribedQueries.push(queryCacheKey);\n          }\n        }\n      });\n    }\n  });\n  var subscriptionSlice = createSlice({\n    name: reducerPath + \"/subscriptions\",\n    initialState: initialState,\n    reducers: {\n      updateSubscriptionOptions: function (d, a) {},\n      unsubscribeQueryResult: function (d, a) {},\n      internal_probeSubscription: function (d, a) {}\n    }\n  });\n  var internalSubscriptionsSlice = createSlice({\n    name: reducerPath + \"/internalSubscriptions\",\n    initialState: initialState,\n    reducers: {\n      subscriptionsUpdated: function (state, action) {\n        return applyPatches(state, action.payload);\n      }\n    }\n  });\n  var configSlice = createSlice({\n    name: reducerPath + \"/config\",\n    initialState: __spreadValues({\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false\n    }, config),\n    reducers: {\n      middlewareRegistered: function (state, _j) {\n        var payload = _j.payload;\n        state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n      }\n    },\n    extraReducers: function (builder) {\n      builder.addCase(onOnline, function (state) {\n        state.online = true;\n      }).addCase(onOffline, function (state) {\n        state.online = false;\n      }).addCase(onFocus, function (state) {\n        state.focused = true;\n      }).addCase(onFocusLost, function (state) {\n        state.focused = false;\n      }).addMatcher(hasRehydrationInfo, function (draft) {\n        return __spreadValues({}, draft);\n      });\n    }\n  });\n  var combinedReducer = combineReducers({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: internalSubscriptionsSlice.reducer,\n    config: configSlice.reducer\n  });\n\n  var reducer = function (state, action) {\n    return combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n  };\n\n  var actions = __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, configSlice.actions), querySlice.actions), subscriptionSlice.actions), internalSubscriptionsSlice.actions), mutationSlice.actions), {\n    unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\n    resetApiState: resetApiState\n  });\n\n  return {\n    reducer: reducer,\n    actions: actions\n  };\n} // src/query/core/buildSelectors.ts\n\n\nvar skipToken = /* @__PURE__ */Symbol.for(\"RTKQ/skipToken\");\nvar skipSelector = skipToken;\nvar initialSubState = {\n  status: QueryStatus.uninitialized\n};\nvar defaultQuerySubState = /* @__PURE__ */createNextState2(initialSubState, function () {});\nvar defaultMutationSubState = /* @__PURE__ */createNextState2(initialSubState, function () {});\n\nfunction buildSelectors(_j) {\n  var serializeQueryArgs = _j.serializeQueryArgs,\n      reducerPath = _j.reducerPath;\n\n  var selectSkippedQuery = function (state) {\n    return defaultQuerySubState;\n  };\n\n  var selectSkippedMutation = function (state) {\n    return defaultMutationSubState;\n  };\n\n  return {\n    buildQuerySelector: buildQuerySelector,\n    buildMutationSelector: buildMutationSelector,\n    selectInvalidatedBy: selectInvalidatedBy\n  };\n\n  function withRequestFlags(substate) {\n    return __spreadValues(__spreadValues({}, substate), getRequestStatusFlags(substate.status));\n  }\n\n  function selectInternalState(rootState) {\n    var state = rootState[reducerPath];\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state) {\n        if (selectInternalState.triggered) return state;\n        selectInternalState.triggered = true;\n        console.error(\"Error: No data found at `state.\" + reducerPath + \"`. Did you forget to add the reducer to the store?\");\n      }\n    }\n\n    return state;\n  }\n\n  function buildQuerySelector(endpointName, endpointDefinition) {\n    return function (queryArgs) {\n      var serializedArgs = serializeQueryArgs({\n        queryArgs: queryArgs,\n        endpointDefinition: endpointDefinition,\n        endpointName: endpointName\n      });\n\n      var selectQuerySubstate = function (state) {\n        var _a, _b, _c;\n\n        return (_c = (_b = (_a = selectInternalState(state)) == null ? void 0 : _a.queries) == null ? void 0 : _b[serializedArgs]) != null ? _c : defaultQuerySubState;\n      };\n\n      var finalSelectQuerySubState = queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate;\n      return createSelector(finalSelectQuerySubState, withRequestFlags);\n    };\n  }\n\n  function buildMutationSelector() {\n    return function (id) {\n      var _a;\n\n      var mutationId;\n\n      if (typeof id === \"object\") {\n        mutationId = (_a = getMutationCacheKey(id)) != null ? _a : skipToken;\n      } else {\n        mutationId = id;\n      }\n\n      var selectMutationSubstate = function (state) {\n        var _a2, _b, _c;\n\n        return (_c = (_b = (_a2 = selectInternalState(state)) == null ? void 0 : _a2.mutations) == null ? void 0 : _b[mutationId]) != null ? _c : defaultMutationSubState;\n      };\n\n      var finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n      return createSelector(finalSelectMutationSubstate, withRequestFlags);\n    };\n  }\n\n  function selectInvalidatedBy(state, tags) {\n    var _a;\n\n    var apiState = state[reducerPath];\n    var toInvalidate = new Set();\n\n    for (var _j = 0, _k = tags.map(expandTagDescription); _j < _k.length; _j++) {\n      var tag = _k[_j];\n      var provided = apiState.provided[tag.type];\n\n      if (!provided) {\n        continue;\n      }\n\n      var invalidateSubscriptions = (_a = tag.id !== void 0 ? provided[tag.id] : flatten(Object.values(provided))) != null ? _a : [];\n\n      for (var _l = 0, invalidateSubscriptions_1 = invalidateSubscriptions; _l < invalidateSubscriptions_1.length; _l++) {\n        var invalidate = invalidateSubscriptions_1[_l];\n        toInvalidate.add(invalidate);\n      }\n    }\n\n    return flatten(Array.from(toInvalidate.values()).map(function (queryCacheKey) {\n      var querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey: queryCacheKey,\n        endpointName: querySubState.endpointName,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n} // src/query/defaultSerializeQueryArgs.ts\n\n\nimport { isPlainObject as isPlainObject3 } from \"@reduxjs/toolkit\";\n\nvar defaultSerializeQueryArgs = function (_j) {\n  var endpointName = _j.endpointName,\n      queryArgs = _j.queryArgs;\n  return endpointName + \"(\" + JSON.stringify(queryArgs, function (key, value) {\n    return isPlainObject3(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\n      acc[key2] = value[key2];\n      return acc;\n    }, {}) : value;\n  }) + \")\";\n}; // src/query/createApi.ts\n\n\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { defaultMemoize } from \"reselect\";\n\nfunction buildCreateApi() {\n  var modules = [];\n\n  for (var _j = 0; _j < arguments.length; _j++) {\n    modules[_j] = arguments[_j];\n  }\n\n  return function baseCreateApi(options) {\n    var extractRehydrationInfo = defaultMemoize(function (action) {\n      var _a, _b;\n\n      return (_b = options.extractRehydrationInfo) == null ? void 0 : _b.call(options, action, {\n        reducerPath: (_a = options.reducerPath) != null ? _a : \"api\"\n      });\n    });\n\n    var optionsWithDefaults = __spreadProps(__spreadValues({\n      reducerPath: \"api\",\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false\n    }, options), {\n      extractRehydrationInfo: extractRehydrationInfo,\n      serializeQueryArgs: function (queryArgsApi) {\n        var finalSerializeQueryArgs = defaultSerializeQueryArgs;\n\n        if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n          var endpointSQA_1 = queryArgsApi.endpointDefinition.serializeQueryArgs;\n\n          finalSerializeQueryArgs = function (queryArgsApi2) {\n            var initialResult = endpointSQA_1(queryArgsApi2);\n\n            if (typeof initialResult === \"string\") {\n              return initialResult;\n            } else {\n              return defaultSerializeQueryArgs(__spreadProps(__spreadValues({}, queryArgsApi2), {\n                queryArgs: initialResult\n              }));\n            }\n          };\n        } else if (options.serializeQueryArgs) {\n          finalSerializeQueryArgs = options.serializeQueryArgs;\n        }\n\n        return finalSerializeQueryArgs(queryArgsApi);\n      },\n      tagTypes: __spreadArray([], options.tagTypes || [])\n    });\n\n    var context = {\n      endpointDefinitions: {},\n      batch: function (fn) {\n        fn();\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo: extractRehydrationInfo,\n      hasRehydrationInfo: defaultMemoize(function (action) {\n        return extractRehydrationInfo(action) != null;\n      })\n    };\n    var api = {\n      injectEndpoints: injectEndpoints,\n      enhanceEndpoints: function (_j) {\n        var addTagTypes = _j.addTagTypes,\n            endpoints = _j.endpoints;\n\n        if (addTagTypes) {\n          for (var _k = 0, addTagTypes_1 = addTagTypes; _k < addTagTypes_1.length; _k++) {\n            var eT = addTagTypes_1[_k];\n\n            if (!optionsWithDefaults.tagTypes.includes(eT)) {\n              ;\n              optionsWithDefaults.tagTypes.push(eT);\n            }\n          }\n        }\n\n        if (endpoints) {\n          for (var _l = 0, _m = Object.entries(endpoints); _l < _m.length; _l++) {\n            var _o = _m[_l],\n                endpointName = _o[0],\n                partialDefinition = _o[1];\n\n            if (typeof partialDefinition === \"function\") {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            } else {\n              Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n            }\n          }\n        }\n\n        return api;\n      }\n    };\n    var initializedModules = modules.map(function (m) {\n      return m.init(api, optionsWithDefaults, context);\n    });\n\n    function injectEndpoints(inject) {\n      var evaluatedEndpoints = inject.endpoints({\n        query: function (x) {\n          return __spreadProps(__spreadValues({}, x), {\n            type: DefinitionType.query\n          });\n        },\n        mutation: function (x) {\n          return __spreadProps(__spreadValues({}, x), {\n            type: DefinitionType.mutation\n          });\n        }\n      });\n\n      for (var _j = 0, _k = Object.entries(evaluatedEndpoints); _j < _k.length; _j++) {\n        var _l = _k[_j],\n            endpointName = _l[0],\n            definition = _l[1];\n\n        if (!inject.overrideExisting && endpointName in context.endpointDefinitions) {\n          if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n            console.error(\"called `injectEndpoints` to override already-existing endpointName \" + endpointName + \" without specifying `overrideExisting: true`\");\n          }\n\n          continue;\n        }\n\n        context.endpointDefinitions[endpointName] = definition;\n\n        for (var _m = 0, initializedModules_1 = initializedModules; _m < initializedModules_1.length; _m++) {\n          var m = initializedModules_1[_m];\n          m.injectEndpoint(endpointName, definition);\n        }\n      }\n\n      return api;\n    }\n\n    return api.injectEndpoints({\n      endpoints: options.endpoints\n    });\n  };\n} // src/query/fakeBaseQuery.ts\n\n\nfunction fakeBaseQuery() {\n  return function () {\n    throw new Error(\"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n  };\n} // src/query/core/buildMiddleware/index.ts\n\n\nimport { createAction as createAction3 } from \"@reduxjs/toolkit\"; // src/query/core/buildMiddleware/cacheCollection.ts\n\nfunction isObjectEmpty(obj) {\n  for (var k in obj) {\n    return false;\n  }\n\n  return true;\n}\n\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\n\nvar buildCacheCollectionHandler = function (_j) {\n  var reducerPath = _j.reducerPath,\n      api = _j.api,\n      context = _j.context,\n      internalState = _j.internalState;\n  var _k = api.internalActions,\n      removeQueryResult = _k.removeQueryResult,\n      unsubscribeQueryResult = _k.unsubscribeQueryResult;\n\n  function anySubscriptionsRemainingForKey(queryCacheKey) {\n    var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    return !!subscriptions && !isObjectEmpty(subscriptions);\n  }\n\n  var currentRemovalTimeouts = {};\n\n  var handler = function (action, mwApi, internalState2) {\n    var _a;\n\n    if (unsubscribeQueryResult.match(action)) {\n      var state = mwApi.getState()[reducerPath];\n      var queryCacheKey = action.payload.queryCacheKey;\n      handleUnsubscribe(queryCacheKey, (_a = state.queries[queryCacheKey]) == null ? void 0 : _a.endpointName, mwApi, state.config);\n    }\n\n    if (api.util.resetApiState.match(action)) {\n      for (var _j = 0, _k = Object.entries(currentRemovalTimeouts); _j < _k.length; _j++) {\n        var _l = _k[_j],\n            key = _l[0],\n            timeout = _l[1];\n        if (timeout) clearTimeout(timeout);\n        delete currentRemovalTimeouts[key];\n      }\n    }\n\n    if (context.hasRehydrationInfo(action)) {\n      var state = mwApi.getState()[reducerPath];\n      var queries = context.extractRehydrationInfo(action).queries;\n\n      for (var _m = 0, _o = Object.entries(queries); _m < _o.length; _m++) {\n        var _p = _o[_m],\n            queryCacheKey = _p[0],\n            queryState = _p[1];\n        handleUnsubscribe(queryCacheKey, queryState == null ? void 0 : queryState.endpointName, mwApi, state.config);\n      }\n    }\n  };\n\n  function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n    var _a;\n\n    var endpointDefinition = context.endpointDefinitions[endpointName];\n    var keepUnusedDataFor = (_a = endpointDefinition == null ? void 0 : endpointDefinition.keepUnusedDataFor) != null ? _a : config.keepUnusedDataFor;\n\n    if (keepUnusedDataFor === Infinity) {\n      return;\n    }\n\n    var finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n      var currentTimeout = currentRemovalTimeouts[queryCacheKey];\n\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(function () {\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n          api2.dispatch(removeQueryResult({\n            queryCacheKey: queryCacheKey\n          }));\n        }\n\n        delete currentRemovalTimeouts[queryCacheKey];\n      }, finalKeepUnusedDataFor * 1e3);\n    }\n  }\n\n  return handler;\n}; // src/query/core/buildMiddleware/invalidationByTags.ts\n\n\nimport { isAnyOf as isAnyOf2, isFulfilled as isFulfilled3, isRejectedWithValue as isRejectedWithValue3 } from \"@reduxjs/toolkit\";\n\nvar buildInvalidationByTagsHandler = function (_j) {\n  var reducerPath = _j.reducerPath,\n      context = _j.context,\n      endpointDefinitions = _j.context.endpointDefinitions,\n      mutationThunk = _j.mutationThunk,\n      api = _j.api,\n      assertTagType = _j.assertTagType,\n      refetchQuery = _j.refetchQuery;\n  var removeQueryResult = api.internalActions.removeQueryResult;\n  var isThunkActionWithTags = isAnyOf2(isFulfilled3(mutationThunk), isRejectedWithValue3(mutationThunk));\n\n  var handler = function (action, mwApi) {\n    if (isThunkActionWithTags(action)) {\n      invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n    }\n\n    if (api.util.invalidateTags.match(action)) {\n      invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n    }\n  };\n\n  function invalidateTags(tags, mwApi) {\n    var rootState = mwApi.getState();\n    var state = rootState[reducerPath];\n    var toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(function () {\n      var _a;\n\n      var valuesArray = Array.from(toInvalidate.values());\n\n      for (var _j = 0, valuesArray_1 = valuesArray; _j < valuesArray_1.length; _j++) {\n        var queryCacheKey = valuesArray_1[_j].queryCacheKey;\n        var querySubState = state.queries[queryCacheKey];\n        var subscriptionSubState = (_a = state.subscriptions[queryCacheKey]) != null ? _a : {};\n\n        if (querySubState) {\n          if (Object.keys(subscriptionSubState).length === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\n          }\n        }\n      }\n    });\n  }\n\n  return handler;\n}; // src/query/core/buildMiddleware/polling.ts\n\n\nvar buildPollingHandler = function (_j) {\n  var reducerPath = _j.reducerPath,\n      queryThunk = _j.queryThunk,\n      api = _j.api,\n      refetchQuery = _j.refetchQuery,\n      internalState = _j.internalState;\n  var currentPolls = {};\n\n  var handler = function (action, mwApi) {\n    if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n      updatePollingInterval(action.payload, mwApi);\n    }\n\n    if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n      updatePollingInterval(action.meta.arg, mwApi);\n    }\n\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n      startNextPoll(action.meta.arg, mwApi);\n    }\n\n    if (api.util.resetApiState.match(action)) {\n      clearPolls();\n    }\n  };\n\n  function startNextPoll(_j, api2) {\n    var queryCacheKey = _j.queryCacheKey;\n    var state = api2.getState()[reducerPath];\n    var querySubState = state.queries[queryCacheKey];\n    var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) return;\n    var lowestPollingInterval = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) return;\n    var currentPoll = currentPolls[queryCacheKey];\n\n    if (currentPoll == null ? void 0 : currentPoll.timeout) {\n      clearTimeout(currentPoll.timeout);\n      currentPoll.timeout = void 0;\n    }\n\n    var nextPollTimestamp = Date.now() + lowestPollingInterval;\n    var currentInterval = currentPolls[queryCacheKey] = {\n      nextPollTimestamp: nextPollTimestamp,\n      pollingInterval: lowestPollingInterval,\n      timeout: setTimeout(function () {\n        currentInterval.timeout = void 0;\n        api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n      }, lowestPollingInterval)\n    };\n  }\n\n  function updatePollingInterval(_j, api2) {\n    var queryCacheKey = _j.queryCacheKey;\n    var state = api2.getState()[reducerPath];\n    var querySubState = state.queries[queryCacheKey];\n    var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\n      return;\n    }\n\n    var lowestPollingInterval = findLowestPollingInterval(subscriptions);\n\n    if (!Number.isFinite(lowestPollingInterval)) {\n      cleanupPollForKey(queryCacheKey);\n      return;\n    }\n\n    var currentPoll = currentPolls[queryCacheKey];\n    var nextPollTimestamp = Date.now() + lowestPollingInterval;\n\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n      startNextPoll({\n        queryCacheKey: queryCacheKey\n      }, api2);\n    }\n  }\n\n  function cleanupPollForKey(key) {\n    var existingPoll = currentPolls[key];\n\n    if (existingPoll == null ? void 0 : existingPoll.timeout) {\n      clearTimeout(existingPoll.timeout);\n    }\n\n    delete currentPolls[key];\n  }\n\n  function clearPolls() {\n    for (var _j = 0, _k = Object.keys(currentPolls); _j < _k.length; _j++) {\n      var key = _k[_j];\n      cleanupPollForKey(key);\n    }\n  }\n\n  function findLowestPollingInterval(subscribers) {\n    if (subscribers === void 0) {\n      subscribers = {};\n    }\n\n    var lowestPollingInterval = Number.POSITIVE_INFINITY;\n\n    for (var key in subscribers) {\n      if (!!subscribers[key].pollingInterval) {\n        lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n      }\n    }\n\n    return lowestPollingInterval;\n  }\n\n  return handler;\n}; // src/query/core/buildMiddleware/windowEventHandling.ts\n\n\nvar buildWindowEventHandler = function (_j) {\n  var reducerPath = _j.reducerPath,\n      context = _j.context,\n      api = _j.api,\n      refetchQuery = _j.refetchQuery,\n      internalState = _j.internalState;\n  var removeQueryResult = api.internalActions.removeQueryResult;\n\n  var handler = function (action, mwApi) {\n    if (onFocus.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnFocus\");\n    }\n\n    if (onOnline.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnReconnect\");\n    }\n  };\n\n  function refetchValidQueries(api2, type) {\n    var state = api2.getState()[reducerPath];\n    var queries = state.queries;\n    var subscriptions = internalState.currentSubscriptions;\n    context.batch(function () {\n      for (var _j = 0, _k = Object.keys(subscriptions); _j < _k.length; _j++) {\n        var queryCacheKey = _k[_j];\n        var querySubState = queries[queryCacheKey];\n        var subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        var shouldRefetch = Object.values(subscriptionSubState).some(function (sub) {\n          return sub[type] === true;\n        }) || Object.values(subscriptionSubState).every(function (sub) {\n          return sub[type] === void 0;\n        }) && state.config[type];\n\n        if (shouldRefetch) {\n          if (Object.keys(subscriptionSubState).length === 0) {\n            api2.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n          }\n        }\n      }\n    });\n  }\n\n  return handler;\n}; // src/query/core/buildMiddleware/cacheLifecycle.ts\n\n\nimport { isAsyncThunkAction, isFulfilled as isFulfilled4 } from \"@reduxjs/toolkit\";\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\n\nvar buildCacheLifecycleHandler = function (_j) {\n  var api = _j.api,\n      reducerPath = _j.reducerPath,\n      context = _j.context,\n      queryThunk = _j.queryThunk,\n      mutationThunk = _j.mutationThunk,\n      internalState = _j.internalState;\n  var isQueryThunk = isAsyncThunkAction(queryThunk);\n  var isMutationThunk = isAsyncThunkAction(mutationThunk);\n  var isFulfilledThunk = isFulfilled4(queryThunk, mutationThunk);\n  var lifecycleMap = {};\n\n  var handler = function (action, mwApi, stateBefore) {\n    var cacheKey = getCacheKey(action);\n\n    if (queryThunk.pending.match(action)) {\n      var oldState = stateBefore[reducerPath].queries[cacheKey];\n      var state = mwApi.getState()[reducerPath].queries[cacheKey];\n\n      if (!oldState && state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (mutationThunk.pending.match(action)) {\n      var state = mwApi.getState()[reducerPath].mutations[cacheKey];\n\n      if (state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (isFulfilledThunk(action)) {\n      var lifecycle = lifecycleMap[cacheKey];\n\n      if (lifecycle == null ? void 0 : lifecycle.valueResolved) {\n        lifecycle.valueResolved({\n          data: action.payload,\n          meta: action.meta.baseQueryMeta\n        });\n        delete lifecycle.valueResolved;\n      }\n    } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n      var lifecycle = lifecycleMap[cacheKey];\n\n      if (lifecycle) {\n        delete lifecycleMap[cacheKey];\n        lifecycle.cacheEntryRemoved();\n      }\n    } else if (api.util.resetApiState.match(action)) {\n      for (var _j = 0, _k = Object.entries(lifecycleMap); _j < _k.length; _j++) {\n        var _l = _k[_j],\n            cacheKey2 = _l[0],\n            lifecycle = _l[1];\n        delete lifecycleMap[cacheKey2];\n        lifecycle.cacheEntryRemoved();\n      }\n    }\n  };\n\n  function getCacheKey(action) {\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n    if (isMutationThunk(action)) return action.meta.requestId;\n    if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n    if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n    return \"\";\n  }\n\n  function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n    var endpointDefinition = context.endpointDefinitions[endpointName];\n    var onCacheEntryAdded = endpointDefinition == null ? void 0 : endpointDefinition.onCacheEntryAdded;\n    if (!onCacheEntryAdded) return;\n    var lifecycle = {};\n    var cacheEntryRemoved = new Promise(function (resolve) {\n      lifecycle.cacheEntryRemoved = resolve;\n    });\n    var cacheDataLoaded = Promise.race([new Promise(function (resolve) {\n      lifecycle.valueResolved = resolve;\n    }), cacheEntryRemoved.then(function () {\n      throw neverResolvedError;\n    })]);\n    cacheDataLoaded.catch(function () {});\n    lifecycleMap[queryCacheKey] = lifecycle;\n    var selector = api.endpoints[endpointName].select(endpointDefinition.type === DefinitionType.query ? originalArgs : queryCacheKey);\n    var extra = mwApi.dispatch(function (_, __, extra2) {\n      return extra2;\n    });\n\n    var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\n      getCacheEntry: function () {\n        return selector(mwApi.getState());\n      },\n      requestId: requestId,\n      extra: extra,\n      updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) {\n        return mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe));\n      } : void 0,\n      cacheDataLoaded: cacheDataLoaded,\n      cacheEntryRemoved: cacheEntryRemoved\n    });\n\n    var runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n    Promise.resolve(runningHandler).catch(function (e) {\n      if (e === neverResolvedError) return;\n      throw e;\n    });\n  }\n\n  return handler;\n}; // src/query/core/buildMiddleware/queryLifecycle.ts\n\n\nimport { isPending as isPending2, isRejected as isRejected2, isFulfilled as isFulfilled5 } from \"@reduxjs/toolkit\";\n\nvar buildQueryLifecycleHandler = function (_j) {\n  var api = _j.api,\n      context = _j.context,\n      queryThunk = _j.queryThunk,\n      mutationThunk = _j.mutationThunk;\n  var isPendingThunk = isPending2(queryThunk, mutationThunk);\n  var isRejectedThunk = isRejected2(queryThunk, mutationThunk);\n  var isFullfilledThunk = isFulfilled5(queryThunk, mutationThunk);\n  var lifecycleMap = {};\n\n  var handler = function (action, mwApi) {\n    var _a, _b, _c;\n\n    if (isPendingThunk(action)) {\n      var _j = action.meta,\n          requestId = _j.requestId,\n          _k = _j.arg,\n          endpointName_1 = _k.endpointName,\n          originalArgs_1 = _k.originalArgs;\n      var endpointDefinition = context.endpointDefinitions[endpointName_1];\n      var onQueryStarted = endpointDefinition == null ? void 0 : endpointDefinition.onQueryStarted;\n\n      if (onQueryStarted) {\n        var lifecycle_1 = {};\n        var queryFulfilled = new Promise(function (resolve, reject) {\n          lifecycle_1.resolve = resolve;\n          lifecycle_1.reject = reject;\n        });\n        queryFulfilled.catch(function () {});\n        lifecycleMap[requestId] = lifecycle_1;\n        var selector_1 = api.endpoints[endpointName_1].select(endpointDefinition.type === DefinitionType.query ? originalArgs_1 : requestId);\n        var extra = mwApi.dispatch(function (_, __, extra2) {\n          return extra2;\n        });\n\n        var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\n          getCacheEntry: function () {\n            return selector_1(mwApi.getState());\n          },\n          requestId: requestId,\n          extra: extra,\n          updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) {\n            return mwApi.dispatch(api.util.updateQueryData(endpointName_1, originalArgs_1, updateRecipe));\n          } : void 0,\n          queryFulfilled: queryFulfilled\n        });\n\n        onQueryStarted(originalArgs_1, lifecycleApi);\n      }\n    } else if (isFullfilledThunk(action)) {\n      var _l = action.meta,\n          requestId = _l.requestId,\n          baseQueryMeta = _l.baseQueryMeta;\n      (_a = lifecycleMap[requestId]) == null ? void 0 : _a.resolve({\n        data: action.payload,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    } else if (isRejectedThunk(action)) {\n      var _m = action.meta,\n          requestId = _m.requestId,\n          rejectedWithValue = _m.rejectedWithValue,\n          baseQueryMeta = _m.baseQueryMeta;\n      (_c = lifecycleMap[requestId]) == null ? void 0 : _c.reject({\n        error: (_b = action.payload) != null ? _b : action.error,\n        isUnhandledError: !rejectedWithValue,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    }\n  };\n\n  return handler;\n}; // src/query/core/buildMiddleware/devMiddleware.ts\n\n\nvar buildDevCheckHandler = function (_j) {\n  var api = _j.api,\n      apiUid = _j.context.apiUid,\n      reducerPath = _j.reducerPath;\n  return function (action, mwApi) {\n    var _a, _b;\n\n    if (api.util.resetApiState.match(action)) {\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n    }\n\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_b = (_a = mwApi.getState()[reducerPath]) == null ? void 0 : _a.config) == null ? void 0 : _b.middlewareRegistered) === \"conflict\") {\n        console.warn(\"There is a mismatch between slice and middleware for the reducerPath \\\"\" + reducerPath + \"\\\".\\nYou can only have one api per reducer path, this will lead to crashes in various situations!\" + (reducerPath === \"api\" ? \"\\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!\" : \"\"));\n      }\n    }\n  };\n}; // src/query/core/buildMiddleware/batchActions.ts\n\n\nimport { produceWithPatches as produceWithPatches2 } from \"immer\";\nvar promise;\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : function (cb) {\n  return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) {\n    return setTimeout(function () {\n      throw err;\n    }, 0);\n  });\n};\n\nvar buildBatchedActionsHandler = function (_j) {\n  var api = _j.api,\n      queryThunk = _j.queryThunk,\n      internalState = _j.internalState;\n  var subscriptionsPrefix = api.reducerPath + \"/subscriptions\";\n  var previousSubscriptions = null;\n  var dispatchQueued = false;\n  var _k = api.internalActions,\n      updateSubscriptionOptions = _k.updateSubscriptionOptions,\n      unsubscribeQueryResult = _k.unsubscribeQueryResult;\n\n  var actuallyMutateSubscriptions = function (mutableState, action) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n\n    if (updateSubscriptionOptions.match(action)) {\n      var _j = action.payload,\n          queryCacheKey = _j.queryCacheKey,\n          requestId = _j.requestId,\n          options = _j.options;\n\n      if ((_a = mutableState == null ? void 0 : mutableState[queryCacheKey]) == null ? void 0 : _a[requestId]) {\n        mutableState[queryCacheKey][requestId] = options;\n      }\n\n      return true;\n    }\n\n    if (unsubscribeQueryResult.match(action)) {\n      var _k = action.payload,\n          queryCacheKey = _k.queryCacheKey,\n          requestId = _k.requestId;\n\n      if (mutableState[queryCacheKey]) {\n        delete mutableState[queryCacheKey][requestId];\n      }\n\n      return true;\n    }\n\n    if (api.internalActions.removeQueryResult.match(action)) {\n      delete mutableState[action.payload.queryCacheKey];\n      return true;\n    }\n\n    if (queryThunk.pending.match(action)) {\n      var _l = action.meta,\n          arg = _l.arg,\n          requestId = _l.requestId;\n\n      if (arg.subscribe) {\n        var substate = (_c = mutableState[_b = arg.queryCacheKey]) != null ? _c : mutableState[_b] = {};\n        substate[requestId] = (_e = (_d = arg.subscriptionOptions) != null ? _d : substate[requestId]) != null ? _e : {};\n        return true;\n      }\n    }\n\n    if (queryThunk.rejected.match(action)) {\n      var _m = action.meta,\n          condition = _m.condition,\n          arg = _m.arg,\n          requestId = _m.requestId;\n\n      if (condition && arg.subscribe) {\n        var substate = (_g = mutableState[_f = arg.queryCacheKey]) != null ? _g : mutableState[_f] = {};\n        substate[requestId] = (_i = (_h = arg.subscriptionOptions) != null ? _h : substate[requestId]) != null ? _i : {};\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return function (action, mwApi) {\n    var _a, _b;\n\n    if (!previousSubscriptions) {\n      previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n    }\n\n    if (api.internalActions.internal_probeSubscription.match(action)) {\n      var _j = action.payload,\n          queryCacheKey = _j.queryCacheKey,\n          requestId = _j.requestId;\n      var hasSubscription = !!((_a = internalState.currentSubscriptions[queryCacheKey]) == null ? void 0 : _a[requestId]);\n      return [false, hasSubscription];\n    }\n\n    var didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n\n    if (didMutate) {\n      if (!dispatchQueued) {\n        queueMicrotaskShim(function () {\n          var newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n\n          var _j = produceWithPatches2(previousSubscriptions, function () {\n            return newSubscriptions;\n          }),\n              patches = _j[1];\n\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n          previousSubscriptions = newSubscriptions;\n          dispatchQueued = false;\n        });\n        dispatchQueued = true;\n      }\n\n      var isSubscriptionSliceAction = !!((_b = action.type) == null ? void 0 : _b.startsWith(subscriptionsPrefix));\n      var isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n      var actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n      return [actionShouldContinue, false];\n    }\n\n    return [true, false];\n  };\n}; // src/query/core/buildMiddleware/index.ts\n\n\nfunction buildMiddleware(input) {\n  var reducerPath = input.reducerPath,\n      queryThunk = input.queryThunk,\n      api = input.api,\n      context = input.context;\n  var apiUid = context.apiUid;\n  var actions = {\n    invalidateTags: createAction3(reducerPath + \"/invalidateTags\")\n  };\n\n  var isThisApiSliceAction = function (action) {\n    return !!action && typeof action.type === \"string\" && action.type.startsWith(reducerPath + \"/\");\n  };\n\n  var handlerBuilders = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];\n\n  var middleware = function (mwApi) {\n    var initialized2 = false;\n    var internalState = {\n      currentSubscriptions: {}\n    };\n\n    var builderArgs = __spreadProps(__spreadValues({}, input), {\n      internalState: internalState,\n      refetchQuery: refetchQuery\n    });\n\n    var handlers = handlerBuilders.map(function (build) {\n      return build(builderArgs);\n    });\n    var batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n    var windowEventsHandler = buildWindowEventHandler(builderArgs);\n    return function (next) {\n      return function (action) {\n        if (!initialized2) {\n          initialized2 = true;\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n\n        var mwApiWithNext = __spreadProps(__spreadValues({}, mwApi), {\n          next: next\n        });\n\n        var stateBefore = mwApi.getState();\n\n        var _j = batchedActionsHandler(action, mwApiWithNext, stateBefore),\n            actionShouldContinue = _j[0],\n            hasSubscription = _j[1];\n\n        var res;\n\n        if (actionShouldContinue) {\n          res = next(action);\n        } else {\n          res = hasSubscription;\n        }\n\n        if (!!mwApi.getState()[reducerPath]) {\n          windowEventsHandler(action, mwApiWithNext, stateBefore);\n\n          if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n            for (var _k = 0, handlers_1 = handlers; _k < handlers_1.length; _k++) {\n              var handler = handlers_1[_k];\n              handler(action, mwApiWithNext, stateBefore);\n            }\n          }\n        }\n\n        return res;\n      };\n    };\n  };\n\n  return {\n    middleware: middleware,\n    actions: actions\n  };\n\n  function refetchQuery(querySubState, queryCacheKey, override) {\n    if (override === void 0) {\n      override = {};\n    }\n\n    return queryThunk(__spreadValues({\n      type: \"query\",\n      endpointName: querySubState.endpointName,\n      originalArgs: querySubState.originalArgs,\n      subscribe: false,\n      forceRefetch: true,\n      queryCacheKey: queryCacheKey\n    }, override));\n  }\n} // src/query/tsHelpers.ts\n\n\nfunction assertCast(v) {}\n\nfunction safeAssign(target) {\n  var args = [];\n\n  for (var _j = 1; _j < arguments.length; _j++) {\n    args[_j - 1] = arguments[_j];\n  }\n\n  Object.assign.apply(Object, __spreadArray([target], args));\n} // src/query/core/module.ts\n\n\nimport { enablePatches } from \"immer\";\nvar coreModuleName = /* @__PURE__ */Symbol();\n\nvar coreModule = function () {\n  return {\n    name: coreModuleName,\n    init: function (api, _j, context) {\n      var baseQuery = _j.baseQuery,\n          tagTypes = _j.tagTypes,\n          reducerPath = _j.reducerPath,\n          serializeQueryArgs = _j.serializeQueryArgs,\n          keepUnusedDataFor = _j.keepUnusedDataFor,\n          refetchOnMountOrArgChange = _j.refetchOnMountOrArgChange,\n          refetchOnFocus = _j.refetchOnFocus,\n          refetchOnReconnect = _j.refetchOnReconnect;\n      enablePatches();\n      assertCast(serializeQueryArgs);\n\n      var assertTagType = function (tag) {\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n          if (!tagTypes.includes(tag.type)) {\n            console.error(\"Tag type '\" + tag.type + \"' was used, but not specified in `tagTypes`!\");\n          }\n        }\n\n        return tag;\n      };\n\n      Object.assign(api, {\n        reducerPath: reducerPath,\n        endpoints: {},\n        internalActions: {\n          onOnline: onOnline,\n          onOffline: onOffline,\n          onFocus: onFocus,\n          onFocusLost: onFocusLost\n        },\n        util: {}\n      });\n\n      var _k = buildThunks({\n        baseQuery: baseQuery,\n        reducerPath: reducerPath,\n        context: context,\n        api: api,\n        serializeQueryArgs: serializeQueryArgs\n      }),\n          queryThunk = _k.queryThunk,\n          mutationThunk = _k.mutationThunk,\n          patchQueryData = _k.patchQueryData,\n          updateQueryData = _k.updateQueryData,\n          upsertQueryData = _k.upsertQueryData,\n          prefetch = _k.prefetch,\n          buildMatchThunkActions = _k.buildMatchThunkActions;\n\n      var _l = buildSlice({\n        context: context,\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        reducerPath: reducerPath,\n        assertTagType: assertTagType,\n        config: {\n          refetchOnFocus: refetchOnFocus,\n          refetchOnReconnect: refetchOnReconnect,\n          refetchOnMountOrArgChange: refetchOnMountOrArgChange,\n          keepUnusedDataFor: keepUnusedDataFor,\n          reducerPath: reducerPath\n        }\n      }),\n          reducer = _l.reducer,\n          sliceActions = _l.actions;\n\n      safeAssign(api.util, {\n        patchQueryData: patchQueryData,\n        updateQueryData: updateQueryData,\n        upsertQueryData: upsertQueryData,\n        prefetch: prefetch,\n        resetApiState: sliceActions.resetApiState\n      });\n      safeAssign(api.internalActions, sliceActions);\n\n      var _m = buildMiddleware({\n        reducerPath: reducerPath,\n        context: context,\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        api: api,\n        assertTagType: assertTagType\n      }),\n          middleware = _m.middleware,\n          middlewareActions = _m.actions;\n\n      safeAssign(api.util, middlewareActions);\n      safeAssign(api, {\n        reducer: reducer,\n        middleware: middleware\n      });\n\n      var _o = buildSelectors({\n        serializeQueryArgs: serializeQueryArgs,\n        reducerPath: reducerPath\n      }),\n          buildQuerySelector = _o.buildQuerySelector,\n          buildMutationSelector = _o.buildMutationSelector,\n          selectInvalidatedBy = _o.selectInvalidatedBy;\n\n      safeAssign(api.util, {\n        selectInvalidatedBy: selectInvalidatedBy\n      });\n\n      var _p = buildInitiate({\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        api: api,\n        serializeQueryArgs: serializeQueryArgs,\n        context: context\n      }),\n          buildInitiateQuery = _p.buildInitiateQuery,\n          buildInitiateMutation = _p.buildInitiateMutation,\n          getRunningMutationThunk = _p.getRunningMutationThunk,\n          getRunningMutationsThunk = _p.getRunningMutationsThunk,\n          getRunningQueriesThunk = _p.getRunningQueriesThunk,\n          getRunningQueryThunk = _p.getRunningQueryThunk,\n          getRunningOperationPromises = _p.getRunningOperationPromises,\n          removalWarning = _p.removalWarning;\n\n      safeAssign(api.util, {\n        getRunningOperationPromises: getRunningOperationPromises,\n        getRunningOperationPromise: removalWarning,\n        getRunningMutationThunk: getRunningMutationThunk,\n        getRunningMutationsThunk: getRunningMutationsThunk,\n        getRunningQueryThunk: getRunningQueryThunk,\n        getRunningQueriesThunk: getRunningQueriesThunk\n      });\n      return {\n        name: coreModuleName,\n        injectEndpoint: function (endpointName, definition) {\n          var _a, _b;\n\n          var anyApi = api;\n          (_b = (_a = anyApi.endpoints)[endpointName]) != null ? _b : _a[endpointName] = {};\n\n          if (isQueryDefinition(definition)) {\n            safeAssign(anyApi.endpoints[endpointName], {\n              select: buildQuerySelector(endpointName, definition),\n              initiate: buildInitiateQuery(endpointName, definition)\n            }, buildMatchThunkActions(queryThunk, endpointName));\n          } else if (isMutationDefinition(definition)) {\n            safeAssign(anyApi.endpoints[endpointName], {\n              select: buildMutationSelector(),\n              initiate: buildInitiateMutation(endpointName)\n            }, buildMatchThunkActions(mutationThunk, endpointName));\n          }\n        }\n      };\n    }\n  };\n}; // src/query/core/index.ts\n\n\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule());\nexport { QueryStatus, buildCreateApi, copyWithStructuralSharing, coreModule, createApi, defaultSerializeQueryArgs, fakeBaseQuery, fetchBaseQuery, retry, setupListeners, skipSelector, skipToken };","map":{"version":3,"mappings":"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","names":["QueryStatus","QueryStatus2","status","isUninitialized","uninitialized","isLoading","pending","isSuccess","fulfilled","isError","rejected","url","RegExp","test","withoutTrailingSlash","replace","withoutLeadingSlash","base","isAbsoluteUrl","delimiter","endsWith","startsWith","flatten","arr","concat","apply","navigator","onLine","document","visibilityState","isPlainObject","_iPO","oldObj","newObj","Array","isArray","newKeys","Object","keys","oldKeys","isSameObject","length","mergeObj","_j","key","copyWithStructuralSharing","defaultFetchFn","args","defaultValidateStatus","response","defaultIsJsonContentType","headers","get","obj","isPlainObject2","copy","__spreadValues","entries","k","v","_a","baseUrl","_b","prepareHeaders","x","_k","fetchFn","paramsSerializer","_l","isJsonContentType","_m","jsonContentType","defaultTimeout","globalValidateStatus","baseFetchOptions","fetch","console","warn","arg","api","signal","getState","extra","endpoint","forced","type","_a2","method","Headers","body","params","_o","responseHandler","_p","validateStatus","_q","timeout","rest","config","stripUndefined","_r","_s","isJsonifiable","body2","toJSON","has","set","JSON","stringify","divider","indexOf","query","URLSearchParams","joinUrls","request","Request","requestClone","clone","meta","timedOut","timeoutId","setTimeout","abort","error","String","e_1","clearTimeout","responseClone","responseText","Promise","all","handleResponse","then","r","e","text","handleResponseError_1","originalStatus","data","e_2","resultData","parse","value","attempt","maxRetries","attempts","Math","min","random","resolve","res","assign","HandledError","throwImmediately","EMPTY_OPTIONS","retryWithBackoff","baseQuery","defaultOptions","extraOptions","possibleMaxRetries","filter","Boolean","slice","defaultRetryCondition","_","__","options","backoff","defaultBackoff","retryCondition","retry2","result","e_3","baseQueryApi","retry","fail","onFocus","onFocusLost","onOnline","onOffline","initialized","dispatch","customHandler","handleFocus","handleFocusLost","handleOnline","handleOffline","handleVisibilityChange","window","addEventListener","unsubscribe","removeEventListener","defaultHandler","DefinitionType","DefinitionType2","mutation","description","queryArg","assertTagTypes","isFunction","map","expandTagDescription","t","forceQueryFnSymbol","Symbol","isUpsertQuery","serializeQueryArgs","queryThunk","mutationThunk","context","runningQueries","Map","runningMutations","internalActions","unsubscribeQueryResult","removeMutationResult","updateSubscriptionOptions","buildInitiateQuery","buildInitiateMutation","getRunningQueryThunk","getRunningMutationThunk","getRunningQueriesThunk","getRunningMutationsThunk","getRunningOperationPromises","removalWarning","Error","process","env","NODE_ENV","extract","from","values","flatMap","queriesForStore","__spreadArray","isNotNullish","endpointName","queryArgs","endpointDefinition","endpointDefinitions","queryCacheKey","_endpointName","fixedCacheKeyOrRequestId","middlewareWarning","triggered","registered","internal_probeSubscription","requestId","reducerPath","queryAction","subscribe","forceRefetch","subscriptionOptions","forceQueryFn","thunk","originalArgs","selector","endpoints","select","thunkResult","stateAfter","skippedSynchronously","runningQuery","selectFromState","statePromise","unwrap","refetch","running_1","delete","track","fixedCacheKey","returnValuePromise","catch","reset","ret","running","baseQueryReturnValue","patchQueryData","patches","queryResultPatched","updateQueryData","updateRecipe","currentState","inversePatches","undo","util","isDraftable","produceWithPatches","push","op","path","upsertQueryData","initiate","executeEndpoint","_0","_1","rejectWithValue","fulfillWithValue","transformResponse","defaultTransformResponse","baseQueryApi_1","isForcedQuery","queryFn","arg2","what","err","fulfilledTimeStamp","Date","now","baseQueryMeta","SHOULD_AUTOBATCH","catchedError","error_1","transformErrorResponse","e_4","state","requestState","queries","baseFetchOnMountOrArgChange","refetchOnMountOrArgChange","fulfilledVal","refetchVal","Number","createAsyncThunk","getPendingMeta","startedTimeStamp","condition","queryThunkArgs","currentArg","previousArg","isQueryDefinition","endpointState","dispatchConditionRejection","hasTheForce","hasMaxAge","prefetch","force","maxAge","ifOlderThan","force2","latestStateValue","lastFulfilledTs","shouldRetrigger","action","matchPending","isAllOf","isPending","matchesEndpoint","matchFulfilled","isFulfilled","matchRejected","isRejected","buildMatchThunkActions","assertTagType","calculateProvidedBy","payload","isRejectedWithValue","update","substate","id","getMutationCacheKey","initialState","definitions","apiUid","extractRehydrationInfo","hasRehydrationInfo","resetApiState","createAction2","querySlice","createSlice","name","reducers","removeQueryResult","reducer","draft","prepare","prepareAutoBatched","updateQuerySubstateIfExists","applyPatches","extraReducers","builder","addCase","upserting","merge","newData","createNextState","draftSubstateData","structuralSharing","addMatcher","entry","mutationSlice","cacheKey","updateMutationSubstateIfExists","mutations","invalidationSlice","actions","tagTypeSubscriptions","idSubscriptions","foundAt","splice","provided","incomingTags","cacheKeys","subscribedQueries","alreadySubscribed","includes","isAnyOf","isFulfilled2","isRejectedWithValue2","providedTags","calculateProvidedByThunk","subscriptionSlice","d","a","internalSubscriptionsSlice","subscriptionsUpdated","configSlice","online","isOnline","focused","isDocumentVisible","middlewareRegistered","combinedReducer","combineReducers","subscriptions","match","__spreadProps","unsubscribeMutationResult","skipToken","for","skipSelector","initialSubState","defaultQuerySubState","defaultMutationSubState","selectSkippedQuery","selectSkippedMutation","buildQuerySelector","buildMutationSelector","selectInvalidatedBy","getRequestStatusFlags","rootState","selectInternalState","serializedArgs","selectQuerySubstate","finalSelectQuerySubState","createSelector","withRequestFlags","mutationId","selectMutationSubstate","finalSelectMutationSubstate","tags","apiState","toInvalidate","Set","tag","invalidateSubscriptions","invalidate","add","querySubState","defaultSerializeQueryArgs","sort","reduce","acc","key2","modules","defaultMemoize","optionsWithDefaults","keepUnusedDataFor","refetchOnFocus","refetchOnReconnect","queryArgsApi","finalSerializeQueryArgs","endpointSQA_1","queryArgsApi2","initialResult","tagTypes","batch","fn","nanoid","injectEndpoints","enhanceEndpoints","addTagTypes","eT","partialDefinition","initializedModules","m","init","inject","evaluatedEndpoints","definition","overrideExisting","injectEndpoint","THIRTY_TWO_BIT_MAX_TIMER_SECONDS","buildCacheCollectionHandler","internalState","currentSubscriptions","isObjectEmpty","currentRemovalTimeouts","handler","mwApi","internalState2","handleUnsubscribe","queryState","api2","Infinity","finalKeepUnusedDataFor","max","anySubscriptionsRemainingForKey","currentTimeout","buildInvalidationByTagsHandler","refetchQuery","isThunkActionWithTags","isAnyOf2","isFulfilled3","isRejectedWithValue3","invalidateTags","valuesArray","subscriptionSubState","buildPollingHandler","currentPolls","updatePollingInterval","startNextPoll","clearPolls","lowestPollingInterval","findLowestPollingInterval","isFinite","currentPoll","nextPollTimestamp","currentInterval","pollingInterval","cleanupPollForKey","existingPoll","subscribers","POSITIVE_INFINITY","buildWindowEventHandler","refetchValidQueries","shouldRefetch","some","sub","every","neverResolvedError","buildCacheLifecycleHandler","isQueryThunk","isAsyncThunkAction","isMutationThunk","isFulfilledThunk","isFulfilled4","lifecycleMap","stateBefore","getCacheKey","oldState","handleNewKey","lifecycle","valueResolved","cacheEntryRemoved","cacheKey2","onCacheEntryAdded","cacheDataLoaded","race","extra2","lifecycleApi","getCacheEntry","updateCachedData","runningHandler","buildQueryLifecycleHandler","isPendingThunk","isPending2","isRejectedThunk","isRejected2","isFullfilledThunk","isFulfilled5","endpointName_1","originalArgs_1","onQueryStarted","lifecycle_1","queryFulfilled","reject","selector_1","rejectedWithValue","isUnhandledError","buildDevCheckHandler","promise","queueMicrotaskShim","queueMicrotask","bind","global","cb","buildBatchedActionsHandler","subscriptionsPrefix","previousSubscriptions","dispatchQueued","actuallyMutateSubscriptions","mutableState","hasSubscription","didMutate","newSubscriptions","produceWithPatches2","next","isSubscriptionSliceAction","isAdditionalSubscriptionAction","actionShouldContinue","input","createAction3","isThisApiSliceAction","handlerBuilders","middleware","initialized2","builderArgs","handlers","build","batchedActionsHandler","windowEventsHandler","mwApiWithNext","override","target","coreModuleName","coreModule","enablePatches","assertCast","buildThunks","buildSlice","sliceActions","safeAssign","buildMiddleware","middlewareActions","buildSelectors","buildInitiate","getRunningOperationPromise","anyApi","isMutationDefinition","createApi"],"sources":["D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\apiState.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isAbsoluteUrl.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\joinUrls.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\flatten.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isOnline.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isDocumentVisible.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\copyWithStructuralSharing.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\fetchBaseQuery.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\HandledError.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\retry.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\setupListeners.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildSelectors.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\endpointDefinitions.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildSlice.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isNotNullish.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildInitiate.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildThunks.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\defaultSerializeQueryArgs.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\createApi.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\fakeBaseQuery.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\index.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\cacheCollection.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\invalidationByTags.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\polling.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\windowEventHandling.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\cacheLifecycle.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\queryLifecycle.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\devMiddleware.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\batchActions.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\tsHelpers.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\module.ts","D:\\前端学习\\00-react\\00-React\\05_React-Router\\08_auth-demo\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\index.ts"],"sourcesContent":["import type { SerializedError } from '@reduxjs/toolkit'\r\nimport type { BaseQueryError } from '../baseQueryTypes'\r\nimport type {\r\n  QueryDefinition,\r\n  MutationDefinition,\r\n  EndpointDefinitions,\r\n  BaseEndpointDefinition,\r\n  ResultTypeFrom,\r\n  QueryArgFrom,\r\n} from '../endpointDefinitions'\r\nimport type { Id, WithRequiredProp } from '../tsHelpers'\r\n\r\nexport type QueryCacheKey = string & { _type: 'queryCacheKey' }\r\nexport type QuerySubstateIdentifier = { queryCacheKey: QueryCacheKey }\r\nexport type MutationSubstateIdentifier =\r\n  | {\r\n      requestId: string\r\n      fixedCacheKey?: string\r\n    }\r\n  | {\r\n      requestId?: string\r\n      fixedCacheKey: string\r\n    }\r\n\r\nexport type RefetchConfigOptions = {\r\n  refetchOnMountOrArgChange: boolean | number\r\n  refetchOnReconnect: boolean\r\n  refetchOnFocus: boolean\r\n}\r\n\r\n/**\r\n * Strings describing the query state at any given time.\r\n */\r\nexport enum QueryStatus {\r\n  uninitialized = 'uninitialized',\r\n  pending = 'pending',\r\n  fulfilled = 'fulfilled',\r\n  rejected = 'rejected',\r\n}\r\n\r\nexport type RequestStatusFlags =\r\n  | {\r\n      status: QueryStatus.uninitialized\r\n      isUninitialized: true\r\n      isLoading: false\r\n      isSuccess: false\r\n      isError: false\r\n    }\r\n  | {\r\n      status: QueryStatus.pending\r\n      isUninitialized: false\r\n      isLoading: true\r\n      isSuccess: false\r\n      isError: false\r\n    }\r\n  | {\r\n      status: QueryStatus.fulfilled\r\n      isUninitialized: false\r\n      isLoading: false\r\n      isSuccess: true\r\n      isError: false\r\n    }\r\n  | {\r\n      status: QueryStatus.rejected\r\n      isUninitialized: false\r\n      isLoading: false\r\n      isSuccess: false\r\n      isError: true\r\n    }\r\n\r\nexport function getRequestStatusFlags(status: QueryStatus): RequestStatusFlags {\r\n  return {\r\n    status,\r\n    isUninitialized: status === QueryStatus.uninitialized,\r\n    isLoading: status === QueryStatus.pending,\r\n    isSuccess: status === QueryStatus.fulfilled,\r\n    isError: status === QueryStatus.rejected,\r\n  } as any\r\n}\r\n\r\nexport type SubscriptionOptions = {\r\n  /**\r\n   * How frequently to automatically re-fetch data (in milliseconds). Defaults to `0` (off).\r\n   */\r\n  pollingInterval?: number\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   *\r\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\r\n   */\r\n  refetchOnReconnect?: boolean\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   *\r\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\r\n   */\r\n  refetchOnFocus?: boolean\r\n}\r\nexport type Subscribers = { [requestId: string]: SubscriptionOptions }\r\nexport type QueryKeys<Definitions extends EndpointDefinitions> = {\r\n  [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\r\n    any,\r\n    any,\r\n    any,\r\n    any\r\n  >\r\n    ? K\r\n    : never\r\n}[keyof Definitions]\r\nexport type MutationKeys<Definitions extends EndpointDefinitions> = {\r\n  [K in keyof Definitions]: Definitions[K] extends MutationDefinition<\r\n    any,\r\n    any,\r\n    any,\r\n    any\r\n  >\r\n    ? K\r\n    : never\r\n}[keyof Definitions]\r\n\r\ntype BaseQuerySubState<D extends BaseEndpointDefinition<any, any, any>> = {\r\n  /**\r\n   * The argument originally passed into the hook or `initiate` action call\r\n   */\r\n  originalArgs: QueryArgFrom<D>\r\n  /**\r\n   * A unique ID associated with the request\r\n   */\r\n  requestId: string\r\n  /**\r\n   * The received data from the query\r\n   */\r\n  data?: ResultTypeFrom<D>\r\n  /**\r\n   * The received error if applicable\r\n   */\r\n  error?:\r\n    | SerializedError\r\n    | (D extends QueryDefinition<any, infer BaseQuery, any, any>\r\n        ? BaseQueryError<BaseQuery>\r\n        : never)\r\n  /**\r\n   * The name of the endpoint associated with the query\r\n   */\r\n  endpointName: string\r\n  /**\r\n   * Time that the latest query started\r\n   */\r\n  startedTimeStamp: number\r\n  /**\r\n   * Time that the latest query was fulfilled\r\n   */\r\n  fulfilledTimeStamp?: number\r\n}\r\n\r\nexport type QuerySubState<D extends BaseEndpointDefinition<any, any, any>> = Id<\r\n  | ({\r\n      status: QueryStatus.fulfilled\r\n    } & WithRequiredProp<\r\n      BaseQuerySubState<D>,\r\n      'data' | 'fulfilledTimeStamp'\r\n    > & { error: undefined })\r\n  | ({\r\n      status: QueryStatus.pending\r\n    } & BaseQuerySubState<D>)\r\n  | ({\r\n      status: QueryStatus.rejected\r\n    } & WithRequiredProp<BaseQuerySubState<D>, 'error'>)\r\n  | {\r\n      status: QueryStatus.uninitialized\r\n      originalArgs?: undefined\r\n      data?: undefined\r\n      error?: undefined\r\n      requestId?: undefined\r\n      endpointName?: string\r\n      startedTimeStamp?: undefined\r\n      fulfilledTimeStamp?: undefined\r\n    }\r\n>\r\n\r\ntype BaseMutationSubState<D extends BaseEndpointDefinition<any, any, any>> = {\r\n  requestId: string\r\n  data?: ResultTypeFrom<D>\r\n  error?:\r\n    | SerializedError\r\n    | (D extends MutationDefinition<any, infer BaseQuery, any, any>\r\n        ? BaseQueryError<BaseQuery>\r\n        : never)\r\n  endpointName: string\r\n  startedTimeStamp: number\r\n  fulfilledTimeStamp?: number\r\n}\r\n\r\nexport type MutationSubState<D extends BaseEndpointDefinition<any, any, any>> =\r\n  | (({\r\n      status: QueryStatus.fulfilled\r\n    } & WithRequiredProp<\r\n      BaseMutationSubState<D>,\r\n      'data' | 'fulfilledTimeStamp'\r\n    >) & { error: undefined })\r\n  | (({\r\n      status: QueryStatus.pending\r\n    } & BaseMutationSubState<D>) & { data?: undefined })\r\n  | ({\r\n      status: QueryStatus.rejected\r\n    } & WithRequiredProp<BaseMutationSubState<D>, 'error'>)\r\n  | {\r\n      requestId?: undefined\r\n      status: QueryStatus.uninitialized\r\n      data?: undefined\r\n      error?: undefined\r\n      endpointName?: string\r\n      startedTimeStamp?: undefined\r\n      fulfilledTimeStamp?: undefined\r\n    }\r\n\r\nexport type CombinedState<\r\n  D extends EndpointDefinitions,\r\n  E extends string,\r\n  ReducerPath extends string\r\n> = {\r\n  queries: QueryState<D>\r\n  mutations: MutationState<D>\r\n  provided: InvalidationState<E>\r\n  subscriptions: SubscriptionState\r\n  config: ConfigState<ReducerPath>\r\n}\r\n\r\nexport type InvalidationState<TagTypes extends string> = {\r\n  [_ in TagTypes]: {\r\n    [id: string]: Array<QueryCacheKey>\r\n    [id: number]: Array<QueryCacheKey>\r\n  }\r\n}\r\n\r\nexport type QueryState<D extends EndpointDefinitions> = {\r\n  [queryCacheKey: string]: QuerySubState<D[string]> | undefined\r\n}\r\n\r\nexport type SubscriptionState = {\r\n  [queryCacheKey: string]: Subscribers | undefined\r\n}\r\n\r\nexport type ConfigState<ReducerPath> = RefetchConfigOptions & {\r\n  reducerPath: ReducerPath\r\n  online: boolean\r\n  focused: boolean\r\n  middlewareRegistered: boolean | 'conflict'\r\n} & ModifiableConfigState\r\n\r\nexport type ModifiableConfigState = {\r\n  keepUnusedDataFor: number\r\n} & RefetchConfigOptions\r\n\r\nexport type MutationState<D extends EndpointDefinitions> = {\r\n  [requestId: string]: MutationSubState<D[string]> | undefined\r\n}\r\n\r\nexport type RootState<\r\n  Definitions extends EndpointDefinitions,\r\n  TagTypes extends string,\r\n  ReducerPath extends string\r\n> = {\r\n  [P in ReducerPath]: CombinedState<Definitions, TagTypes, P>\r\n}\r\n","/**\r\n * If either :// or // is present consider it to be an absolute url\r\n *\r\n * @param url string\r\n */\r\n\r\nexport function isAbsoluteUrl(url: string) {\r\n  return new RegExp(`(^|:)//`).test(url)\r\n}\r\n","import { isAbsoluteUrl } from './isAbsoluteUrl'\r\n\r\nconst withoutTrailingSlash = (url: string) => url.replace(/\\/$/, '')\r\nconst withoutLeadingSlash = (url: string) => url.replace(/^\\//, '')\r\n\r\nexport function joinUrls(\r\n  base: string | undefined,\r\n  url: string | undefined\r\n): string {\r\n  if (!base) {\r\n    return url!\r\n  }\r\n  if (!url) {\r\n    return base\r\n  }\r\n\r\n  if (isAbsoluteUrl(url)) {\r\n    return url\r\n  }\r\n\r\n  const delimiter = base.endsWith('/') || !url.startsWith('?') ? '/' : ''\r\n  base = withoutTrailingSlash(base)\r\n  url = withoutLeadingSlash(url)\r\n\r\n  return `${base}${delimiter}${url}`;\r\n}\r\n","/**\r\n * Alternative to `Array.flat(1)`\r\n * @param arr An array like [1,2,3,[1,2]]\r\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\r\n */\r\nexport const flatten = (arr: readonly any[]) => [].concat(...arr)\r\n","/**\r\n * Assumes a browser is online if `undefined`, otherwise makes a best effort\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\r\n */\r\nexport function isOnline() {\r\n  // We set the default config value in the store, so we'd need to check for this in a SSR env\r\n  return typeof navigator === 'undefined'\r\n    ? true\r\n    : navigator.onLine === undefined\r\n    ? true\r\n    : navigator.onLine\r\n}\r\n","/**\r\n * Assumes true for a non-browser env, otherwise makes a best effort\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState\r\n */\r\nexport function isDocumentVisible(): boolean {\r\n  // `document` may not exist in non-browser envs (like RN)\r\n  if (typeof document === 'undefined') {\r\n    return true\r\n  }\r\n  // Match true for visible, prerender, undefined\r\n  return document.visibilityState !== 'hidden'\r\n}\r\n","import { isPlainObject as _iPO } from '@reduxjs/toolkit'\r\n\r\n// remove type guard\r\nconst isPlainObject: (_: any) => boolean = _iPO\r\n\r\nexport function copyWithStructuralSharing<T>(oldObj: any, newObj: T): T\r\nexport function copyWithStructuralSharing(oldObj: any, newObj: any): any {\r\n  if (\r\n    oldObj === newObj ||\r\n    !(\r\n      (isPlainObject(oldObj) && isPlainObject(newObj)) ||\r\n      (Array.isArray(oldObj) && Array.isArray(newObj))\r\n    )\r\n  ) {\r\n    return newObj\r\n  }\r\n  const newKeys = Object.keys(newObj)\r\n  const oldKeys = Object.keys(oldObj)\r\n\r\n  let isSameObject = newKeys.length === oldKeys.length\r\n  const mergeObj: any = Array.isArray(newObj) ? [] : {}\r\n  for (const key of newKeys) {\r\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key])\r\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key]\r\n  }\r\n  return isSameObject ? oldObj : mergeObj\r\n}\r\n","import { joinUrls } from './utils'\r\nimport { isPlainObject } from '@reduxjs/toolkit'\r\nimport type { BaseQueryApi, BaseQueryFn } from './baseQueryTypes'\r\nimport type { MaybePromise, Override } from './tsHelpers'\r\n\r\nexport type ResponseHandler =\r\n  | 'content-type'\r\n  | 'json'\r\n  | 'text'\r\n  | ((response: Response) => Promise<any>)\r\n\r\ntype CustomRequestInit = Override<\r\n  RequestInit,\r\n  {\r\n    headers?:\r\n      | Headers\r\n      | string[][]\r\n      | Record<string, string | undefined>\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport interface FetchArgs extends CustomRequestInit {\r\n  url: string\r\n  params?: Record<string, any>\r\n  body?: any\r\n  responseHandler?: ResponseHandler\r\n  validateStatus?: (response: Response, body: any) => boolean\r\n  /**\r\n   * A number in milliseconds that represents that maximum time a request can take before timing out.\r\n   */\r\n  timeout?: number\r\n}\r\n\r\n/**\r\n * A mini-wrapper that passes arguments straight through to\r\n * {@link [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)}.\r\n * Avoids storing `fetch` in a closure, in order to permit mocking/monkey-patching.\r\n */\r\nconst defaultFetchFn: typeof fetch = (...args) => fetch(...args)\r\n\r\nconst defaultValidateStatus = (response: Response) =>\r\n  response.status >= 200 && response.status <= 299\r\n\r\nconst defaultIsJsonContentType = (headers: Headers) =>\r\n  /*applicat*/ /ion\\/(vnd\\.api\\+)?json/.test(headers.get('content-type') || '')\r\n\r\nexport type FetchBaseQueryError =\r\n  | {\r\n      /**\r\n       * * `number`:\r\n       *   HTTP status code\r\n       */\r\n      status: number\r\n      data: unknown\r\n    }\r\n  | {\r\n      /**\r\n       * * `\"FETCH_ERROR\"`:\r\n       *   An error that occurred during execution of `fetch` or the `fetchFn` callback option\r\n       **/\r\n      status: 'FETCH_ERROR'\r\n      data?: undefined\r\n      error: string\r\n    }\r\n  | {\r\n      /**\r\n       * * `\"PARSING_ERROR\"`:\r\n       *   An error happened during parsing.\r\n       *   Most likely a non-JSON-response was returned with the default `responseHandler` \"JSON\",\r\n       *   or an error occurred while executing a custom `responseHandler`.\r\n       **/\r\n      status: 'PARSING_ERROR'\r\n      originalStatus: number\r\n      data: string\r\n      error: string\r\n    }\r\n  | {\r\n      /**\r\n       * * `\"TIMEOUT_ERROR\"`:\r\n       *   Request timed out\r\n       **/\r\n      status: 'TIMEOUT_ERROR'\r\n      data?: undefined\r\n      error: string\r\n    }\r\n  | {\r\n      /**\r\n       * * `\"CUSTOM_ERROR\"`:\r\n       *   A custom error type that you can return from your `queryFn` where another error might not make sense.\r\n       **/\r\n      status: 'CUSTOM_ERROR'\r\n      data?: unknown\r\n      error: string\r\n    }\r\n\r\nfunction stripUndefined(obj: any) {\r\n  if (!isPlainObject(obj)) {\r\n    return obj\r\n  }\r\n  const copy: Record<string, any> = { ...obj }\r\n  for (const [k, v] of Object.entries(copy)) {\r\n    if (v === undefined) delete copy[k]\r\n  }\r\n  return copy\r\n}\r\n\r\nexport type FetchBaseQueryArgs = {\r\n  baseUrl?: string\r\n  prepareHeaders?: (\r\n    headers: Headers,\r\n    api: Pick<\r\n      BaseQueryApi,\r\n      'getState' | 'extra' | 'endpoint' | 'type' | 'forced'\r\n    >\r\n  ) => MaybePromise<Headers | void>\r\n  fetchFn?: (\r\n    input: RequestInfo,\r\n    init?: RequestInit | undefined\r\n  ) => Promise<Response>\r\n  paramsSerializer?: (params: Record<string, any>) => string\r\n  /**\r\n   * By default, we only check for 'application/json' and 'application/vnd.api+json' as the content-types for json. If you need to support another format, you can pass\r\n   * in a predicate function for your given api to get the same automatic stringifying behavior\r\n   * @example\r\n   * ```ts\r\n   * const isJsonContentType = (headers: Headers) => [\"application/vnd.api+json\", \"application/json\", \"application/vnd.hal+json\"].includes(headers.get(\"content-type\")?.trim());\r\n   * ```\r\n   */\r\n  isJsonContentType?: (headers: Headers) => boolean\r\n  /**\r\n   * Defaults to `application/json`;\r\n   */\r\n  jsonContentType?: string\r\n} & RequestInit &\r\n  Pick<FetchArgs, 'responseHandler' | 'validateStatus' | 'timeout'>\r\n\r\nexport type FetchBaseQueryMeta = { request: Request; response?: Response }\r\n\r\n/**\r\n * This is a very small wrapper around fetch that aims to simplify requests.\r\n *\r\n * @example\r\n * ```ts\r\n * const baseQuery = fetchBaseQuery({\r\n *   baseUrl: 'https://api.your-really-great-app.com/v1/',\r\n *   prepareHeaders: (headers, { getState }) => {\r\n *     const token = (getState() as RootState).auth.token;\r\n *     // If we have a token set in state, let's assume that we should be passing it.\r\n *     if (token) {\r\n *       headers.set('authorization', `Bearer ${token}`);\r\n *     }\r\n *     return headers;\r\n *   },\r\n * })\r\n * ```\r\n *\r\n * @param {string} baseUrl\r\n * The base URL for an API service.\r\n * Typically in the format of https://example.com/\r\n *\r\n * @param {(headers: Headers, api: { getState: () => unknown; extra: unknown; endpoint: string; type: 'query' | 'mutation'; forced: boolean; }) => Headers} prepareHeaders\r\n * An optional function that can be used to inject headers on requests.\r\n * Provides a Headers object, as well as most of the `BaseQueryApi` (`dispatch` is not available).\r\n * Useful for setting authentication or headers that need to be set conditionally.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Headers\r\n *\r\n * @param {(input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>} fetchFn\r\n * Accepts a custom `fetch` function if you do not want to use the default on the window.\r\n * Useful in SSR environments if you need to use a library such as `isomorphic-fetch` or `cross-fetch`\r\n *\r\n * @param {(params: Record<string, unknown>) => string} paramsSerializer\r\n * An optional function that can be used to stringify querystring parameters.\r\n *\r\n * @param {(headers: Headers) => boolean} isJsonContentType\r\n * An optional predicate function to determine if `JSON.stringify()` should be called on the `body` arg of `FetchArgs`\r\n *\r\n * @param {string} jsonContentType Used when automatically setting the content-type header for a request with a jsonifiable body that does not have an explicit content-type header. Defaults to `application/json`.\r\n *\r\n * @param {number} timeout\r\n * A number in milliseconds that represents the maximum time a request can take before timing out.\r\n */\r\nexport function fetchBaseQuery({\r\n  baseUrl,\r\n  prepareHeaders = (x) => x,\r\n  fetchFn = defaultFetchFn,\r\n  paramsSerializer,\r\n  isJsonContentType = defaultIsJsonContentType,\r\n  jsonContentType = 'application/json',\r\n  timeout: defaultTimeout,\r\n  validateStatus: globalValidateStatus,\r\n  ...baseFetchOptions\r\n}: FetchBaseQueryArgs = {}): BaseQueryFn<\r\n  string | FetchArgs,\r\n  unknown,\r\n  FetchBaseQueryError,\r\n  {},\r\n  FetchBaseQueryMeta\r\n> {\r\n  if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {\r\n    console.warn(\r\n      'Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.'\r\n    )\r\n  }\r\n  return async (arg, api) => {\r\n    const { signal, getState, extra, endpoint, forced, type } = api\r\n    let meta: FetchBaseQueryMeta | undefined\r\n    let {\r\n      url,\r\n      method = 'GET' as const,\r\n      headers = new Headers(baseFetchOptions.headers),\r\n      body = undefined,\r\n      params = undefined,\r\n      responseHandler = 'json' as const,\r\n      validateStatus = globalValidateStatus ?? defaultValidateStatus,\r\n      timeout = defaultTimeout,\r\n      ...rest\r\n    } = typeof arg == 'string' ? { url: arg } : arg\r\n    let config: RequestInit = {\r\n      ...baseFetchOptions,\r\n      method,\r\n      signal,\r\n      body,\r\n      ...rest,\r\n    }\r\n\r\n    headers = new Headers(stripUndefined(headers))\r\n    config.headers =\r\n      (await prepareHeaders(headers, {\r\n        getState,\r\n        extra,\r\n        endpoint,\r\n        forced,\r\n        type,\r\n      })) || headers\r\n\r\n    // Only set the content-type to json if appropriate. Will not be true for FormData, ArrayBuffer, Blob, etc.\r\n    const isJsonifiable = (body: any) =>\r\n      typeof body === 'object' &&\r\n      (isPlainObject(body) ||\r\n        Array.isArray(body) ||\r\n        typeof body.toJSON === 'function')\r\n\r\n    if (!config.headers.has('content-type') && isJsonifiable(body)) {\r\n      config.headers.set('content-type', jsonContentType)\r\n    }\r\n\r\n    if (isJsonifiable(body) && isJsonContentType(config.headers)) {\r\n      config.body = JSON.stringify(body)\r\n    }\r\n\r\n    if (params) {\r\n      const divider = ~url.indexOf('?') ? '&' : '?'\r\n      const query = paramsSerializer\r\n        ? paramsSerializer(params)\r\n        : new URLSearchParams(stripUndefined(params))\r\n      url += divider + query\r\n    }\r\n\r\n    url = joinUrls(baseUrl, url)\r\n\r\n    const request = new Request(url, config)\r\n    const requestClone = request.clone()\r\n    meta = { request: requestClone }\r\n\r\n    let response,\r\n      timedOut = false,\r\n      timeoutId =\r\n        timeout &&\r\n        setTimeout(() => {\r\n          timedOut = true\r\n          api.abort()\r\n        }, timeout)\r\n    try {\r\n      response = await fetchFn(request)\r\n    } catch (e) {\r\n      return {\r\n        error: {\r\n          status: timedOut ? 'TIMEOUT_ERROR' : 'FETCH_ERROR',\r\n          error: String(e),\r\n        },\r\n        meta,\r\n      }\r\n    } finally {\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n    }\r\n    const responseClone = response.clone()\r\n\r\n    meta.response = responseClone\r\n\r\n    let resultData: any\r\n    let responseText: string = ''\r\n    try {\r\n      let handleResponseError\r\n      await Promise.all([\r\n        handleResponse(response, responseHandler).then(\r\n          (r) => (resultData = r),\r\n          (e) => (handleResponseError = e)\r\n        ),\r\n        // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\r\n        // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\r\n        responseClone.text().then(\r\n          (r) => (responseText = r),\r\n          () => {}\r\n        ),\r\n      ])\r\n      if (handleResponseError) throw handleResponseError\r\n    } catch (e) {\r\n      return {\r\n        error: {\r\n          status: 'PARSING_ERROR',\r\n          originalStatus: response.status,\r\n          data: responseText,\r\n          error: String(e),\r\n        },\r\n        meta,\r\n      }\r\n    }\r\n\r\n    return validateStatus(response, resultData)\r\n      ? {\r\n          data: resultData,\r\n          meta,\r\n        }\r\n      : {\r\n          error: {\r\n            status: response.status,\r\n            data: resultData,\r\n          },\r\n          meta,\r\n        }\r\n  }\r\n\r\n  async function handleResponse(\r\n    response: Response,\r\n    responseHandler: ResponseHandler\r\n  ) {\r\n    if (typeof responseHandler === 'function') {\r\n      return responseHandler(response)\r\n    }\r\n\r\n    if (responseHandler === 'content-type') {\r\n      responseHandler = isJsonContentType(response.headers) ? 'json' : 'text'\r\n    }\r\n\r\n    if (responseHandler === 'json') {\r\n      const text = await response.text()\r\n      return text.length ? JSON.parse(text) : null\r\n    }\r\n\r\n    return response.text()\r\n  }\r\n}\r\n","export class HandledError {\r\n  constructor(\r\n    public readonly value: any,\r\n    public readonly meta: any = undefined\r\n  ) {}\r\n}\r\n","import type {\r\n  BaseQueryApi,\r\n  BaseQueryArg,\r\n  BaseQueryEnhancer,\r\n  BaseQueryExtraOptions,\r\n  BaseQueryFn,\r\n} from './baseQueryTypes'\r\nimport { FetchBaseQueryError } from './fetchBaseQuery'\r\nimport { HandledError } from './HandledError'\r\n\r\n/**\r\n * Exponential backoff based on the attempt number.\r\n *\r\n * @remarks\r\n * 1. 600ms * random(0.4, 1.4)\r\n * 2. 1200ms * random(0.4, 1.4)\r\n * 3. 2400ms * random(0.4, 1.4)\r\n * 4. 4800ms * random(0.4, 1.4)\r\n * 5. 9600ms * random(0.4, 1.4)\r\n *\r\n * @param attempt - Current attempt\r\n * @param maxRetries - Maximum number of retries\r\n */\r\nasync function defaultBackoff(attempt: number = 0, maxRetries: number = 5) {\r\n  const attempts = Math.min(attempt, maxRetries)\r\n\r\n  const timeout = ~~((Math.random() + 0.4) * (300 << attempts)) // Force a positive int in the case we make this an option\r\n  await new Promise((resolve) =>\r\n    setTimeout((res: any) => resolve(res), timeout)\r\n  )\r\n}\r\n\r\ntype RetryConditionFunction = (\r\n  error: FetchBaseQueryError,\r\n  args: BaseQueryArg<BaseQueryFn>,\r\n  extraArgs: {\r\n    attempt: number\r\n    baseQueryApi: BaseQueryApi\r\n    extraOptions: BaseQueryExtraOptions<BaseQueryFn> & RetryOptions\r\n  }\r\n) => boolean\r\n\r\nexport type RetryOptions = {\r\n  /**\r\n   * Function used to determine delay between retries\r\n   */\r\n  backoff?: (attempt: number, maxRetries: number) => Promise<void>\r\n} & (\r\n  | {\r\n      /**\r\n       * How many times the query will be retried (default: 5)\r\n       */\r\n      maxRetries?: number\r\n      retryCondition?: undefined\r\n    }\r\n  | {\r\n      /**\r\n       * Callback to determine if a retry should be attempted.\r\n       * Return `true` for another retry and `false` to quit trying prematurely.\r\n       */\r\n      retryCondition?: RetryConditionFunction\r\n      maxRetries?: undefined\r\n    }\r\n)\r\n\r\nfunction fail(e: any): never {\r\n  throw Object.assign(new HandledError({ error: e }), {\r\n    throwImmediately: true,\r\n  })\r\n}\r\n\r\nconst EMPTY_OPTIONS = {}\r\n\r\nconst retryWithBackoff: BaseQueryEnhancer<\r\n  unknown,\r\n  RetryOptions,\r\n  RetryOptions | void\r\n> = (baseQuery, defaultOptions) => async (args, api, extraOptions) => {\r\n  // We need to figure out `maxRetries` before we define `defaultRetryCondition.\r\n  // This is probably goofy, but ought to work.\r\n  // Put our defaults in one array, filter out undefineds, grab the last value.\r\n  const possibleMaxRetries: number[] = [\r\n    5,\r\n    ((defaultOptions as any) || EMPTY_OPTIONS).maxRetries,\r\n    ((extraOptions as any) || EMPTY_OPTIONS).maxRetries,\r\n  ].filter(Boolean)\r\n  const [maxRetries] = possibleMaxRetries.slice(-1)\r\n\r\n  const defaultRetryCondition: RetryConditionFunction = (_, __, { attempt }) =>\r\n    attempt <= maxRetries\r\n\r\n  const options: {\r\n    maxRetries: number\r\n    backoff: typeof defaultBackoff\r\n    retryCondition: typeof defaultRetryCondition\r\n  } = {\r\n    maxRetries,\r\n    backoff: defaultBackoff,\r\n    retryCondition: defaultRetryCondition,\r\n    ...defaultOptions,\r\n    ...extraOptions,\r\n  }\r\n  let retry = 0\r\n\r\n  while (true) {\r\n    try {\r\n      const result = await baseQuery(args, api, extraOptions)\r\n      // baseQueries _should_ return an error property, so we should check for that and throw it to continue retrying\r\n      if (result.error) {\r\n        throw new HandledError(result)\r\n      }\r\n      return result\r\n    } catch (e: any) {\r\n      retry++\r\n\r\n      if (e.throwImmediately) {\r\n        if (e instanceof HandledError) {\r\n          return e.value\r\n        }\r\n\r\n        // We don't know what this is, so we have to rethrow it\r\n        throw e\r\n      }\r\n\r\n      if (\r\n        e instanceof HandledError &&\r\n        !options.retryCondition(e.value.error as FetchBaseQueryError, args, {\r\n          attempt: retry,\r\n          baseQueryApi: api,\r\n          extraOptions,\r\n        })\r\n      ) {\r\n        return e.value\r\n      }\r\n      await options.backoff(retry, options.maxRetries)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A utility that can wrap `baseQuery` in the API definition to provide retries with a basic exponential backoff.\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * // codeblock-meta title=\"Retry every request 5 times by default\"\r\n * import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react'\r\n * interface Post {\r\n *   id: number\r\n *   name: string\r\n * }\r\n * type PostsResponse = Post[]\r\n *\r\n * // maxRetries: 5 is the default, and can be omitted. Shown for documentation purposes.\r\n * const staggeredBaseQuery = retry(fetchBaseQuery({ baseUrl: '/' }), { maxRetries: 5 });\r\n * export const api = createApi({\r\n *   baseQuery: staggeredBaseQuery,\r\n *   endpoints: (build) => ({\r\n *     getPosts: build.query<PostsResponse, void>({\r\n *       query: () => ({ url: 'posts' }),\r\n *     }),\r\n *     getPost: build.query<PostsResponse, string>({\r\n *       query: (id) => ({ url: `post/${id}` }),\r\n *       extraOptions: { maxRetries: 8 }, // You can override the retry behavior on each endpoint\r\n *     }),\r\n *   }),\r\n * });\r\n *\r\n * export const { useGetPostsQuery, useGetPostQuery } = api;\r\n * ```\r\n */\r\nexport const retry = /* @__PURE__ */ Object.assign(retryWithBackoff, { fail })\r\n","import type {\r\n  ThunkDispatch,\r\n  ActionCreatorWithoutPayload, // Workaround for API-Extractor\r\n} from '@reduxjs/toolkit'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const onFocus = /* @__PURE__ */ createAction('__rtkq/focused')\r\nexport const onFocusLost = /* @__PURE__ */ createAction('__rtkq/unfocused')\r\nexport const onOnline = /* @__PURE__ */ createAction('__rtkq/online')\r\nexport const onOffline = /* @__PURE__ */ createAction('__rtkq/offline')\r\n\r\nlet initialized = false\r\n\r\n/**\r\n * A utility used to enable `refetchOnMount` and `refetchOnReconnect` behaviors.\r\n * It requires the dispatch method from your store.\r\n * Calling `setupListeners(store.dispatch)` will configure listeners with the recommended defaults,\r\n * but you have the option of providing a callback for more granular control.\r\n *\r\n * @example\r\n * ```ts\r\n * setupListeners(store.dispatch)\r\n * ```\r\n *\r\n * @param dispatch - The dispatch method from your store\r\n * @param customHandler - An optional callback for more granular control over listener behavior\r\n * @returns Return value of the handler.\r\n * The default handler returns an `unsubscribe` method that can be called to remove the listeners.\r\n */\r\nexport function setupListeners(\r\n  dispatch: ThunkDispatch<any, any, any>,\r\n  customHandler?: (\r\n    dispatch: ThunkDispatch<any, any, any>,\r\n    actions: {\r\n      onFocus: typeof onFocus\r\n      onFocusLost: typeof onFocusLost\r\n      onOnline: typeof onOnline\r\n      onOffline: typeof onOffline\r\n    }\r\n  ) => () => void\r\n) {\r\n  function defaultHandler() {\r\n    const handleFocus = () => dispatch(onFocus())\r\n    const handleFocusLost = () => dispatch(onFocusLost())\r\n    const handleOnline = () => dispatch(onOnline())\r\n    const handleOffline = () => dispatch(onOffline())\r\n    const handleVisibilityChange = () => {\r\n      if (window.document.visibilityState === 'visible') {\r\n        handleFocus()\r\n      } else {\r\n        handleFocusLost()\r\n      }\r\n    }\r\n\r\n    if (!initialized) {\r\n      if (typeof window !== 'undefined' && window.addEventListener) {\r\n        // Handle focus events\r\n        window.addEventListener(\r\n          'visibilitychange',\r\n          handleVisibilityChange,\r\n          false\r\n        )\r\n        window.addEventListener('focus', handleFocus, false)\r\n\r\n        // Handle connection events\r\n        window.addEventListener('online', handleOnline, false)\r\n        window.addEventListener('offline', handleOffline, false)\r\n        initialized = true\r\n      }\r\n    }\r\n    const unsubscribe = () => {\r\n      window.removeEventListener('focus', handleFocus)\r\n      window.removeEventListener('visibilitychange', handleVisibilityChange)\r\n      window.removeEventListener('online', handleOnline)\r\n      window.removeEventListener('offline', handleOffline)\r\n      initialized = false\r\n    }\r\n    return unsubscribe\r\n  }\r\n\r\n  return customHandler\r\n    ? customHandler(dispatch, { onFocus, onFocusLost, onOffline, onOnline })\r\n    : defaultHandler()\r\n}\r\n","import { createNextState, createSelector } from '@reduxjs/toolkit'\r\nimport type {\r\n  MutationSubState,\r\n  QuerySubState,\r\n  RootState as _RootState,\r\n  RequestStatusFlags,\r\n  QueryCacheKey,\r\n} from './apiState'\r\nimport { QueryStatus, getRequestStatusFlags } from './apiState'\r\nimport type {\r\n  EndpointDefinitions,\r\n  QueryDefinition,\r\n  MutationDefinition,\r\n  QueryArgFrom,\r\n  TagTypesFrom,\r\n  ReducerPathFrom,\r\n  TagDescription,\r\n} from '../endpointDefinitions'\r\nimport { expandTagDescription } from '../endpointDefinitions'\r\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\r\nimport { getMutationCacheKey } from './buildSlice'\r\nimport { flatten } from '../utils'\r\n\r\nexport type SkipToken = typeof skipToken\r\n/**\r\n * Can be passed into `useQuery`, `useQueryState` or `useQuerySubscription`\r\n * instead of the query argument to get the same effect as if setting\r\n * `skip: true` in the query options.\r\n *\r\n * Useful for scenarios where a query should be skipped when `arg` is `undefined`\r\n * and TypeScript complains about it because `arg` is not allowed to be passed\r\n * in as `undefined`, such as\r\n *\r\n * ```ts\r\n * // codeblock-meta title=\"will error if the query argument is not allowed to be undefined\" no-transpile\r\n * useSomeQuery(arg, { skip: !!arg })\r\n * ```\r\n *\r\n * ```ts\r\n * // codeblock-meta title=\"using skipToken instead\" no-transpile\r\n * useSomeQuery(arg ?? skipToken)\r\n * ```\r\n *\r\n * If passed directly into a query or mutation selector, that selector will always\r\n * return an uninitialized state.\r\n */\r\nexport const skipToken = /* @__PURE__ */ Symbol.for('RTKQ/skipToken')\r\n/** @deprecated renamed to `skipToken` */\r\nexport const skipSelector = skipToken\r\n\r\ndeclare module './module' {\r\n  export interface ApiEndpointQuery<\r\n    Definition extends QueryDefinition<any, any, any, any, any>,\r\n    Definitions extends EndpointDefinitions\r\n  > {\r\n    select: QueryResultSelectorFactory<\r\n      Definition,\r\n      _RootState<\r\n        Definitions,\r\n        TagTypesFrom<Definition>,\r\n        ReducerPathFrom<Definition>\r\n      >\r\n    >\r\n  }\r\n\r\n  export interface ApiEndpointMutation<\r\n    Definition extends MutationDefinition<any, any, any, any, any>,\r\n    Definitions extends EndpointDefinitions\r\n  > {\r\n    select: MutationResultSelectorFactory<\r\n      Definition,\r\n      _RootState<\r\n        Definitions,\r\n        TagTypesFrom<Definition>,\r\n        ReducerPathFrom<Definition>\r\n      >\r\n    >\r\n  }\r\n}\r\n\r\ntype QueryResultSelectorFactory<\r\n  Definition extends QueryDefinition<any, any, any, any>,\r\n  RootState\r\n> = (\r\n  queryArg: QueryArgFrom<Definition> | SkipToken\r\n) => (state: RootState) => QueryResultSelectorResult<Definition>\r\n\r\nexport type QueryResultSelectorResult<\r\n  Definition extends QueryDefinition<any, any, any, any>\r\n> = QuerySubState<Definition> & RequestStatusFlags\r\n\r\ntype MutationResultSelectorFactory<\r\n  Definition extends MutationDefinition<any, any, any, any>,\r\n  RootState\r\n> = (\r\n  requestId:\r\n    | string\r\n    | { requestId: string | undefined; fixedCacheKey: string | undefined }\r\n    | SkipToken\r\n) => (state: RootState) => MutationResultSelectorResult<Definition>\r\n\r\nexport type MutationResultSelectorResult<\r\n  Definition extends MutationDefinition<any, any, any, any>\r\n> = MutationSubState<Definition> & RequestStatusFlags\r\n\r\nconst initialSubState: QuerySubState<any> = {\r\n  status: QueryStatus.uninitialized as const,\r\n}\r\n\r\n// abuse immer to freeze default states\r\nconst defaultQuerySubState = /* @__PURE__ */ createNextState(\r\n  initialSubState,\r\n  () => {}\r\n)\r\nconst defaultMutationSubState = /* @__PURE__ */ createNextState(\r\n  initialSubState as MutationSubState<any>,\r\n  () => {}\r\n)\r\n\r\nexport function buildSelectors<\r\n  Definitions extends EndpointDefinitions,\r\n  ReducerPath extends string\r\n>({\r\n  serializeQueryArgs,\r\n  reducerPath,\r\n}: {\r\n  serializeQueryArgs: InternalSerializeQueryArgs\r\n  reducerPath: ReducerPath\r\n}) {\r\n  type RootState = _RootState<Definitions, string, string>\r\n\r\n  const selectSkippedQuery = (state: RootState) => defaultQuerySubState\r\n  const selectSkippedMutation = (state: RootState) => defaultMutationSubState\r\n\r\n  return { buildQuerySelector, buildMutationSelector, selectInvalidatedBy }\r\n\r\n  function withRequestFlags<T extends { status: QueryStatus }>(\r\n    substate: T\r\n  ): T & RequestStatusFlags {\r\n    return {\r\n      ...substate,\r\n      ...getRequestStatusFlags(substate.status),\r\n    }\r\n  }\r\n\r\n  function selectInternalState(rootState: RootState) {\r\n    const state = rootState[reducerPath]\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!state) {\r\n        if ((selectInternalState as any).triggered) return state\r\n        ;(selectInternalState as any).triggered = true\r\n        console.error(\r\n          `Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`\r\n        )\r\n      }\r\n    }\r\n    return state\r\n  }\r\n\r\n  function buildQuerySelector(\r\n    endpointName: string,\r\n    endpointDefinition: QueryDefinition<any, any, any, any>\r\n  ) {\r\n    return ((queryArgs: any) => {\r\n      const serializedArgs = serializeQueryArgs({\r\n        queryArgs,\r\n        endpointDefinition,\r\n        endpointName,\r\n      })\r\n      const selectQuerySubstate = (state: RootState) =>\r\n        selectInternalState(state)?.queries?.[serializedArgs] ??\r\n        defaultQuerySubState\r\n      const finalSelectQuerySubState =\r\n        queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate\r\n\r\n      return createSelector(finalSelectQuerySubState, withRequestFlags)\r\n    }) as QueryResultSelectorFactory<any, RootState>\r\n  }\r\n\r\n  function buildMutationSelector() {\r\n    return ((id) => {\r\n      let mutationId: string | typeof skipToken\r\n      if (typeof id === 'object') {\r\n        mutationId = getMutationCacheKey(id) ?? skipToken\r\n      } else {\r\n        mutationId = id\r\n      }\r\n      const selectMutationSubstate = (state: RootState) =>\r\n        selectInternalState(state)?.mutations?.[mutationId as string] ??\r\n        defaultMutationSubState\r\n      const finalSelectMutationSubstate =\r\n        mutationId === skipToken\r\n          ? selectSkippedMutation\r\n          : selectMutationSubstate\r\n\r\n      return createSelector(finalSelectMutationSubstate, withRequestFlags)\r\n    }) as MutationResultSelectorFactory<any, RootState>\r\n  }\r\n\r\n  function selectInvalidatedBy(\r\n    state: RootState,\r\n    tags: ReadonlyArray<TagDescription<string>>\r\n  ): Array<{\r\n    endpointName: string\r\n    originalArgs: any\r\n    queryCacheKey: QueryCacheKey\r\n  }> {\r\n    const apiState = state[reducerPath]\r\n    const toInvalidate = new Set<QueryCacheKey>()\r\n    for (const tag of tags.map(expandTagDescription)) {\r\n      const provided = apiState.provided[tag.type]\r\n      if (!provided) {\r\n        continue\r\n      }\r\n\r\n      let invalidateSubscriptions =\r\n        (tag.id !== undefined\r\n          ? // id given: invalidate all queries that provide this type & id\r\n            provided[tag.id]\r\n          : // no id: invalidate all queries that provide this type\r\n            flatten(Object.values(provided))) ?? []\r\n\r\n      for (const invalidate of invalidateSubscriptions) {\r\n        toInvalidate.add(invalidate)\r\n      }\r\n    }\r\n\r\n    return flatten(\r\n      Array.from(toInvalidate.values()).map((queryCacheKey) => {\r\n        const querySubState = apiState.queries[queryCacheKey]\r\n        return querySubState\r\n          ? [\r\n              {\r\n                queryCacheKey,\r\n                endpointName: querySubState.endpointName!,\r\n                originalArgs: querySubState.originalArgs,\r\n              },\r\n            ]\r\n          : []\r\n      })\r\n    )\r\n  }\r\n}\r\n","import type { AnyAction, ThunkDispatch } from '@reduxjs/toolkit'\r\nimport { SerializeQueryArgs } from './defaultSerializeQueryArgs'\r\nimport type { QuerySubState, RootState } from './core/apiState'\r\nimport type {\r\n  BaseQueryExtraOptions,\r\n  BaseQueryFn,\r\n  BaseQueryResult,\r\n  BaseQueryArg,\r\n  BaseQueryApi,\r\n  QueryReturnValue,\r\n  BaseQueryError,\r\n  BaseQueryMeta,\r\n} from './baseQueryTypes'\r\nimport type {\r\n  HasRequiredProps,\r\n  MaybePromise,\r\n  OmitFromUnion,\r\n  CastAny,\r\n} from './tsHelpers'\r\nimport type { NEVER } from './fakeBaseQuery'\r\n\r\nconst resultType = /* @__PURE__ */ Symbol()\r\nconst baseQuery = /* @__PURE__ */ Symbol()\r\n\r\ninterface EndpointDefinitionWithQuery<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  ResultType\r\n> {\r\n  /**\r\n   * `query` can be a function that returns either a `string` or an `object` which is passed to your `baseQuery`. If you are using [fetchBaseQuery](./fetchBaseQuery), this can return either a `string` or an `object` of properties in `FetchArgs`. If you use your own custom [`baseQuery`](../../rtk-query/usage/customizing-queries), you can customize this behavior to your liking.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"query example\"\r\n   *\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   * type PostsResponse = Post[]\r\n   *\r\n   * const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   tagTypes: ['Post'],\r\n   *   endpoints: (build) => ({\r\n   *     getPosts: build.query<PostsResponse, void>({\r\n   *       // highlight-start\r\n   *       query: () => 'posts',\r\n   *       // highlight-end\r\n   *     }),\r\n   *     addPost: build.mutation<Post, Partial<Post>>({\r\n   *      // highlight-start\r\n   *      query: (body) => ({\r\n   *        url: `posts`,\r\n   *        method: 'POST',\r\n   *        body,\r\n   *      }),\r\n   *      // highlight-end\r\n   *      invalidatesTags: [{ type: 'Post', id: 'LIST' }],\r\n   *    }),\r\n   *   })\r\n   * })\r\n   * ```\r\n   */\r\n  query(arg: QueryArg): BaseQueryArg<BaseQuery>\r\n  queryFn?: never\r\n  /**\r\n   * A function to manipulate the data returned by a query or mutation.\r\n   */\r\n  transformResponse?(\r\n    baseQueryReturnValue: BaseQueryResult<BaseQuery>,\r\n    meta: BaseQueryMeta<BaseQuery>,\r\n    arg: QueryArg\r\n  ): ResultType | Promise<ResultType>\r\n  /**\r\n   * A function to manipulate the data returned by a failed query or mutation.\r\n   */\r\n  transformErrorResponse?(\r\n    baseQueryReturnValue: BaseQueryError<BaseQuery>,\r\n    meta: BaseQueryMeta<BaseQuery>,\r\n    arg: QueryArg\r\n  ): unknown\r\n  /**\r\n   * Defaults to `true`.\r\n   *\r\n   * Most apps should leave this setting on. The only time it can be a performance issue\r\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\r\n   * you're unable to paginate it.\r\n   *\r\n   * For details of how this works, please see the below. When it is set to `false`,\r\n   * every request will cause subscribed components to rerender, even when the data has not changed.\r\n   *\r\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\r\n   */\r\n  structuralSharing?: boolean\r\n}\r\n\r\ninterface EndpointDefinitionWithQueryFn<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  ResultType\r\n> {\r\n  /**\r\n   * Can be used in place of `query` as an inline function that bypasses `baseQuery` completely for the endpoint.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // codeblock-meta title=\"Basic queryFn example\"\r\n   *\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   * type PostsResponse = Post[]\r\n   *\r\n   * const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   endpoints: (build) => ({\r\n   *     getPosts: build.query<PostsResponse, void>({\r\n   *       query: () => 'posts',\r\n   *     }),\r\n   *     flipCoin: build.query<'heads' | 'tails', void>({\r\n   *       // highlight-start\r\n   *       queryFn(arg, queryApi, extraOptions, baseQuery) {\r\n   *         const randomVal = Math.random()\r\n   *         if (randomVal < 0.45) {\r\n   *           return { data: 'heads' }\r\n   *         }\r\n   *         if (randomVal < 0.9) {\r\n   *           return { data: 'tails' }\r\n   *         }\r\n   *         return { error: { status: 500, statusText: 'Internal Server Error', data: \"Coin landed on it's edge!\" } }\r\n   *       }\r\n   *       // highlight-end\r\n   *     })\r\n   *   })\r\n   * })\r\n   * ```\r\n   */\r\n  queryFn(\r\n    arg: QueryArg,\r\n    api: BaseQueryApi,\r\n    extraOptions: BaseQueryExtraOptions<BaseQuery>,\r\n    baseQuery: (arg: Parameters<BaseQuery>[0]) => ReturnType<BaseQuery>\r\n  ): MaybePromise<QueryReturnValue<ResultType, BaseQueryError<BaseQuery>>>\r\n  query?: never\r\n  transformResponse?: never\r\n  transformErrorResponse?: never\r\n  /**\r\n   * Defaults to `true`.\r\n   *\r\n   * Most apps should leave this setting on. The only time it can be a performance issue\r\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\r\n   * you're unable to paginate it.\r\n   *\r\n   * For details of how this works, please see the below. When it is set to `false`,\r\n   * every request will cause subscribed components to rerender, even when the data has not changed.\r\n   *\r\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\r\n   */\r\n  structuralSharing?: boolean\r\n}\r\n\r\nexport interface BaseEndpointTypes<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  ResultType\r\n> {\r\n  QueryArg: QueryArg\r\n  BaseQuery: BaseQuery\r\n  ResultType: ResultType\r\n}\r\n\r\nexport type BaseEndpointDefinition<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  ResultType\r\n> = (\r\n  | ([CastAny<BaseQueryResult<BaseQuery>, {}>] extends [NEVER]\r\n      ? never\r\n      : EndpointDefinitionWithQuery<QueryArg, BaseQuery, ResultType>)\r\n  | EndpointDefinitionWithQueryFn<QueryArg, BaseQuery, ResultType>\r\n) & {\r\n  /* phantom type */\r\n  [resultType]?: ResultType\r\n  /* phantom type */\r\n  [baseQuery]?: BaseQuery\r\n} & HasRequiredProps<\r\n    BaseQueryExtraOptions<BaseQuery>,\r\n    { extraOptions: BaseQueryExtraOptions<BaseQuery> },\r\n    { extraOptions?: BaseQueryExtraOptions<BaseQuery> }\r\n  >\r\n\r\nexport enum DefinitionType {\r\n  query = 'query',\r\n  mutation = 'mutation',\r\n}\r\n\r\nexport type GetResultDescriptionFn<\r\n  TagTypes extends string,\r\n  ResultType,\r\n  QueryArg,\r\n  ErrorType,\r\n  MetaType\r\n> = (\r\n  result: ResultType | undefined,\r\n  error: ErrorType | undefined,\r\n  arg: QueryArg,\r\n  meta: MetaType\r\n) => ReadonlyArray<TagDescription<TagTypes>>\r\n\r\nexport type FullTagDescription<TagType> = {\r\n  type: TagType\r\n  id?: number | string\r\n}\r\nexport type TagDescription<TagType> = TagType | FullTagDescription<TagType>\r\nexport type ResultDescription<\r\n  TagTypes extends string,\r\n  ResultType,\r\n  QueryArg,\r\n  ErrorType,\r\n  MetaType\r\n> =\r\n  | ReadonlyArray<TagDescription<TagTypes>>\r\n  | GetResultDescriptionFn<TagTypes, ResultType, QueryArg, ErrorType, MetaType>\r\n\r\n/** @deprecated please use `onQueryStarted` instead */\r\nexport interface QueryApi<ReducerPath extends string, Context extends {}> {\r\n  /** @deprecated please use `onQueryStarted` instead */\r\n  dispatch: ThunkDispatch<any, any, AnyAction>\r\n  /** @deprecated please use `onQueryStarted` instead */\r\n  getState(): RootState<any, any, ReducerPath>\r\n  /** @deprecated please use `onQueryStarted` instead */\r\n  extra: unknown\r\n  /** @deprecated please use `onQueryStarted` instead */\r\n  requestId: string\r\n  /** @deprecated please use `onQueryStarted` instead */\r\n  context: Context\r\n}\r\n\r\nexport interface QueryTypes<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  TagTypes extends string,\r\n  ResultType,\r\n  ReducerPath extends string = string\r\n> extends BaseEndpointTypes<QueryArg, BaseQuery, ResultType> {\r\n  /**\r\n   * The endpoint definition type. To be used with some internal generic types.\r\n   * @example\r\n   * ```ts\r\n   * const useMyWrappedHook: UseQuery<typeof api.endpoints.query.Types.QueryDefinition> = ...\r\n   * ```\r\n   */\r\n  QueryDefinition: QueryDefinition<\r\n    QueryArg,\r\n    BaseQuery,\r\n    TagTypes,\r\n    ResultType,\r\n    ReducerPath\r\n  >\r\n  TagTypes: TagTypes\r\n  ReducerPath: ReducerPath\r\n}\r\n\r\nexport interface QueryExtraOptions<\r\n  TagTypes extends string,\r\n  ResultType,\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  ReducerPath extends string = string\r\n> {\r\n  type: DefinitionType.query\r\n  /**\r\n   * Used by `query` endpoints. Determines which 'tag' is attached to the cached data returned by the query.\r\n   * Expects an array of tag type strings, an array of objects of tag types with ids, or a function that returns such an array.\r\n   * 1.  `['Post']` - equivalent to `2`\r\n   * 2.  `[{ type: 'Post' }]` - equivalent to `1`\r\n   * 3.  `[{ type: 'Post', id: 1 }]`\r\n   * 4.  `(result, error, arg) => ['Post']` - equivalent to `5`\r\n   * 5.  `(result, error, arg) => [{ type: 'Post' }]` - equivalent to `4`\r\n   * 6.  `(result, error, arg) => [{ type: 'Post', id: 1 }]`\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"providesTags example\"\r\n   *\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   * type PostsResponse = Post[]\r\n   *\r\n   * const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   tagTypes: ['Posts'],\r\n   *   endpoints: (build) => ({\r\n   *     getPosts: build.query<PostsResponse, void>({\r\n   *       query: () => 'posts',\r\n   *       // highlight-start\r\n   *       providesTags: (result) =>\r\n   *         result\r\n   *           ? [\r\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\r\n   *               { type: 'Posts', id: 'LIST' },\r\n   *             ]\r\n   *           : [{ type: 'Posts', id: 'LIST' }],\r\n   *       // highlight-end\r\n   *     })\r\n   *   })\r\n   * })\r\n   * ```\r\n   */\r\n  providesTags?: ResultDescription<\r\n    TagTypes,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQueryError<BaseQuery>,\r\n    BaseQueryMeta<BaseQuery>\r\n  >\r\n  /**\r\n   * Not to be used. A query should not invalidate tags in the cache.\r\n   */\r\n  invalidatesTags?: never\r\n\r\n  /**\r\n   * Can be provided to return a custom cache key value based on the query arguments.\r\n   *\r\n   * This is primarily intended for cases where a non-serializable value is passed as part of the query arg object and should be excluded from the cache key.  It may also be used for cases where an endpoint should only have a single cache entry, such as an infinite loading / pagination implementation.\r\n   *\r\n   * Unlike the `createApi` version which can _only_ return a string, this per-endpoint option can also return an an object, number, or boolean.  If it returns a string, that value will be used as the cache key directly.  If it returns an object / number / boolean, that value will be passed to the built-in `defaultSerializeQueryArgs`.  This simplifies the use case of stripping out args you don't want included in the cache key.\r\n   *\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"serializeQueryArgs : exclude value\"\r\n   *\r\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   *\r\n   * interface MyApiClient {\r\n   *   fetchPost: (id: string) => Promise<Post>\r\n   * }\r\n   *\r\n   * createApi({\r\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *  endpoints: (build) => ({\r\n   *    // Example: an endpoint with an API client passed in as an argument,\r\n   *    // but only the item ID should be used as the cache key\r\n   *    getPost: build.query<Post, { id: string; client: MyApiClient }>({\r\n   *      queryFn: async ({ id, client }) => {\r\n   *        const post = await client.fetchPost(id)\r\n   *        return { data: post }\r\n   *      },\r\n   *      // highlight-start\r\n   *      serializeQueryArgs: ({ queryArgs, endpointDefinition, endpointName }) => {\r\n   *        const { id } = queryArgs\r\n   *        // This can return a string, an object, a number, or a boolean.\r\n   *        // If it returns an object, number or boolean, that value\r\n   *        // will be serialized automatically via `defaultSerializeQueryArgs`\r\n   *        return { id } // omit `client` from the cache key\r\n   *\r\n   *        // Alternately, you can use `defaultSerializeQueryArgs` yourself:\r\n   *        // return defaultSerializeQueryArgs({\r\n   *        //   endpointName,\r\n   *        //   queryArgs: { id },\r\n   *        //   endpointDefinition\r\n   *        // })\r\n   *        // Or  create and return a string yourself:\r\n   *        // return `getPost(${id})`\r\n   *      },\r\n   *      // highlight-end\r\n   *    }),\r\n   *  }),\r\n   *})\r\n   * ```\r\n   */\r\n  serializeQueryArgs?: SerializeQueryArgs<\r\n    QueryArg,\r\n    string | number | boolean | Record<any, any>\r\n  >\r\n\r\n  /**\r\n   * Can be provided to merge an incoming response value into the current cache data.\r\n   * If supplied, no automatic structural sharing will be applied - it's up to\r\n   * you to update the cache appropriately.\r\n   *\r\n   * Since RTKQ normally replaces cache entries with the new response, you will usually\r\n   * need to use this with the `serializeQueryArgs` or `forceRefetch` options to keep\r\n   * an existing cache entry so that it can be updated.\r\n   *\r\n   * Since this is wrapped with Immer, you , you may either mutate the `currentCacheValue` directly,\r\n   * or return a new value, but _not_ both at once.\r\n   *\r\n   * Will only be called if the existing `currentCacheData` is _not_ `undefined` - on first response,\r\n   * the cache entry will just save the response data directly.\r\n   *\r\n   * Useful if you don't want a new request to completely override the current cache value,\r\n   * maybe because you have manually updated it from another source and don't want those\r\n   * updates to get lost.\r\n   *\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"merge: pagination\"\r\n   *\r\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   *\r\n   * createApi({\r\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *  endpoints: (build) => ({\r\n   *    listItems: build.query<string[], number>({\r\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\r\n   *     // Only have one cache entry because the arg always maps to one string\r\n   *     serializeQueryArgs: ({ endpointName }) => {\r\n   *       return endpointName\r\n   *      },\r\n   *      // Always merge incoming data to the cache entry\r\n   *      merge: (currentCache, newItems) => {\r\n   *        currentCache.push(...newItems)\r\n   *      },\r\n   *      // Refetch when the page arg changes\r\n   *      forceRefetch({ currentArg, previousArg }) {\r\n   *        return currentArg !== previousArg\r\n   *      },\r\n   *    }),\r\n   *  }),\r\n   *})\r\n   * ```\r\n   */\r\n  merge?(\r\n    currentCacheData: ResultType,\r\n    responseData: ResultType\r\n  ): ResultType | void\r\n\r\n  /**\r\n   * Check to see if the endpoint should force a refetch in cases where it normally wouldn't.\r\n   * This is primarily useful for \"infinite scroll\" / pagination use cases where\r\n   * RTKQ is keeping a single cache entry that is added to over time, in combination\r\n   * with `serializeQueryArgs` returning a fixed cache key and a `merge` callback\r\n   * set to add incoming data to the cache entry each time.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"forceRefresh: pagination\"\r\n   *\r\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   *\r\n   * createApi({\r\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *  endpoints: (build) => ({\r\n   *    listItems: build.query<string[], number>({\r\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\r\n   *     // Only have one cache entry because the arg always maps to one string\r\n   *     serializeQueryArgs: ({ endpointName }) => {\r\n   *       return endpointName\r\n   *      },\r\n   *      // Always merge incoming data to the cache entry\r\n   *      merge: (currentCache, newItems) => {\r\n   *        currentCache.push(...newItems)\r\n   *      },\r\n   *      // Refetch when the page arg changes\r\n   *      forceRefetch({ currentArg, previousArg }) {\r\n   *        return currentArg !== previousArg\r\n   *      },\r\n   *    }),\r\n   *  }),\r\n   *})\r\n   * ```\r\n   */\r\n  forceRefetch?(params: {\r\n    currentArg: QueryArg | undefined\r\n    previousArg: QueryArg | undefined\r\n    state: RootState<any, any, string>\r\n    endpointState?: QuerySubState<any>\r\n  }): boolean\r\n\r\n  /**\r\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\r\n   */\r\n  Types?: QueryTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\r\n}\r\n\r\nexport type QueryDefinition<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  TagTypes extends string,\r\n  ResultType,\r\n  ReducerPath extends string = string\r\n> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> &\r\n  QueryExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>\r\n\r\nexport interface MutationTypes<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  TagTypes extends string,\r\n  ResultType,\r\n  ReducerPath extends string = string\r\n> extends BaseEndpointTypes<QueryArg, BaseQuery, ResultType> {\r\n  /**\r\n   * The endpoint definition type. To be used with some internal generic types.\r\n   * @example\r\n   * ```ts\r\n   * const useMyWrappedHook: UseMutation<typeof api.endpoints.query.Types.MutationDefinition> = ...\r\n   * ```\r\n   */\r\n  MutationDefinition: MutationDefinition<\r\n    QueryArg,\r\n    BaseQuery,\r\n    TagTypes,\r\n    ResultType,\r\n    ReducerPath\r\n  >\r\n  TagTypes: TagTypes\r\n  ReducerPath: ReducerPath\r\n}\r\n\r\nexport interface MutationExtraOptions<\r\n  TagTypes extends string,\r\n  ResultType,\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  ReducerPath extends string = string\r\n> {\r\n  type: DefinitionType.mutation\r\n  /**\r\n   * Used by `mutation` endpoints. Determines which cached data should be either re-fetched or removed from the cache.\r\n   * Expects the same shapes as `providesTags`.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"invalidatesTags example\"\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   * type PostsResponse = Post[]\r\n   *\r\n   * const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   tagTypes: ['Posts'],\r\n   *   endpoints: (build) => ({\r\n   *     getPosts: build.query<PostsResponse, void>({\r\n   *       query: () => 'posts',\r\n   *       providesTags: (result) =>\r\n   *         result\r\n   *           ? [\r\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\r\n   *               { type: 'Posts', id: 'LIST' },\r\n   *             ]\r\n   *           : [{ type: 'Posts', id: 'LIST' }],\r\n   *     }),\r\n   *     addPost: build.mutation<Post, Partial<Post>>({\r\n   *       query(body) {\r\n   *         return {\r\n   *           url: `posts`,\r\n   *           method: 'POST',\r\n   *           body,\r\n   *         }\r\n   *       },\r\n   *       // highlight-start\r\n   *       invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\r\n   *       // highlight-end\r\n   *     }),\r\n   *   })\r\n   * })\r\n   * ```\r\n   */\r\n  invalidatesTags?: ResultDescription<\r\n    TagTypes,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQueryError<BaseQuery>,\r\n    BaseQueryMeta<BaseQuery>\r\n  >\r\n  /**\r\n   * Not to be used. A mutation should not provide tags to the cache.\r\n   */\r\n  providesTags?: never\r\n\r\n  /**\r\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\r\n   */\r\n  Types?: MutationTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\r\n}\r\n\r\nexport type MutationDefinition<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  TagTypes extends string,\r\n  ResultType,\r\n  ReducerPath extends string = string\r\n> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> &\r\n  MutationExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>\r\n\r\nexport type EndpointDefinition<\r\n  QueryArg,\r\n  BaseQuery extends BaseQueryFn,\r\n  TagTypes extends string,\r\n  ResultType,\r\n  ReducerPath extends string = string\r\n> =\r\n  | QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\r\n  | MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\r\n\r\nexport type EndpointDefinitions = Record<\r\n  string,\r\n  EndpointDefinition<any, any, any, any>\r\n>\r\n\r\nexport function isQueryDefinition(\r\n  e: EndpointDefinition<any, any, any, any>\r\n): e is QueryDefinition<any, any, any, any> {\r\n  return e.type === DefinitionType.query\r\n}\r\n\r\nexport function isMutationDefinition(\r\n  e: EndpointDefinition<any, any, any, any>\r\n): e is MutationDefinition<any, any, any, any> {\r\n  return e.type === DefinitionType.mutation\r\n}\r\n\r\nexport type EndpointBuilder<\r\n  BaseQuery extends BaseQueryFn,\r\n  TagTypes extends string,\r\n  ReducerPath extends string\r\n> = {\r\n  /**\r\n   * An endpoint definition that retrieves data, and may provide tags to the cache.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // codeblock-meta title=\"Example of all query endpoint options\"\r\n   * const api = createApi({\r\n   *  baseQuery,\r\n   *  endpoints: (build) => ({\r\n   *    getPost: build.query({\r\n   *      query: (id) => ({ url: `post/${id}` }),\r\n   *      // Pick out data and prevent nested properties in a hook or selector\r\n   *      transformResponse: (response) => response.data,\r\n   *      // Pick out error and prevent nested properties in a hook or selector\r\n   *      transformErrorResponse: (response) => response.error,\r\n   *      // `result` is the server response\r\n   *      providesTags: (result, error, id) => [{ type: 'Post', id }],\r\n   *      // trigger side effects or optimistic updates\r\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry, updateCachedData }) {},\r\n   *      // handle subscriptions etc\r\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry, updateCachedData }) {},\r\n   *    }),\r\n   *  }),\r\n   *});\r\n   *```\r\n   */\r\n  query<ResultType, QueryArg>(\r\n    definition: OmitFromUnion<\r\n      QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>,\r\n      'type'\r\n    >\r\n  ): QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\r\n  /**\r\n   * An endpoint definition that alters data on the server or will possibly invalidate the cache.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // codeblock-meta title=\"Example of all mutation endpoint options\"\r\n   * const api = createApi({\r\n   *   baseQuery,\r\n   *   endpoints: (build) => ({\r\n   *     updatePost: build.mutation({\r\n   *       query: ({ id, ...patch }) => ({ url: `post/${id}`, method: 'PATCH', body: patch }),\r\n   *       // Pick out data and prevent nested properties in a hook or selector\r\n   *       transformResponse: (response) => response.data,\r\n   *       // Pick out error and prevent nested properties in a hook or selector\r\n   *       transformErrorResponse: (response) => response.error,\r\n   *       // `result` is the server response\r\n   *       invalidatesTags: (result, error, id) => [{ type: 'Post', id }],\r\n   *      // trigger side effects or optimistic updates\r\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry }) {},\r\n   *      // handle subscriptions etc\r\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry }) {},\r\n   *     }),\r\n   *   }),\r\n   * });\r\n   * ```\r\n   */\r\n  mutation<ResultType, QueryArg>(\r\n    definition: OmitFromUnion<\r\n      MutationDefinition<\r\n        QueryArg,\r\n        BaseQuery,\r\n        TagTypes,\r\n        ResultType,\r\n        ReducerPath\r\n      >,\r\n      'type'\r\n    >\r\n  ): MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\r\n}\r\n\r\nexport type AssertTagTypes = <T extends FullTagDescription<string>>(t: T) => T\r\n\r\nexport function calculateProvidedBy<ResultType, QueryArg, ErrorType, MetaType>(\r\n  description:\r\n    | ResultDescription<string, ResultType, QueryArg, ErrorType, MetaType>\r\n    | undefined,\r\n  result: ResultType | undefined,\r\n  error: ErrorType | undefined,\r\n  queryArg: QueryArg,\r\n  meta: MetaType | undefined,\r\n  assertTagTypes: AssertTagTypes\r\n): readonly FullTagDescription<string>[] {\r\n  if (isFunction(description)) {\r\n    return description(\r\n      result as ResultType,\r\n      error as undefined,\r\n      queryArg,\r\n      meta as MetaType\r\n    )\r\n      .map(expandTagDescription)\r\n      .map(assertTagTypes)\r\n  }\r\n  if (Array.isArray(description)) {\r\n    return description.map(expandTagDescription).map(assertTagTypes)\r\n  }\r\n  return []\r\n}\r\n\r\nfunction isFunction<T>(t: T): t is Extract<T, Function> {\r\n  return typeof t === 'function'\r\n}\r\n\r\nexport function expandTagDescription(\r\n  description: TagDescription<string>\r\n): FullTagDescription<string> {\r\n  return typeof description === 'string' ? { type: description } : description\r\n}\r\n\r\nexport type QueryArgFrom<D extends BaseEndpointDefinition<any, any, any>> =\r\n  D extends BaseEndpointDefinition<infer QA, any, any> ? QA : unknown\r\nexport type ResultTypeFrom<D extends BaseEndpointDefinition<any, any, any>> =\r\n  D extends BaseEndpointDefinition<any, any, infer RT> ? RT : unknown\r\n\r\nexport type ReducerPathFrom<\r\n  D extends EndpointDefinition<any, any, any, any, any>\r\n> = D extends EndpointDefinition<any, any, any, any, infer RP> ? RP : unknown\r\n\r\nexport type TagTypesFrom<D extends EndpointDefinition<any, any, any, any>> =\r\n  D extends EndpointDefinition<any, any, infer RP, any> ? RP : unknown\r\n\r\nexport type ReplaceTagTypes<\r\n  Definitions extends EndpointDefinitions,\r\n  NewTagTypes extends string\r\n> = {\r\n  [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\r\n    infer QueryArg,\r\n    infer BaseQuery,\r\n    any,\r\n    infer ResultType,\r\n    infer ReducerPath\r\n  >\r\n    ? QueryDefinition<QueryArg, BaseQuery, NewTagTypes, ResultType, ReducerPath>\r\n    : Definitions[K] extends MutationDefinition<\r\n        infer QueryArg,\r\n        infer BaseQuery,\r\n        any,\r\n        infer ResultType,\r\n        infer ReducerPath\r\n      >\r\n    ? MutationDefinition<\r\n        QueryArg,\r\n        BaseQuery,\r\n        NewTagTypes,\r\n        ResultType,\r\n        ReducerPath\r\n      >\r\n    : never\r\n}\r\n","import type { AnyAction, PayloadAction } from '@reduxjs/toolkit'\r\nimport {\r\n  combineReducers,\r\n  createAction,\r\n  createSlice,\r\n  isAnyOf,\r\n  isFulfilled,\r\n  isRejectedWithValue,\r\n  createNextState,\r\n  prepareAutoBatched,\r\n} from '@reduxjs/toolkit'\r\nimport type {\r\n  CombinedState as CombinedQueryState,\r\n  QuerySubstateIdentifier,\r\n  QuerySubState,\r\n  MutationSubstateIdentifier,\r\n  MutationSubState,\r\n  MutationState,\r\n  QueryState,\r\n  InvalidationState,\r\n  Subscribers,\r\n  QueryCacheKey,\r\n  SubscriptionState,\r\n  ConfigState,\r\n} from './apiState'\r\nimport { QueryStatus } from './apiState'\r\nimport type { MutationThunk, QueryThunk, RejectedAction } from './buildThunks'\r\nimport { calculateProvidedByThunk } from './buildThunks'\r\nimport type {\r\n  AssertTagTypes,\r\n  EndpointDefinitions,\r\n  QueryDefinition,\r\n} from '../endpointDefinitions'\r\nimport type { Patch } from 'immer'\r\nimport { applyPatches } from 'immer'\r\nimport { onFocus, onFocusLost, onOffline, onOnline } from './setupListeners'\r\nimport {\r\n  isDocumentVisible,\r\n  isOnline,\r\n  copyWithStructuralSharing,\r\n} from '../utils'\r\nimport type { ApiContext } from '../apiTypes'\r\nimport { isUpsertQuery } from './buildInitiate'\r\n\r\nfunction updateQuerySubstateIfExists(\r\n  state: QueryState<any>,\r\n  queryCacheKey: QueryCacheKey,\r\n  update: (substate: QuerySubState<any>) => void\r\n) {\r\n  const substate = state[queryCacheKey]\r\n  if (substate) {\r\n    update(substate)\r\n  }\r\n}\r\n\r\nexport function getMutationCacheKey(\r\n  id:\r\n    | MutationSubstateIdentifier\r\n    | { requestId: string; arg: { fixedCacheKey?: string | undefined } }\r\n): string\r\nexport function getMutationCacheKey(id: {\r\n  fixedCacheKey?: string\r\n  requestId?: string\r\n}): string | undefined\r\n\r\nexport function getMutationCacheKey(\r\n  id:\r\n    | { fixedCacheKey?: string; requestId?: string }\r\n    | MutationSubstateIdentifier\r\n    | { requestId: string; arg: { fixedCacheKey?: string | undefined } }\r\n): string | undefined {\r\n  return ('arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId\r\n}\r\n\r\nfunction updateMutationSubstateIfExists(\r\n  state: MutationState<any>,\r\n  id:\r\n    | MutationSubstateIdentifier\r\n    | { requestId: string; arg: { fixedCacheKey?: string | undefined } },\r\n  update: (substate: MutationSubState<any>) => void\r\n) {\r\n  const substate = state[getMutationCacheKey(id)]\r\n  if (substate) {\r\n    update(substate)\r\n  }\r\n}\r\n\r\nconst initialState = {} as any\r\n\r\nexport function buildSlice({\r\n  reducerPath,\r\n  queryThunk,\r\n  mutationThunk,\r\n  context: {\r\n    endpointDefinitions: definitions,\r\n    apiUid,\r\n    extractRehydrationInfo,\r\n    hasRehydrationInfo,\r\n  },\r\n  assertTagType,\r\n  config,\r\n}: {\r\n  reducerPath: string\r\n  queryThunk: QueryThunk\r\n  mutationThunk: MutationThunk\r\n  context: ApiContext<EndpointDefinitions>\r\n  assertTagType: AssertTagTypes\r\n  config: Omit<\r\n    ConfigState<string>,\r\n    'online' | 'focused' | 'middlewareRegistered'\r\n  >\r\n}) {\r\n  const resetApiState = createAction(`${reducerPath}/resetApiState`)\r\n  const querySlice = createSlice({\r\n    name: `${reducerPath}/queries`,\r\n    initialState: initialState as QueryState<any>,\r\n    reducers: {\r\n      removeQueryResult: {\r\n        reducer(\r\n          draft,\r\n          { payload: { queryCacheKey } }: PayloadAction<QuerySubstateIdentifier>\r\n        ) {\r\n          delete draft[queryCacheKey]\r\n        },\r\n        prepare: prepareAutoBatched<QuerySubstateIdentifier>(),\r\n      },\r\n      queryResultPatched(\r\n        draft,\r\n        {\r\n          payload: { queryCacheKey, patches },\r\n        }: PayloadAction<\r\n          QuerySubstateIdentifier & { patches: readonly Patch[] }\r\n        >\r\n      ) {\r\n        updateQuerySubstateIfExists(draft, queryCacheKey, (substate) => {\r\n          substate.data = applyPatches(substate.data as any, patches.concat())\r\n        })\r\n      },\r\n    },\r\n    extraReducers(builder) {\r\n      builder\r\n        .addCase(queryThunk.pending, (draft, { meta, meta: { arg } }) => {\r\n          const upserting = isUpsertQuery(arg)\r\n          if (arg.subscribe || upserting) {\r\n            // only initialize substate if we want to subscribe to it\r\n            draft[arg.queryCacheKey] ??= {\r\n              status: QueryStatus.uninitialized,\r\n              endpointName: arg.endpointName,\r\n            }\r\n          }\r\n\r\n          updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate) => {\r\n            substate.status = QueryStatus.pending\r\n\r\n            substate.requestId =\r\n              upserting && substate.requestId\r\n                ? // for `upsertQuery` **updates**, keep the current `requestId`\r\n                  substate.requestId\r\n                : // for normal queries or `upsertQuery` **inserts** always update the `requestId`\r\n                  meta.requestId\r\n            if (arg.originalArgs !== undefined) {\r\n              substate.originalArgs = arg.originalArgs\r\n            }\r\n            substate.startedTimeStamp = meta.startedTimeStamp\r\n          })\r\n        })\r\n        .addCase(queryThunk.fulfilled, (draft, { meta, payload }) => {\r\n          updateQuerySubstateIfExists(\r\n            draft,\r\n            meta.arg.queryCacheKey,\r\n            (substate) => {\r\n              if (\r\n                substate.requestId !== meta.requestId &&\r\n                !isUpsertQuery(meta.arg)\r\n              )\r\n                return\r\n              const { merge } = definitions[\r\n                meta.arg.endpointName\r\n              ] as QueryDefinition<any, any, any, any>\r\n              substate.status = QueryStatus.fulfilled\r\n\r\n              if (merge) {\r\n                if (substate.data !== undefined) {\r\n                  // There's existing cache data. Let the user merge it in themselves.\r\n                  // We're already inside an Immer-powered reducer, and the user could just mutate `substate.data`\r\n                  // themselves inside of `merge()`. But, they might also want to return a new value.\r\n                  // Try to let Immer figure that part out, save the result, and assign it to `substate.data`.\r\n                  let newData = createNextState(\r\n                    substate.data,\r\n                    (draftSubstateData) => {\r\n                      // As usual with Immer, you can mutate _or_ return inside here, but not both\r\n                      return merge(draftSubstateData, payload)\r\n                    }\r\n                  )\r\n                  substate.data = newData\r\n                } else {\r\n                  // Presumably a fresh request. Just cache the response data.\r\n                  substate.data = payload\r\n                }\r\n              } else {\r\n                // Assign or safely update the cache data.\r\n                substate.data =\r\n                  definitions[meta.arg.endpointName].structuralSharing ?? true\r\n                    ? copyWithStructuralSharing(substate.data, payload)\r\n                    : payload\r\n              }\r\n\r\n              delete substate.error\r\n              substate.fulfilledTimeStamp = meta.fulfilledTimeStamp\r\n            }\r\n          )\r\n        })\r\n        .addCase(\r\n          queryThunk.rejected,\r\n          (draft, { meta: { condition, arg, requestId }, error, payload }) => {\r\n            updateQuerySubstateIfExists(\r\n              draft,\r\n              arg.queryCacheKey,\r\n              (substate) => {\r\n                if (condition) {\r\n                  // request was aborted due to condition (another query already running)\r\n                } else {\r\n                  // request failed\r\n                  if (substate.requestId !== requestId) return\r\n                  substate.status = QueryStatus.rejected\r\n                  substate.error = (payload ?? error) as any\r\n                }\r\n              }\r\n            )\r\n          }\r\n        )\r\n        .addMatcher(hasRehydrationInfo, (draft, action) => {\r\n          const { queries } = extractRehydrationInfo(action)!\r\n          for (const [key, entry] of Object.entries(queries)) {\r\n            if (\r\n              // do not rehydrate entries that were currently in flight.\r\n              entry?.status === QueryStatus.fulfilled ||\r\n              entry?.status === QueryStatus.rejected\r\n            ) {\r\n              draft[key] = entry\r\n            }\r\n          }\r\n        })\r\n    },\r\n  })\r\n  const mutationSlice = createSlice({\r\n    name: `${reducerPath}/mutations`,\r\n    initialState: initialState as MutationState<any>,\r\n    reducers: {\r\n      removeMutationResult: {\r\n        reducer(draft, { payload }: PayloadAction<MutationSubstateIdentifier>) {\r\n          const cacheKey = getMutationCacheKey(payload)\r\n          if (cacheKey in draft) {\r\n            delete draft[cacheKey]\r\n          }\r\n        },\r\n        prepare: prepareAutoBatched<MutationSubstateIdentifier>(),\r\n      },\r\n    },\r\n    extraReducers(builder) {\r\n      builder\r\n        .addCase(\r\n          mutationThunk.pending,\r\n          (draft, { meta, meta: { requestId, arg, startedTimeStamp } }) => {\r\n            if (!arg.track) return\r\n\r\n            draft[getMutationCacheKey(meta)] = {\r\n              requestId,\r\n              status: QueryStatus.pending,\r\n              endpointName: arg.endpointName,\r\n              startedTimeStamp,\r\n            }\r\n          }\r\n        )\r\n        .addCase(mutationThunk.fulfilled, (draft, { payload, meta }) => {\r\n          if (!meta.arg.track) return\r\n\r\n          updateMutationSubstateIfExists(draft, meta, (substate) => {\r\n            if (substate.requestId !== meta.requestId) return\r\n            substate.status = QueryStatus.fulfilled\r\n            substate.data = payload\r\n            substate.fulfilledTimeStamp = meta.fulfilledTimeStamp\r\n          })\r\n        })\r\n        .addCase(mutationThunk.rejected, (draft, { payload, error, meta }) => {\r\n          if (!meta.arg.track) return\r\n\r\n          updateMutationSubstateIfExists(draft, meta, (substate) => {\r\n            if (substate.requestId !== meta.requestId) return\r\n\r\n            substate.status = QueryStatus.rejected\r\n            substate.error = (payload ?? error) as any\r\n          })\r\n        })\r\n        .addMatcher(hasRehydrationInfo, (draft, action) => {\r\n          const { mutations } = extractRehydrationInfo(action)!\r\n          for (const [key, entry] of Object.entries(mutations)) {\r\n            if (\r\n              // do not rehydrate entries that were currently in flight.\r\n              (entry?.status === QueryStatus.fulfilled ||\r\n                entry?.status === QueryStatus.rejected) &&\r\n              // only rehydrate endpoints that were persisted using a `fixedCacheKey`\r\n              key !== entry?.requestId\r\n            ) {\r\n              draft[key] = entry\r\n            }\r\n          }\r\n        })\r\n    },\r\n  })\r\n\r\n  const invalidationSlice = createSlice({\r\n    name: `${reducerPath}/invalidation`,\r\n    initialState: initialState as InvalidationState<string>,\r\n    reducers: {},\r\n    extraReducers(builder) {\r\n      builder\r\n        .addCase(\r\n          querySlice.actions.removeQueryResult,\r\n          (draft, { payload: { queryCacheKey } }) => {\r\n            for (const tagTypeSubscriptions of Object.values(draft)) {\r\n              for (const idSubscriptions of Object.values(\r\n                tagTypeSubscriptions\r\n              )) {\r\n                const foundAt = idSubscriptions.indexOf(queryCacheKey)\r\n                if (foundAt !== -1) {\r\n                  idSubscriptions.splice(foundAt, 1)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        )\r\n        .addMatcher(hasRehydrationInfo, (draft, action) => {\r\n          const { provided } = extractRehydrationInfo(action)!\r\n          for (const [type, incomingTags] of Object.entries(provided)) {\r\n            for (const [id, cacheKeys] of Object.entries(incomingTags)) {\r\n              const subscribedQueries = ((draft[type] ??= {})[\r\n                id || '__internal_without_id'\r\n              ] ??= [])\r\n              for (const queryCacheKey of cacheKeys) {\r\n                const alreadySubscribed =\r\n                  subscribedQueries.includes(queryCacheKey)\r\n                if (!alreadySubscribed) {\r\n                  subscribedQueries.push(queryCacheKey)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n        .addMatcher(\r\n          isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)),\r\n          (draft, action) => {\r\n            const providedTags = calculateProvidedByThunk(\r\n              action,\r\n              'providesTags',\r\n              definitions,\r\n              assertTagType\r\n            )\r\n            const { queryCacheKey } = action.meta.arg\r\n\r\n            for (const tagTypeSubscriptions of Object.values(draft)) {\r\n              for (const idSubscriptions of Object.values(\r\n                tagTypeSubscriptions\r\n              )) {\r\n                const foundAt = idSubscriptions.indexOf(queryCacheKey)\r\n                if (foundAt !== -1) {\r\n                  idSubscriptions.splice(foundAt, 1)\r\n                }\r\n              }\r\n            }\r\n\r\n            for (const { type, id } of providedTags) {\r\n              const subscribedQueries = ((draft[type] ??= {})[\r\n                id || '__internal_without_id'\r\n              ] ??= [])\r\n              const alreadySubscribed =\r\n                subscribedQueries.includes(queryCacheKey)\r\n              if (!alreadySubscribed) {\r\n                subscribedQueries.push(queryCacheKey)\r\n              }\r\n            }\r\n          }\r\n        )\r\n    },\r\n  })\r\n\r\n  // Dummy slice to generate actions\r\n  const subscriptionSlice = createSlice({\r\n    name: `${reducerPath}/subscriptions`,\r\n    initialState: initialState as SubscriptionState,\r\n    reducers: {\r\n      updateSubscriptionOptions(\r\n        d,\r\n        a: PayloadAction<\r\n          {\r\n            endpointName: string\r\n            requestId: string\r\n            options: Subscribers[number]\r\n          } & QuerySubstateIdentifier\r\n        >\r\n      ) {\r\n        // Dummy\r\n      },\r\n      unsubscribeQueryResult(\r\n        d,\r\n        a: PayloadAction<{ requestId: string } & QuerySubstateIdentifier>\r\n      ) {\r\n        // Dummy\r\n      },\r\n      internal_probeSubscription(\r\n        d,\r\n        a: PayloadAction<{ queryCacheKey: string; requestId: string }>\r\n      ) {\r\n        // dummy\r\n      },\r\n    },\r\n  })\r\n\r\n  const internalSubscriptionsSlice = createSlice({\r\n    name: `${reducerPath}/internalSubscriptions`,\r\n    initialState: initialState as SubscriptionState,\r\n    reducers: {\r\n      subscriptionsUpdated(state, action: PayloadAction<Patch[]>) {\r\n        return applyPatches(state, action.payload)\r\n      },\r\n    },\r\n  })\r\n\r\n  const configSlice = createSlice({\r\n    name: `${reducerPath}/config`,\r\n    initialState: {\r\n      online: isOnline(),\r\n      focused: isDocumentVisible(),\r\n      middlewareRegistered: false,\r\n      ...config,\r\n    } as ConfigState<string>,\r\n    reducers: {\r\n      middlewareRegistered(state, { payload }: PayloadAction<string>) {\r\n        state.middlewareRegistered =\r\n          state.middlewareRegistered === 'conflict' || apiUid !== payload\r\n            ? 'conflict'\r\n            : true\r\n      },\r\n    },\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(onOnline, (state) => {\r\n          state.online = true\r\n        })\r\n        .addCase(onOffline, (state) => {\r\n          state.online = false\r\n        })\r\n        .addCase(onFocus, (state) => {\r\n          state.focused = true\r\n        })\r\n        .addCase(onFocusLost, (state) => {\r\n          state.focused = false\r\n        })\r\n        // update the state to be a new object to be picked up as a \"state change\"\r\n        // by redux-persist's `autoMergeLevel2`\r\n        .addMatcher(hasRehydrationInfo, (draft) => ({ ...draft }))\r\n    },\r\n  })\r\n\r\n  const combinedReducer = combineReducers<\r\n    CombinedQueryState<any, string, string>\r\n  >({\r\n    queries: querySlice.reducer,\r\n    mutations: mutationSlice.reducer,\r\n    provided: invalidationSlice.reducer,\r\n    subscriptions: internalSubscriptionsSlice.reducer,\r\n    config: configSlice.reducer,\r\n  })\r\n\r\n  const reducer: typeof combinedReducer = (state, action) =>\r\n    combinedReducer(resetApiState.match(action) ? undefined : state, action)\r\n\r\n  const actions = {\r\n    ...configSlice.actions,\r\n    ...querySlice.actions,\r\n    ...subscriptionSlice.actions,\r\n    ...internalSubscriptionsSlice.actions,\r\n    ...mutationSlice.actions,\r\n    /** @deprecated has been renamed to `removeMutationResult` */\r\n    unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\r\n    resetApiState,\r\n  }\r\n\r\n  return { reducer, actions }\r\n}\r\nexport type SliceActions = ReturnType<typeof buildSlice>['actions']\r\n","export function isNotNullish<T>(v: T | null | undefined): v is T {\r\n  return v != null\r\n}\r\n","import type {\r\n  EndpointDefinitions,\r\n  QueryDefinition,\r\n  MutationDefinition,\r\n  QueryArgFrom,\r\n  ResultTypeFrom,\r\n} from '../endpointDefinitions'\r\nimport { DefinitionType, isQueryDefinition } from '../endpointDefinitions'\r\nimport type { QueryThunk, MutationThunk, QueryThunkArg } from './buildThunks'\r\nimport type { AnyAction, ThunkAction, SerializedError } from '@reduxjs/toolkit'\r\nimport type { SubscriptionOptions, RootState } from './apiState'\r\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\r\nimport type { Api, ApiContext } from '../apiTypes'\r\nimport type { ApiEndpointQuery } from './module'\r\nimport type { BaseQueryError, QueryReturnValue } from '../baseQueryTypes'\r\nimport type { QueryResultSelectorResult } from './buildSelectors'\r\nimport type { Dispatch } from 'redux'\r\nimport { isNotNullish } from '../utils/isNotNullish'\r\n\r\ndeclare module './module' {\r\n  export interface ApiEndpointQuery<\r\n    Definition extends QueryDefinition<any, any, any, any, any>,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    Definitions extends EndpointDefinitions\r\n  > {\r\n    initiate: StartQueryActionCreator<Definition>\r\n  }\r\n\r\n  export interface ApiEndpointMutation<\r\n    Definition extends MutationDefinition<any, any, any, any, any>,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    Definitions extends EndpointDefinitions\r\n  > {\r\n    initiate: StartMutationActionCreator<Definition>\r\n  }\r\n}\r\n\r\nexport const forceQueryFnSymbol = Symbol('forceQueryFn')\r\nexport const isUpsertQuery = (arg: QueryThunkArg) =>\r\n  typeof arg[forceQueryFnSymbol] === 'function'\r\n\r\nexport interface StartQueryActionCreatorOptions {\r\n  subscribe?: boolean\r\n  forceRefetch?: boolean | number\r\n  subscriptionOptions?: SubscriptionOptions\r\n  [forceQueryFnSymbol]?: () => QueryReturnValue\r\n}\r\n\r\ntype StartQueryActionCreator<\r\n  D extends QueryDefinition<any, any, any, any, any>\r\n> = (\r\n  arg: QueryArgFrom<D>,\r\n  options?: StartQueryActionCreatorOptions\r\n) => ThunkAction<QueryActionCreatorResult<D>, any, any, AnyAction>\r\n\r\nexport type QueryActionCreatorResult<\r\n  D extends QueryDefinition<any, any, any, any>\r\n> = Promise<QueryResultSelectorResult<D>> & {\r\n  arg: QueryArgFrom<D>\r\n  requestId: string\r\n  subscriptionOptions: SubscriptionOptions | undefined\r\n  abort(): void\r\n  unwrap(): Promise<ResultTypeFrom<D>>\r\n  unsubscribe(): void\r\n  refetch(): QueryActionCreatorResult<D>\r\n  updateSubscriptionOptions(options: SubscriptionOptions): void\r\n  queryCacheKey: string\r\n}\r\n\r\ntype StartMutationActionCreator<\r\n  D extends MutationDefinition<any, any, any, any>\r\n> = (\r\n  arg: QueryArgFrom<D>,\r\n  options?: {\r\n    /**\r\n     * If this mutation should be tracked in the store.\r\n     * If you just want to manually trigger this mutation using `dispatch` and don't care about the\r\n     * result, state & potential errors being held in store, you can set this to false.\r\n     * (defaults to `true`)\r\n     */\r\n    track?: boolean\r\n    fixedCacheKey?: string\r\n  }\r\n) => ThunkAction<MutationActionCreatorResult<D>, any, any, AnyAction>\r\n\r\nexport type MutationActionCreatorResult<\r\n  D extends MutationDefinition<any, any, any, any>\r\n> = Promise<\r\n  | { data: ResultTypeFrom<D> }\r\n  | {\r\n      error:\r\n        | Exclude<\r\n            BaseQueryError<\r\n              D extends MutationDefinition<any, infer BaseQuery, any, any>\r\n                ? BaseQuery\r\n                : never\r\n            >,\r\n            undefined\r\n          >\r\n        | SerializedError\r\n    }\r\n> & {\r\n  /** @internal */\r\n  arg: {\r\n    /**\r\n     * The name of the given endpoint for the mutation\r\n     */\r\n    endpointName: string\r\n    /**\r\n     * The original arguments supplied to the mutation call\r\n     */\r\n    originalArgs: QueryArgFrom<D>\r\n    /**\r\n     * Whether the mutation is being tracked in the store.\r\n     */\r\n    track?: boolean\r\n    fixedCacheKey?: string\r\n  }\r\n  /**\r\n   * A unique string generated for the request sequence\r\n   */\r\n  requestId: string\r\n\r\n  /**\r\n   * A method to cancel the mutation promise. Note that this is not intended to prevent the mutation\r\n   * that was fired off from reaching the server, but only to assist in handling the response.\r\n   *\r\n   * Calling `abort()` prior to the promise resolving will force it to reach the error state with\r\n   * the serialized error:\r\n   * `{ name: 'AbortError', message: 'Aborted' }`\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const [updateUser] = useUpdateUserMutation();\r\n   *\r\n   * useEffect(() => {\r\n   *   const promise = updateUser(id);\r\n   *   promise\r\n   *     .unwrap()\r\n   *     .catch((err) => {\r\n   *       if (err.name === 'AbortError') return;\r\n   *       // else handle the unexpected error\r\n   *     })\r\n   *\r\n   *   return () => {\r\n   *     promise.abort();\r\n   *   }\r\n   * }, [id, updateUser])\r\n   * ```\r\n   */\r\n  abort(): void\r\n  /**\r\n   * Unwraps a mutation call to provide the raw response/error.\r\n   *\r\n   * @remarks\r\n   * If you need to access the error or success payload immediately after a mutation, you can chain .unwrap().\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // codeblock-meta title=\"Using .unwrap\"\r\n   * addPost({ id: 1, name: 'Example' })\r\n   *   .unwrap()\r\n   *   .then((payload) => console.log('fulfilled', payload))\r\n   *   .catch((error) => console.error('rejected', error));\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // codeblock-meta title=\"Using .unwrap with async await\"\r\n   * try {\r\n   *   const payload = await addPost({ id: 1, name: 'Example' }).unwrap();\r\n   *   console.log('fulfilled', payload)\r\n   * } catch (error) {\r\n   *   console.error('rejected', error);\r\n   * }\r\n   * ```\r\n   */\r\n  unwrap(): Promise<ResultTypeFrom<D>>\r\n  /**\r\n   * A method to manually unsubscribe from the mutation call, meaning it will be removed from cache after the usual caching grace period.\r\n   The value returned by the hook will reset to `isUninitialized` afterwards.\r\n   */\r\n  reset(): void\r\n  /** @deprecated has been renamed to `reset` */\r\n  unsubscribe(): void\r\n}\r\n\r\nexport function buildInitiate({\r\n  serializeQueryArgs,\r\n  queryThunk,\r\n  mutationThunk,\r\n  api,\r\n  context,\r\n}: {\r\n  serializeQueryArgs: InternalSerializeQueryArgs\r\n  queryThunk: QueryThunk\r\n  mutationThunk: MutationThunk\r\n  api: Api<any, EndpointDefinitions, any, any>\r\n  context: ApiContext<EndpointDefinitions>\r\n}) {\r\n  const runningQueries: Map<\r\n    Dispatch,\r\n    Record<string, QueryActionCreatorResult<any> | undefined>\r\n  > = new Map()\r\n  const runningMutations: Map<\r\n    Dispatch,\r\n    Record<string, MutationActionCreatorResult<any> | undefined>\r\n  > = new Map()\r\n\r\n  const {\r\n    unsubscribeQueryResult,\r\n    removeMutationResult,\r\n    updateSubscriptionOptions,\r\n  } = api.internalActions\r\n  return {\r\n    buildInitiateQuery,\r\n    buildInitiateMutation,\r\n    getRunningQueryThunk,\r\n    getRunningMutationThunk,\r\n    getRunningQueriesThunk,\r\n    getRunningMutationsThunk,\r\n    getRunningOperationPromises,\r\n    removalWarning,\r\n  }\r\n\r\n  /** @deprecated to be removed in 2.0 */\r\n  function removalWarning(): never {\r\n    throw new Error(\r\n      `This method had to be removed due to a conceptual bug in RTK.\r\n       Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\r\n       See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for new guidance on SSR.`\r\n    )\r\n  }\r\n\r\n  /** @deprecated to be removed in 2.0 */\r\n  function getRunningOperationPromises() {\r\n    if (\r\n      typeof process !== 'undefined' &&\r\n      process.env.NODE_ENV === 'development'\r\n    ) {\r\n      removalWarning()\r\n    } else {\r\n      const extract = <T>(\r\n        v: Map<Dispatch<AnyAction>, Record<string, T | undefined>>\r\n      ) =>\r\n        Array.from(v.values()).flatMap((queriesForStore) =>\r\n          queriesForStore ? Object.values(queriesForStore) : []\r\n        )\r\n      return [...extract(runningQueries), ...extract(runningMutations)].filter(\r\n        isNotNullish\r\n      )\r\n    }\r\n  }\r\n\r\n  function getRunningQueryThunk(endpointName: string, queryArgs: any) {\r\n    return (dispatch: Dispatch) => {\r\n      const endpointDefinition = context.endpointDefinitions[endpointName]\r\n      const queryCacheKey = serializeQueryArgs({\r\n        queryArgs,\r\n        endpointDefinition,\r\n        endpointName,\r\n      })\r\n      return runningQueries.get(dispatch)?.[queryCacheKey] as\r\n        | QueryActionCreatorResult<never>\r\n        | undefined\r\n    }\r\n  }\r\n\r\n  function getRunningMutationThunk(\r\n    /**\r\n     * this is only here to allow TS to infer the result type by input value\r\n     * we could use it to validate the result, but it's probably not necessary\r\n     */\r\n    _endpointName: string,\r\n    fixedCacheKeyOrRequestId: string\r\n  ) {\r\n    return (dispatch: Dispatch) => {\r\n      return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId] as\r\n        | MutationActionCreatorResult<never>\r\n        | undefined\r\n    }\r\n  }\r\n\r\n  function getRunningQueriesThunk() {\r\n    return (dispatch: Dispatch) =>\r\n      Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish)\r\n  }\r\n\r\n  function getRunningMutationsThunk() {\r\n    return (dispatch: Dispatch) =>\r\n      Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish)\r\n  }\r\n\r\n  function middlewareWarning(dispatch: Dispatch) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if ((middlewareWarning as any).triggered) return\r\n      const registered:\r\n        | ReturnType<typeof api.internalActions.internal_probeSubscription>\r\n        | boolean = dispatch(\r\n        api.internalActions.internal_probeSubscription({\r\n          queryCacheKey: 'DOES_NOT_EXIST',\r\n          requestId: 'DUMMY_REQUEST_ID',\r\n        })\r\n      )\r\n\r\n      ;(middlewareWarning as any).triggered = true\r\n\r\n      // The RTKQ middleware _should_ always return a boolean for `probeSubscription`\r\n      if (typeof registered !== 'boolean') {\r\n        // Otherwise, must not have been added\r\n        throw new Error(\r\n          `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\r\nYou must add the middleware for RTK-Query to function correctly!`\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  function buildInitiateQuery(\r\n    endpointName: string,\r\n    endpointDefinition: QueryDefinition<any, any, any, any>\r\n  ) {\r\n    const queryAction: StartQueryActionCreator<any> =\r\n      (\r\n        arg,\r\n        {\r\n          subscribe = true,\r\n          forceRefetch,\r\n          subscriptionOptions,\r\n          [forceQueryFnSymbol]: forceQueryFn,\r\n        } = {}\r\n      ) =>\r\n      (dispatch, getState) => {\r\n        const queryCacheKey = serializeQueryArgs({\r\n          queryArgs: arg,\r\n          endpointDefinition,\r\n          endpointName,\r\n        })\r\n\r\n        const thunk = queryThunk({\r\n          type: 'query',\r\n          subscribe,\r\n          forceRefetch: forceRefetch,\r\n          subscriptionOptions,\r\n          endpointName,\r\n          originalArgs: arg,\r\n          queryCacheKey,\r\n          [forceQueryFnSymbol]: forceQueryFn,\r\n        })\r\n        const selector = (\r\n          api.endpoints[endpointName] as ApiEndpointQuery<any, any>\r\n        ).select(arg)\r\n\r\n        const thunkResult = dispatch(thunk)\r\n        const stateAfter = selector(getState())\r\n\r\n        middlewareWarning(dispatch)\r\n\r\n        const { requestId, abort } = thunkResult\r\n\r\n        const skippedSynchronously = stateAfter.requestId !== requestId\r\n\r\n        const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey]\r\n        const selectFromState = () => selector(getState())\r\n\r\n        const statePromise: QueryActionCreatorResult<any> = Object.assign(\r\n          forceQueryFn\r\n            ? // a query has been forced (upsertQueryData)\r\n              // -> we want to resolve it once data has been written with the data that will be written\r\n              thunkResult.then(selectFromState)\r\n            : skippedSynchronously && !runningQuery\r\n            ? // a query has been skipped due to a condition and we do not have any currently running query\r\n              // -> we want to resolve it immediately with the current data\r\n              Promise.resolve(stateAfter)\r\n            : // query just started or one is already in flight\r\n              // -> wait for the running query, then resolve with data from after that\r\n              Promise.all([runningQuery, thunkResult]).then(selectFromState),\r\n          {\r\n            arg,\r\n            requestId,\r\n            subscriptionOptions,\r\n            queryCacheKey,\r\n            abort,\r\n            async unwrap() {\r\n              const result = await statePromise\r\n\r\n              if (result.isError) {\r\n                throw result.error\r\n              }\r\n\r\n              return result.data\r\n            },\r\n            refetch: () =>\r\n              dispatch(\r\n                queryAction(arg, { subscribe: false, forceRefetch: true })\r\n              ),\r\n            unsubscribe() {\r\n              if (subscribe)\r\n                dispatch(\r\n                  unsubscribeQueryResult({\r\n                    queryCacheKey,\r\n                    requestId,\r\n                  })\r\n                )\r\n            },\r\n            updateSubscriptionOptions(options: SubscriptionOptions) {\r\n              statePromise.subscriptionOptions = options\r\n              dispatch(\r\n                updateSubscriptionOptions({\r\n                  endpointName,\r\n                  requestId,\r\n                  queryCacheKey,\r\n                  options,\r\n                })\r\n              )\r\n            },\r\n          }\r\n        )\r\n\r\n        if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\r\n          const running = runningQueries.get(dispatch) || {}\r\n          running[queryCacheKey] = statePromise\r\n          runningQueries.set(dispatch, running)\r\n\r\n          statePromise.then(() => {\r\n            delete running[queryCacheKey]\r\n            if (!Object.keys(running).length) {\r\n              runningQueries.delete(dispatch)\r\n            }\r\n          })\r\n        }\r\n\r\n        return statePromise\r\n      }\r\n    return queryAction\r\n  }\r\n\r\n  function buildInitiateMutation(\r\n    endpointName: string\r\n  ): StartMutationActionCreator<any> {\r\n    return (arg, { track = true, fixedCacheKey } = {}) =>\r\n      (dispatch, getState) => {\r\n        const thunk = mutationThunk({\r\n          type: 'mutation',\r\n          endpointName,\r\n          originalArgs: arg,\r\n          track,\r\n          fixedCacheKey,\r\n        })\r\n        const thunkResult = dispatch(thunk)\r\n        middlewareWarning(dispatch)\r\n        const { requestId, abort, unwrap } = thunkResult\r\n        const returnValuePromise = thunkResult\r\n          .unwrap()\r\n          .then((data) => ({ data }))\r\n          .catch((error) => ({ error }))\r\n\r\n        const reset = () => {\r\n          dispatch(removeMutationResult({ requestId, fixedCacheKey }))\r\n        }\r\n\r\n        const ret = Object.assign(returnValuePromise, {\r\n          arg: thunkResult.arg,\r\n          requestId,\r\n          abort,\r\n          unwrap,\r\n          unsubscribe: reset,\r\n          reset,\r\n        })\r\n\r\n        const running = runningMutations.get(dispatch) || {}\r\n        runningMutations.set(dispatch, running)\r\n        running[requestId] = ret\r\n        ret.then(() => {\r\n          delete running[requestId]\r\n          if (!Object.keys(running).length) {\r\n            runningMutations.delete(dispatch)\r\n          }\r\n        })\r\n        if (fixedCacheKey) {\r\n          running[fixedCacheKey] = ret\r\n          ret.then(() => {\r\n            if (running[fixedCacheKey] === ret) {\r\n              delete running[fixedCacheKey]\r\n              if (!Object.keys(running).length) {\r\n                runningMutations.delete(dispatch)\r\n              }\r\n            }\r\n          })\r\n        }\r\n\r\n        return ret\r\n      }\r\n  }\r\n}\r\n","import type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\r\nimport type { Api, ApiContext } from '../apiTypes'\r\nimport type {\r\n  BaseQueryFn,\r\n  BaseQueryError,\r\n  QueryReturnValue,\r\n} from '../baseQueryTypes'\r\nimport type { RootState, QueryKeys, QuerySubstateIdentifier } from './apiState'\r\nimport { QueryStatus } from './apiState'\r\nimport type {\r\n  StartQueryActionCreatorOptions,\r\n  QueryActionCreatorResult,\r\n} from './buildInitiate'\r\nimport { forceQueryFnSymbol, isUpsertQuery } from './buildInitiate'\r\nimport {\r\n  AssertTagTypes,\r\n  EndpointDefinition,\r\n  EndpointDefinitions,\r\n  isQueryDefinition,\r\n  MutationDefinition,\r\n  QueryArgFrom,\r\n  QueryDefinition,\r\n  ResultTypeFrom,\r\n} from '../endpointDefinitions'\r\nimport { calculateProvidedBy } from '../endpointDefinitions'\r\nimport type { AsyncThunkPayloadCreator, Draft } from '@reduxjs/toolkit'\r\nimport {\r\n  isAllOf,\r\n  isFulfilled,\r\n  isPending,\r\n  isRejected,\r\n  isRejectedWithValue,\r\n} from '@reduxjs/toolkit'\r\nimport type { Patch } from 'immer'\r\nimport { isDraftable, produceWithPatches } from 'immer'\r\nimport type {\r\n  AnyAction,\r\n  ThunkAction,\r\n  ThunkDispatch,\r\n  AsyncThunk,\r\n} from '@reduxjs/toolkit'\r\nimport { createAsyncThunk, SHOULD_AUTOBATCH } from '@reduxjs/toolkit'\r\n\r\nimport { HandledError } from '../HandledError'\r\n\r\nimport type { ApiEndpointQuery, PrefetchOptions } from './module'\r\nimport type { UnwrapPromise } from '../tsHelpers'\r\n\r\ndeclare module './module' {\r\n  export interface ApiEndpointQuery<\r\n    Definition extends QueryDefinition<any, any, any, any, any>,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    Definitions extends EndpointDefinitions\r\n  > extends Matchers<QueryThunk, Definition> {}\r\n\r\n  export interface ApiEndpointMutation<\r\n    Definition extends MutationDefinition<any, any, any, any, any>,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    Definitions extends EndpointDefinitions\r\n  > extends Matchers<MutationThunk, Definition> {}\r\n}\r\n\r\ntype EndpointThunk<\r\n  Thunk extends QueryThunk | MutationThunk,\r\n  Definition extends EndpointDefinition<any, any, any, any>\r\n> = Definition extends EndpointDefinition<\r\n  infer QueryArg,\r\n  infer BaseQueryFn,\r\n  any,\r\n  infer ResultType\r\n>\r\n  ? Thunk extends AsyncThunk<unknown, infer ATArg, infer ATConfig>\r\n    ? AsyncThunk<\r\n        ResultType,\r\n        ATArg & { originalArgs: QueryArg },\r\n        ATConfig & { rejectValue: BaseQueryError<BaseQueryFn> }\r\n      >\r\n    : never\r\n  : never\r\n\r\nexport type PendingAction<\r\n  Thunk extends QueryThunk | MutationThunk,\r\n  Definition extends EndpointDefinition<any, any, any, any>\r\n> = ReturnType<EndpointThunk<Thunk, Definition>['pending']>\r\n\r\nexport type FulfilledAction<\r\n  Thunk extends QueryThunk | MutationThunk,\r\n  Definition extends EndpointDefinition<any, any, any, any>\r\n> = ReturnType<EndpointThunk<Thunk, Definition>['fulfilled']>\r\n\r\nexport type RejectedAction<\r\n  Thunk extends QueryThunk | MutationThunk,\r\n  Definition extends EndpointDefinition<any, any, any, any>\r\n> = ReturnType<EndpointThunk<Thunk, Definition>['rejected']>\r\n\r\nexport type Matcher<M> = (value: any) => value is M\r\n\r\nexport interface Matchers<\r\n  Thunk extends QueryThunk | MutationThunk,\r\n  Definition extends EndpointDefinition<any, any, any, any>\r\n> {\r\n  matchPending: Matcher<PendingAction<Thunk, Definition>>\r\n  matchFulfilled: Matcher<FulfilledAction<Thunk, Definition>>\r\n  matchRejected: Matcher<RejectedAction<Thunk, Definition>>\r\n}\r\n\r\nexport interface QueryThunkArg\r\n  extends QuerySubstateIdentifier,\r\n    StartQueryActionCreatorOptions {\r\n  type: 'query'\r\n  originalArgs: unknown\r\n  endpointName: string\r\n}\r\n\r\nexport interface MutationThunkArg {\r\n  type: 'mutation'\r\n  originalArgs: unknown\r\n  endpointName: string\r\n  track?: boolean\r\n  fixedCacheKey?: string\r\n}\r\n\r\nexport type ThunkResult = unknown\r\n\r\nexport type ThunkApiMetaConfig = {\r\n  pendingMeta: {\r\n    startedTimeStamp: number\r\n    [SHOULD_AUTOBATCH]: true\r\n  }\r\n  fulfilledMeta: {\r\n    fulfilledTimeStamp: number\r\n    baseQueryMeta: unknown\r\n    [SHOULD_AUTOBATCH]: true\r\n  }\r\n  rejectedMeta: {\r\n    baseQueryMeta: unknown\r\n    [SHOULD_AUTOBATCH]: true\r\n  }\r\n}\r\nexport type QueryThunk = AsyncThunk<\r\n  ThunkResult,\r\n  QueryThunkArg,\r\n  ThunkApiMetaConfig\r\n>\r\nexport type MutationThunk = AsyncThunk<\r\n  ThunkResult,\r\n  MutationThunkArg,\r\n  ThunkApiMetaConfig\r\n>\r\n\r\nfunction defaultTransformResponse(baseQueryReturnValue: unknown) {\r\n  return baseQueryReturnValue\r\n}\r\n\r\nexport type MaybeDrafted<T> = T | Draft<T>\r\nexport type Recipe<T> = (data: MaybeDrafted<T>) => void | MaybeDrafted<T>\r\nexport type UpsertRecipe<T> = (\r\n  data: MaybeDrafted<T> | undefined\r\n) => void | MaybeDrafted<T>\r\n\r\nexport type PatchQueryDataThunk<\r\n  Definitions extends EndpointDefinitions,\r\n  PartialState\r\n> = <EndpointName extends QueryKeys<Definitions>>(\r\n  endpointName: EndpointName,\r\n  args: QueryArgFrom<Definitions[EndpointName]>,\r\n  patches: readonly Patch[]\r\n) => ThunkAction<void, PartialState, any, AnyAction>\r\n\r\nexport type UpdateQueryDataThunk<\r\n  Definitions extends EndpointDefinitions,\r\n  PartialState\r\n> = <EndpointName extends QueryKeys<Definitions>>(\r\n  endpointName: EndpointName,\r\n  args: QueryArgFrom<Definitions[EndpointName]>,\r\n  updateRecipe: Recipe<ResultTypeFrom<Definitions[EndpointName]>>\r\n) => ThunkAction<PatchCollection, PartialState, any, AnyAction>\r\n\r\nexport type UpsertQueryDataThunk<\r\n  Definitions extends EndpointDefinitions,\r\n  PartialState\r\n> = <EndpointName extends QueryKeys<Definitions>>(\r\n  endpointName: EndpointName,\r\n  args: QueryArgFrom<Definitions[EndpointName]>,\r\n  value: ResultTypeFrom<Definitions[EndpointName]>\r\n) => ThunkAction<\r\n  QueryActionCreatorResult<\r\n    Definitions[EndpointName] extends QueryDefinition<any, any, any, any>\r\n      ? Definitions[EndpointName]\r\n      : never\r\n  >,\r\n  PartialState,\r\n  any,\r\n  AnyAction\r\n>\r\n\r\n/**\r\n * An object returned from dispatching a `api.util.updateQueryData` call.\r\n */\r\nexport type PatchCollection = {\r\n  /**\r\n   * An `immer` Patch describing the cache update.\r\n   */\r\n  patches: Patch[]\r\n  /**\r\n   * An `immer` Patch to revert the cache update.\r\n   */\r\n  inversePatches: Patch[]\r\n  /**\r\n   * A function that will undo the cache update.\r\n   */\r\n  undo: () => void\r\n}\r\n\r\nexport function buildThunks<\r\n  BaseQuery extends BaseQueryFn,\r\n  ReducerPath extends string,\r\n  Definitions extends EndpointDefinitions\r\n>({\r\n  reducerPath,\r\n  baseQuery,\r\n  context: { endpointDefinitions },\r\n  serializeQueryArgs,\r\n  api,\r\n}: {\r\n  baseQuery: BaseQuery\r\n  reducerPath: ReducerPath\r\n  context: ApiContext<Definitions>\r\n  serializeQueryArgs: InternalSerializeQueryArgs\r\n  api: Api<BaseQuery, Definitions, ReducerPath, any>\r\n}) {\r\n  type State = RootState<any, string, ReducerPath>\r\n\r\n  const patchQueryData: PatchQueryDataThunk<EndpointDefinitions, State> =\r\n    (endpointName, args, patches) => (dispatch) => {\r\n      const endpointDefinition = endpointDefinitions[endpointName]\r\n      dispatch(\r\n        api.internalActions.queryResultPatched({\r\n          queryCacheKey: serializeQueryArgs({\r\n            queryArgs: args,\r\n            endpointDefinition,\r\n            endpointName,\r\n          }),\r\n          patches,\r\n        })\r\n      )\r\n    }\r\n\r\n  const updateQueryData: UpdateQueryDataThunk<EndpointDefinitions, State> =\r\n    (endpointName, args, updateRecipe) => (dispatch, getState) => {\r\n      const currentState = (\r\n        api.endpoints[endpointName] as ApiEndpointQuery<any, any>\r\n      ).select(args)(getState())\r\n      let ret: PatchCollection = {\r\n        patches: [],\r\n        inversePatches: [],\r\n        undo: () =>\r\n          dispatch(\r\n            api.util.patchQueryData(endpointName, args, ret.inversePatches)\r\n          ),\r\n      }\r\n      if (currentState.status === QueryStatus.uninitialized) {\r\n        return ret\r\n      }\r\n      if ('data' in currentState) {\r\n        if (isDraftable(currentState.data)) {\r\n          const [, patches, inversePatches] = produceWithPatches(\r\n            currentState.data,\r\n            updateRecipe\r\n          )\r\n          ret.patches.push(...patches)\r\n          ret.inversePatches.push(...inversePatches)\r\n        } else {\r\n          const value = updateRecipe(currentState.data)\r\n          ret.patches.push({ op: 'replace', path: [], value })\r\n          ret.inversePatches.push({\r\n            op: 'replace',\r\n            path: [],\r\n            value: currentState.data,\r\n          })\r\n        }\r\n      }\r\n\r\n      dispatch(api.util.patchQueryData(endpointName, args, ret.patches))\r\n\r\n      return ret\r\n    }\r\n\r\n  const upsertQueryData: UpsertQueryDataThunk<Definitions, State> =\r\n    (endpointName, args, value) => (dispatch) => {\r\n      return dispatch(\r\n        (\r\n          api.endpoints[endpointName] as ApiEndpointQuery<\r\n            QueryDefinition<any, any, any, any, any>,\r\n            Definitions\r\n          >\r\n        ).initiate(args, {\r\n          subscribe: false,\r\n          forceRefetch: true,\r\n          [forceQueryFnSymbol]: () => ({\r\n            data: value,\r\n          }),\r\n        })\r\n      )\r\n    }\r\n\r\n  const executeEndpoint: AsyncThunkPayloadCreator<\r\n    ThunkResult,\r\n    QueryThunkArg | MutationThunkArg,\r\n    ThunkApiMetaConfig & { state: RootState<any, string, ReducerPath> }\r\n  > = async (\r\n    arg,\r\n    {\r\n      signal,\r\n      abort,\r\n      rejectWithValue,\r\n      fulfillWithValue,\r\n      dispatch,\r\n      getState,\r\n      extra,\r\n    }\r\n  ) => {\r\n    const endpointDefinition = endpointDefinitions[arg.endpointName]\r\n\r\n    try {\r\n      let transformResponse: (\r\n        baseQueryReturnValue: any,\r\n        meta: any,\r\n        arg: any\r\n      ) => any = defaultTransformResponse\r\n      let result: QueryReturnValue\r\n      const baseQueryApi = {\r\n        signal,\r\n        abort,\r\n        dispatch,\r\n        getState,\r\n        extra,\r\n        endpoint: arg.endpointName,\r\n        type: arg.type,\r\n        forced:\r\n          arg.type === 'query' ? isForcedQuery(arg, getState()) : undefined,\r\n      }\r\n\r\n      const forceQueryFn =\r\n        arg.type === 'query' ? arg[forceQueryFnSymbol] : undefined\r\n      if (forceQueryFn) {\r\n        result = forceQueryFn()\r\n      } else if (endpointDefinition.query) {\r\n        result = await baseQuery(\r\n          endpointDefinition.query(arg.originalArgs),\r\n          baseQueryApi,\r\n          endpointDefinition.extraOptions as any\r\n        )\r\n\r\n        if (endpointDefinition.transformResponse) {\r\n          transformResponse = endpointDefinition.transformResponse\r\n        }\r\n      } else {\r\n        result = await endpointDefinition.queryFn(\r\n          arg.originalArgs,\r\n          baseQueryApi,\r\n          endpointDefinition.extraOptions as any,\r\n          (arg) =>\r\n            baseQuery(arg, baseQueryApi, endpointDefinition.extraOptions as any)\r\n        )\r\n      }\r\n      if (\r\n        typeof process !== 'undefined' &&\r\n        process.env.NODE_ENV === 'development'\r\n      ) {\r\n        const what = endpointDefinition.query ? '`baseQuery`' : '`queryFn`'\r\n        let err: undefined | string\r\n        if (!result) {\r\n          err = `${what} did not return anything.`\r\n        } else if (typeof result !== 'object') {\r\n          err = `${what} did not return an object.`\r\n        } else if (result.error && result.data) {\r\n          err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`\r\n        } else if (result.error === undefined && result.data === undefined) {\r\n          err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``\r\n        } else {\r\n          for (const key of Object.keys(result)) {\r\n            if (key !== 'error' && key !== 'data' && key !== 'meta') {\r\n              err = `The object returned by ${what} has the unknown property ${key}.`\r\n              break\r\n            }\r\n          }\r\n        }\r\n        if (err) {\r\n          console.error(\r\n            `Error encountered handling the endpoint ${arg.endpointName}.\r\n              ${err}\r\n              It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\r\n              Object returned was:`,\r\n            result\r\n          )\r\n        }\r\n      }\r\n\r\n      if (result.error) throw new HandledError(result.error, result.meta)\r\n\r\n      return fulfillWithValue(\r\n        await transformResponse(result.data, result.meta, arg.originalArgs),\r\n        {\r\n          fulfilledTimeStamp: Date.now(),\r\n          baseQueryMeta: result.meta,\r\n          [SHOULD_AUTOBATCH]: true,\r\n        }\r\n      )\r\n    } catch (error) {\r\n      let catchedError = error\r\n      if (catchedError instanceof HandledError) {\r\n        let transformErrorResponse: (\r\n          baseQueryReturnValue: any,\r\n          meta: any,\r\n          arg: any\r\n        ) => any = defaultTransformResponse\r\n\r\n        if (\r\n          endpointDefinition.query &&\r\n          endpointDefinition.transformErrorResponse\r\n        ) {\r\n          transformErrorResponse = endpointDefinition.transformErrorResponse\r\n        }\r\n        try {\r\n          return rejectWithValue(\r\n            await transformErrorResponse(\r\n              catchedError.value,\r\n              catchedError.meta,\r\n              arg.originalArgs\r\n            ),\r\n            { baseQueryMeta: catchedError.meta, [SHOULD_AUTOBATCH]: true }\r\n          )\r\n        } catch (e) {\r\n          catchedError = e\r\n        }\r\n      }\r\n      if (\r\n        typeof process !== 'undefined' &&\r\n        process.env.NODE_ENV !== 'production'\r\n      ) {\r\n        console.error(\r\n          `An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\r\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`,\r\n          catchedError\r\n        )\r\n      } else {\r\n        console.error(catchedError)\r\n      }\r\n      throw catchedError\r\n    }\r\n  }\r\n\r\n  function isForcedQuery(\r\n    arg: QueryThunkArg,\r\n    state: RootState<any, string, ReducerPath>\r\n  ) {\r\n    const requestState = state[reducerPath]?.queries?.[arg.queryCacheKey]\r\n    const baseFetchOnMountOrArgChange =\r\n      state[reducerPath]?.config.refetchOnMountOrArgChange\r\n\r\n    const fulfilledVal = requestState?.fulfilledTimeStamp\r\n    const refetchVal =\r\n      arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange)\r\n\r\n    if (refetchVal) {\r\n      // Return if its true or compare the dates because it must be a number\r\n      return (\r\n        refetchVal === true ||\r\n        (Number(new Date()) - Number(fulfilledVal)) / 1000 >= refetchVal\r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  const queryThunk = createAsyncThunk<\r\n    ThunkResult,\r\n    QueryThunkArg,\r\n    ThunkApiMetaConfig & { state: RootState<any, string, ReducerPath> }\r\n  >(`${reducerPath}/executeQuery`, executeEndpoint, {\r\n    getPendingMeta() {\r\n      return { startedTimeStamp: Date.now(), [SHOULD_AUTOBATCH]: true }\r\n    },\r\n    condition(queryThunkArgs, { getState }) {\r\n      const state = getState()\r\n\r\n      const requestState =\r\n        state[reducerPath]?.queries?.[queryThunkArgs.queryCacheKey]\r\n      const fulfilledVal = requestState?.fulfilledTimeStamp\r\n      const currentArg = queryThunkArgs.originalArgs\r\n      const previousArg = requestState?.originalArgs\r\n      const endpointDefinition =\r\n        endpointDefinitions[queryThunkArgs.endpointName]\r\n\r\n      // Order of these checks matters.\r\n      // In order for `upsertQueryData` to successfully run while an existing request is in flight,\r\n      /// we have to check for that first, otherwise `queryThunk` will bail out and not run at all.\r\n      if (isUpsertQuery(queryThunkArgs)) {\r\n        return true\r\n      }\r\n\r\n      // Don't retry a request that's currently in-flight\r\n      if (requestState?.status === 'pending') {\r\n        return false\r\n      }\r\n\r\n      // if this is forced, continue\r\n      if (isForcedQuery(queryThunkArgs, state)) {\r\n        return true\r\n      }\r\n\r\n      if (\r\n        isQueryDefinition(endpointDefinition) &&\r\n        endpointDefinition?.forceRefetch?.({\r\n          currentArg,\r\n          previousArg,\r\n          endpointState: requestState,\r\n          state,\r\n        })\r\n      ) {\r\n        return true\r\n      }\r\n\r\n      // Pull from the cache unless we explicitly force refetch or qualify based on time\r\n      if (fulfilledVal) {\r\n        // Value is cached and we didn't specify to refresh, skip it.\r\n        return false\r\n      }\r\n\r\n      return true\r\n    },\r\n    dispatchConditionRejection: true,\r\n  })\r\n\r\n  const mutationThunk = createAsyncThunk<\r\n    ThunkResult,\r\n    MutationThunkArg,\r\n    ThunkApiMetaConfig & { state: RootState<any, string, ReducerPath> }\r\n  >(`${reducerPath}/executeMutation`, executeEndpoint, {\r\n    getPendingMeta() {\r\n      return { startedTimeStamp: Date.now(), [SHOULD_AUTOBATCH]: true }\r\n    },\r\n  })\r\n\r\n  const hasTheForce = (options: any): options is { force: boolean } =>\r\n    'force' in options\r\n  const hasMaxAge = (\r\n    options: any\r\n  ): options is { ifOlderThan: false | number } => 'ifOlderThan' in options\r\n\r\n  const prefetch =\r\n    <EndpointName extends QueryKeys<Definitions>>(\r\n      endpointName: EndpointName,\r\n      arg: any,\r\n      options: PrefetchOptions\r\n    ): ThunkAction<void, any, any, AnyAction> =>\r\n    (dispatch: ThunkDispatch<any, any, any>, getState: () => any) => {\r\n      const force = hasTheForce(options) && options.force\r\n      const maxAge = hasMaxAge(options) && options.ifOlderThan\r\n\r\n      const queryAction = (force: boolean = true) =>\r\n        (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).initiate(\r\n          arg,\r\n          { forceRefetch: force }\r\n        )\r\n      const latestStateValue = (\r\n        api.endpoints[endpointName] as ApiEndpointQuery<any, any>\r\n      ).select(arg)(getState())\r\n\r\n      if (force) {\r\n        dispatch(queryAction())\r\n      } else if (maxAge) {\r\n        const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp\r\n        if (!lastFulfilledTs) {\r\n          dispatch(queryAction())\r\n          return\r\n        }\r\n        const shouldRetrigger =\r\n          (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1000 >=\r\n          maxAge\r\n        if (shouldRetrigger) {\r\n          dispatch(queryAction())\r\n        }\r\n      } else {\r\n        // If prefetching with no options, just let it try\r\n        dispatch(queryAction(false))\r\n      }\r\n    }\r\n\r\n  function matchesEndpoint(endpointName: string) {\r\n    return (action: any): action is AnyAction =>\r\n      action?.meta?.arg?.endpointName === endpointName\r\n  }\r\n\r\n  function buildMatchThunkActions<\r\n    Thunk extends\r\n      | AsyncThunk<any, QueryThunkArg, ThunkApiMetaConfig>\r\n      | AsyncThunk<any, MutationThunkArg, ThunkApiMetaConfig>\r\n  >(thunk: Thunk, endpointName: string) {\r\n    return {\r\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\r\n      matchFulfilled: isAllOf(\r\n        isFulfilled(thunk),\r\n        matchesEndpoint(endpointName)\r\n      ),\r\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName)),\r\n    } as Matchers<Thunk, any>\r\n  }\r\n\r\n  return {\r\n    queryThunk,\r\n    mutationThunk,\r\n    prefetch,\r\n    updateQueryData,\r\n    upsertQueryData,\r\n    patchQueryData,\r\n    buildMatchThunkActions,\r\n  }\r\n}\r\n\r\nexport function calculateProvidedByThunk(\r\n  action: UnwrapPromise<\r\n    ReturnType<ReturnType<QueryThunk>> | ReturnType<ReturnType<MutationThunk>>\r\n  >,\r\n  type: 'providesTags' | 'invalidatesTags',\r\n  endpointDefinitions: EndpointDefinitions,\r\n  assertTagType: AssertTagTypes\r\n) {\r\n  return calculateProvidedBy(\r\n    endpointDefinitions[action.meta.arg.endpointName][type],\r\n    isFulfilled(action) ? action.payload : undefined,\r\n    isRejectedWithValue(action) ? action.payload : undefined,\r\n    action.meta.arg.originalArgs,\r\n    'baseQueryMeta' in action.meta ? action.meta.baseQueryMeta : undefined,\r\n    assertTagType\r\n  )\r\n}\r\n","import type { QueryCacheKey } from './core/apiState'\r\nimport type { EndpointDefinition } from './endpointDefinitions'\r\nimport { isPlainObject } from '@reduxjs/toolkit'\r\n\r\nexport const defaultSerializeQueryArgs: SerializeQueryArgs<any> = ({\r\n  endpointName,\r\n  queryArgs,\r\n}) => {\r\n  // Sort the object keys before stringifying, to prevent useQuery({ a: 1, b: 2 }) having a different cache key than useQuery({ b: 2, a: 1 })\r\n  return `${endpointName}(${JSON.stringify(queryArgs, (key, value) =>\r\n    isPlainObject(value)\r\n      ? Object.keys(value)\r\n          .sort()\r\n          .reduce<any>((acc, key) => {\r\n            acc[key] = (value as any)[key]\r\n            return acc\r\n          }, {})\r\n      : value\r\n  )})`\r\n}\r\n\r\nexport type SerializeQueryArgs<QueryArgs, ReturnType = string> = (_: {\r\n  queryArgs: QueryArgs\r\n  endpointDefinition: EndpointDefinition<any, any, any, any>\r\n  endpointName: string\r\n}) => ReturnType\r\n\r\nexport type InternalSerializeQueryArgs = (_: {\r\n  queryArgs: any\r\n  endpointDefinition: EndpointDefinition<any, any, any, any>\r\n  endpointName: string\r\n}) => QueryCacheKey\r\n","import type { Api, ApiContext, Module, ModuleName } from './apiTypes'\r\nimport type { CombinedState } from './core/apiState'\r\nimport type { BaseQueryArg, BaseQueryFn } from './baseQueryTypes'\r\nimport {\r\n  defaultSerializeQueryArgs,\r\n  SerializeQueryArgs,\r\n} from './defaultSerializeQueryArgs'\r\nimport type {\r\n  EndpointBuilder,\r\n  EndpointDefinitions,\r\n} from './endpointDefinitions'\r\nimport { DefinitionType, isQueryDefinition } from './endpointDefinitions'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\nimport type { AnyAction } from '@reduxjs/toolkit'\r\nimport type { NoInfer } from './tsHelpers'\r\nimport { defaultMemoize } from 'reselect'\r\n\r\nexport interface CreateApiOptions<\r\n  BaseQuery extends BaseQueryFn,\r\n  Definitions extends EndpointDefinitions,\r\n  ReducerPath extends string = 'api',\r\n  TagTypes extends string = never\r\n> {\r\n  /**\r\n   * The base query used by each endpoint if no `queryFn` option is specified. RTK Query exports a utility called [fetchBaseQuery](./fetchBaseQuery) as a lightweight wrapper around `fetch` for common use-cases. See [Customizing Queries](../../rtk-query/usage/customizing-queries) if `fetchBaseQuery` does not handle your requirements.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\r\n   *\r\n   * const api = createApi({\r\n   *   // highlight-start\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   // highlight-end\r\n   *   endpoints: (build) => ({\r\n   *     // ...endpoints\r\n   *   }),\r\n   * })\r\n   * ```\r\n   */\r\n  baseQuery: BaseQuery\r\n  /**\r\n   * An array of string tag type names. Specifying tag types is optional, but you should define them so that they can be used for caching and invalidation. When defining a tag type, you will be able to [provide](../../rtk-query/usage/automated-refetching#providing-tags) them with `providesTags` and [invalidate](../../rtk-query/usage/automated-refetching#invalidating-tags) them with `invalidatesTags` when configuring [endpoints](#endpoints).\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\r\n   *\r\n   * const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   // highlight-start\r\n   *   tagTypes: ['Post', 'User'],\r\n   *   // highlight-end\r\n   *   endpoints: (build) => ({\r\n   *     // ...endpoints\r\n   *   }),\r\n   * })\r\n   * ```\r\n   */\r\n  tagTypes?: readonly TagTypes[]\r\n  /**\r\n   * The `reducerPath` is a _unique_ key that your service will be mounted to in your store. If you call `createApi` more than once in your application, you will need to provide a unique value each time. Defaults to `'api'`.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"apis.js\"\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query';\r\n   *\r\n   * const apiOne = createApi({\r\n   *   // highlight-start\r\n   *   reducerPath: 'apiOne',\r\n   *   // highlight-end\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   endpoints: (builder) => ({\r\n   *     // ...endpoints\r\n   *   }),\r\n   * });\r\n   *\r\n   * const apiTwo = createApi({\r\n   *   // highlight-start\r\n   *   reducerPath: 'apiTwo',\r\n   *   // highlight-end\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   endpoints: (builder) => ({\r\n   *     // ...endpoints\r\n   *   }),\r\n   * });\r\n   * ```\r\n   */\r\n  reducerPath?: ReducerPath\r\n  /**\r\n   * Accepts a custom function if you have a need to change the creation of cache keys for any reason.\r\n   */\r\n  serializeQueryArgs?: SerializeQueryArgs<BaseQueryArg<BaseQuery>>\r\n  /**\r\n   * Endpoints are just a set of operations that you want to perform against your server. You define them as an object using the builder syntax. There are two basic endpoint types: [`query`](../../rtk-query/usage/queries) and [`mutation`](../../rtk-query/usage/mutations).\r\n   */\r\n  endpoints(\r\n    build: EndpointBuilder<BaseQuery, TagTypes, ReducerPath>\r\n  ): Definitions\r\n  /**\r\n   * Defaults to `60` _(this value is in seconds)_. This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"keepUnusedDataFor example\"\r\n   *\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n   * interface Post {\r\n   *   id: number\r\n   *   name: string\r\n   * }\r\n   * type PostsResponse = Post[]\r\n   *\r\n   * const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   endpoints: (build) => ({\r\n   *     getPosts: build.query<PostsResponse, void>({\r\n   *       query: () => 'posts',\r\n   *       // highlight-start\r\n   *       keepUnusedDataFor: 5\r\n   *       // highlight-end\r\n   *     })\r\n   *   })\r\n   * })\r\n   * ```\r\n   */\r\n  keepUnusedDataFor?: number\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether if a cached result is already available RTK Query will only serve a cached result, or if it should `refetch` when set to `true` or if an adequate amount of time has passed since the last successful query result.\r\n   * - `false` - Will not cause a query to be performed _unless_ it does not exist yet.\r\n   * - `true` - Will always refetch when a new subscriber to a query is added. Behaves the same as calling the `refetch` callback or passing `forceRefetch: true` in the action creator.\r\n   * - `number` - **Value is in seconds**. If a number is provided and there is an existing query in the cache, it will compare the current time vs the last fulfilled timestamp, and only refetch if enough time has elapsed.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   */\r\n  refetchOnMountOrArgChange?: boolean | number\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   *\r\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\r\n   */\r\n  refetchOnFocus?: boolean\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   *\r\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\r\n   */\r\n  refetchOnReconnect?: boolean\r\n  /**\r\n   * A function that is passed every dispatched action. If this returns something other than `undefined`,\r\n   * that return value will be used to rehydrate fulfilled & errored queries.\r\n   *\r\n   * @example\r\n   *\r\n   * ```ts\r\n   * // codeblock-meta title=\"next-redux-wrapper rehydration example\"\r\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n   * import { HYDRATE } from 'next-redux-wrapper'\r\n   *\r\n   * export const api = createApi({\r\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n   *   // highlight-start\r\n   *   extractRehydrationInfo(action, { reducerPath }) {\r\n   *     if (action.type === HYDRATE) {\r\n   *       return action.payload[reducerPath]\r\n   *     }\r\n   *   },\r\n   *   // highlight-end\r\n   *   endpoints: (build) => ({\r\n   *     // omitted\r\n   *   }),\r\n   * })\r\n   * ```\r\n   */\r\n  extractRehydrationInfo?: (\r\n    action: AnyAction,\r\n    {\r\n      reducerPath,\r\n    }: {\r\n      reducerPath: ReducerPath\r\n    }\r\n  ) =>\r\n    | undefined\r\n    | CombinedState<\r\n        NoInfer<Definitions>,\r\n        NoInfer<TagTypes>,\r\n        NoInfer<ReducerPath>\r\n      >\r\n}\r\n\r\nexport type CreateApi<Modules extends ModuleName> = {\r\n  /**\r\n   * Creates a service to use in your application. Contains only the basic redux logic (the core module).\r\n   *\r\n   * @link https://rtk-query-docs.netlify.app/api/createApi\r\n   */\r\n  <\r\n    BaseQuery extends BaseQueryFn,\r\n    Definitions extends EndpointDefinitions,\r\n    ReducerPath extends string = 'api',\r\n    TagTypes extends string = never\r\n  >(\r\n    options: CreateApiOptions<BaseQuery, Definitions, ReducerPath, TagTypes>\r\n  ): Api<BaseQuery, Definitions, ReducerPath, TagTypes, Modules>\r\n}\r\n\r\n/**\r\n * Builds a `createApi` method based on the provided `modules`.\r\n *\r\n * @link https://rtk-query-docs.netlify.app/concepts/customizing-create-api\r\n *\r\n * @example\r\n * ```ts\r\n * const MyContext = React.createContext<ReactReduxContextValue>(null as any);\r\n * const customCreateApi = buildCreateApi(\r\n *   coreModule(),\r\n *   reactHooksModule({ useDispatch: createDispatchHook(MyContext) })\r\n * );\r\n * ```\r\n *\r\n * @param modules - A variable number of modules that customize how the `createApi` method handles endpoints\r\n * @returns A `createApi` method using the provided `modules`.\r\n */\r\nexport function buildCreateApi<Modules extends [Module<any>, ...Module<any>[]]>(\r\n  ...modules: Modules\r\n): CreateApi<Modules[number]['name']> {\r\n  return function baseCreateApi(options) {\r\n    const extractRehydrationInfo = defaultMemoize((action: AnyAction) =>\r\n      options.extractRehydrationInfo?.(action, {\r\n        reducerPath: (options.reducerPath ?? 'api') as any,\r\n      })\r\n    )\r\n\r\n    const optionsWithDefaults: CreateApiOptions<any, any, any, any> = {\r\n      reducerPath: 'api',\r\n      keepUnusedDataFor: 60,\r\n      refetchOnMountOrArgChange: false,\r\n      refetchOnFocus: false,\r\n      refetchOnReconnect: false,\r\n      ...options,\r\n      extractRehydrationInfo,\r\n      serializeQueryArgs(queryArgsApi) {\r\n        let finalSerializeQueryArgs = defaultSerializeQueryArgs\r\n        if ('serializeQueryArgs' in queryArgsApi.endpointDefinition) {\r\n          const endpointSQA =\r\n            queryArgsApi.endpointDefinition.serializeQueryArgs!\r\n          finalSerializeQueryArgs = (queryArgsApi) => {\r\n            const initialResult = endpointSQA(queryArgsApi)\r\n            if (typeof initialResult === 'string') {\r\n              // If the user function returned a string, use it as-is\r\n              return initialResult\r\n            } else {\r\n              // Assume they returned an object (such as a subset of the original\r\n              // query args) or a primitive, and serialize it ourselves\r\n              return defaultSerializeQueryArgs({\r\n                ...queryArgsApi,\r\n                queryArgs: initialResult,\r\n              })\r\n            }\r\n          }\r\n        } else if (options.serializeQueryArgs) {\r\n          finalSerializeQueryArgs = options.serializeQueryArgs\r\n        }\r\n\r\n        return finalSerializeQueryArgs(queryArgsApi)\r\n      },\r\n      tagTypes: [...(options.tagTypes || [])],\r\n    }\r\n\r\n    const context: ApiContext<EndpointDefinitions> = {\r\n      endpointDefinitions: {},\r\n      batch(fn) {\r\n        // placeholder \"batch\" method to be overridden by plugins, for example with React.unstable_batchedUpdate\r\n        fn()\r\n      },\r\n      apiUid: nanoid(),\r\n      extractRehydrationInfo,\r\n      hasRehydrationInfo: defaultMemoize(\r\n        (action) => extractRehydrationInfo(action) != null\r\n      ),\r\n    }\r\n\r\n    const api = {\r\n      injectEndpoints,\r\n      enhanceEndpoints({ addTagTypes, endpoints }) {\r\n        if (addTagTypes) {\r\n          for (const eT of addTagTypes) {\r\n            if (!optionsWithDefaults.tagTypes!.includes(eT as any)) {\r\n              ;(optionsWithDefaults.tagTypes as any[]).push(eT)\r\n            }\r\n          }\r\n        }\r\n        if (endpoints) {\r\n          for (const [endpointName, partialDefinition] of Object.entries(\r\n            endpoints\r\n          )) {\r\n            if (typeof partialDefinition === 'function') {\r\n              partialDefinition(context.endpointDefinitions[endpointName])\r\n            } else {\r\n              Object.assign(\r\n                context.endpointDefinitions[endpointName] || {},\r\n                partialDefinition\r\n              )\r\n            }\r\n          }\r\n        }\r\n        return api\r\n      },\r\n    } as Api<BaseQueryFn, {}, string, string, Modules[number]['name']>\r\n\r\n    const initializedModules = modules.map((m) =>\r\n      m.init(api as any, optionsWithDefaults as any, context)\r\n    )\r\n\r\n    function injectEndpoints(\r\n      inject: Parameters<typeof api.injectEndpoints>[0]\r\n    ) {\r\n      const evaluatedEndpoints = inject.endpoints({\r\n        query: (x) => ({ ...x, type: DefinitionType.query } as any),\r\n        mutation: (x) => ({ ...x, type: DefinitionType.mutation } as any),\r\n      })\r\n\r\n      for (const [endpointName, definition] of Object.entries(\r\n        evaluatedEndpoints\r\n      )) {\r\n        if (\r\n          !inject.overrideExisting &&\r\n          endpointName in context.endpointDefinitions\r\n        ) {\r\n          if (\r\n            typeof process !== 'undefined' &&\r\n            process.env.NODE_ENV === 'development'\r\n          ) {\r\n            console.error(\r\n              `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``\r\n            )\r\n          }\r\n\r\n          continue\r\n        }\r\n\r\n        context.endpointDefinitions[endpointName] = definition\r\n        for (const m of initializedModules) {\r\n          m.injectEndpoint(endpointName, definition)\r\n        }\r\n      }\r\n\r\n      return api as any\r\n    }\r\n\r\n    return api.injectEndpoints({ endpoints: options.endpoints as any })\r\n  }\r\n}\r\n","import type { BaseQueryFn } from './baseQueryTypes'\r\n\r\nconst _NEVER = /* @__PURE__ */ Symbol()\r\nexport type NEVER = typeof _NEVER\r\n\r\n/**\r\n * Creates a \"fake\" baseQuery to be used if your api *only* uses the `queryFn` definition syntax.\r\n * This also allows you to specify a specific error type to be shared by all your `queryFn` definitions.\r\n */\r\nexport function fakeBaseQuery<ErrorType>(): BaseQueryFn<\r\n  void,\r\n  NEVER,\r\n  ErrorType,\r\n  {}\r\n> {\r\n  return function () {\r\n    throw new Error(\r\n      'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.'\r\n    )\r\n  }\r\n}\r\n","import type { AnyAction, Middleware, ThunkDispatch } from '@reduxjs/toolkit'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nimport type {\r\n  EndpointDefinitions,\r\n  FullTagDescription,\r\n} from '../../endpointDefinitions'\r\nimport type { QueryStatus, QuerySubState, RootState } from '../apiState'\r\nimport type { QueryThunkArg } from '../buildThunks'\r\nimport { buildCacheCollectionHandler } from './cacheCollection'\r\nimport { buildInvalidationByTagsHandler } from './invalidationByTags'\r\nimport { buildPollingHandler } from './polling'\r\nimport type {\r\n  BuildMiddlewareInput,\r\n  InternalHandlerBuilder,\r\n  InternalMiddlewareState,\r\n} from './types'\r\nimport { buildWindowEventHandler } from './windowEventHandling'\r\nimport { buildCacheLifecycleHandler } from './cacheLifecycle'\r\nimport { buildQueryLifecycleHandler } from './queryLifecycle'\r\nimport { buildDevCheckHandler } from './devMiddleware'\r\nimport { buildBatchedActionsHandler } from './batchActions'\r\n\r\nexport function buildMiddleware<\r\n  Definitions extends EndpointDefinitions,\r\n  ReducerPath extends string,\r\n  TagTypes extends string\r\n>(input: BuildMiddlewareInput<Definitions, ReducerPath, TagTypes>) {\r\n  const { reducerPath, queryThunk, api, context } = input\r\n  const { apiUid } = context\r\n\r\n  const actions = {\r\n    invalidateTags: createAction<\r\n      Array<TagTypes | FullTagDescription<TagTypes>>\r\n    >(`${reducerPath}/invalidateTags`),\r\n  }\r\n\r\n  const isThisApiSliceAction = (action: AnyAction) => {\r\n    return (\r\n      !!action &&\r\n      typeof action.type === 'string' &&\r\n      action.type.startsWith(`${reducerPath}/`)\r\n    )\r\n  }\r\n\r\n  const handlerBuilders: InternalHandlerBuilder[] = [\r\n    buildDevCheckHandler,\r\n    buildCacheCollectionHandler,\r\n    buildInvalidationByTagsHandler,\r\n    buildPollingHandler,\r\n    buildCacheLifecycleHandler,\r\n    buildQueryLifecycleHandler,\r\n  ]\r\n\r\n  const middleware: Middleware<\r\n    {},\r\n    RootState<Definitions, string, ReducerPath>,\r\n    ThunkDispatch<any, any, AnyAction>\r\n  > = (mwApi) => {\r\n    let initialized = false\r\n\r\n    let internalState: InternalMiddlewareState = {\r\n      currentSubscriptions: {},\r\n    }\r\n\r\n    const builderArgs = {\r\n      ...(input as any as BuildMiddlewareInput<\r\n        EndpointDefinitions,\r\n        string,\r\n        string\r\n      >),\r\n      internalState,\r\n      refetchQuery,\r\n    }\r\n\r\n    const handlers = handlerBuilders.map((build) => build(builderArgs))\r\n\r\n    const batchedActionsHandler = buildBatchedActionsHandler(builderArgs)\r\n    const windowEventsHandler = buildWindowEventHandler(builderArgs)\r\n\r\n    return (next) => {\r\n      return (action) => {\r\n        if (!initialized) {\r\n          initialized = true\r\n          // dispatch before any other action\r\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid))\r\n        }\r\n\r\n        const mwApiWithNext = { ...mwApi, next }\r\n\r\n        const stateBefore = mwApi.getState()\r\n\r\n        const [actionShouldContinue, hasSubscription] = batchedActionsHandler(\r\n          action,\r\n          mwApiWithNext,\r\n          stateBefore\r\n        )\r\n\r\n        let res: any\r\n\r\n        if (actionShouldContinue) {\r\n          res = next(action)\r\n        } else {\r\n          res = hasSubscription\r\n        }\r\n\r\n        if (!!mwApi.getState()[reducerPath]) {\r\n          // Only run these checks if the middleware is registered okay\r\n\r\n          // This looks for actions that aren't specific to the API slice\r\n          windowEventsHandler(action, mwApiWithNext, stateBefore)\r\n\r\n          if (\r\n            isThisApiSliceAction(action) ||\r\n            context.hasRehydrationInfo(action)\r\n          ) {\r\n            // Only run these additional checks if the actions are part of the API slice,\r\n            // or the action has hydration-related data\r\n            for (let handler of handlers) {\r\n              handler(action, mwApiWithNext, stateBefore)\r\n            }\r\n          }\r\n        }\r\n\r\n        return res\r\n      }\r\n    }\r\n  }\r\n\r\n  return { middleware, actions }\r\n\r\n  function refetchQuery(\r\n    querySubState: Exclude<\r\n      QuerySubState<any>,\r\n      { status: QueryStatus.uninitialized }\r\n    >,\r\n    queryCacheKey: string,\r\n    override: Partial<QueryThunkArg> = {}\r\n  ) {\r\n    return queryThunk({\r\n      type: 'query',\r\n      endpointName: querySubState.endpointName,\r\n      originalArgs: querySubState.originalArgs,\r\n      subscribe: false,\r\n      forceRefetch: true,\r\n      queryCacheKey: queryCacheKey as any,\r\n      ...override,\r\n    })\r\n  }\r\n}\r\n","import type { BaseQueryFn } from '../../baseQueryTypes'\r\nimport type { QueryDefinition } from '../../endpointDefinitions'\r\nimport type { ConfigState, QueryCacheKey } from '../apiState'\r\nimport type {\r\n  QueryStateMeta,\r\n  SubMiddlewareApi,\r\n  TimeoutId,\r\n  InternalHandlerBuilder,\r\n  ApiMiddlewareInternalHandler,\r\n  InternalMiddlewareState,\r\n} from './types'\r\n\r\nexport type ReferenceCacheCollection = never\r\n\r\nfunction isObjectEmpty(obj: Record<any, any>) {\r\n  // Apparently a for..in loop is faster than `Object.keys()` here:\r\n  // https://stackoverflow.com/a/59787784/62937\r\n  for (let k in obj) {\r\n    // If there is at least one key, it's not empty\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\ndeclare module '../../endpointDefinitions' {\r\n  interface QueryExtraOptions<\r\n    TagTypes extends string,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ReducerPath extends string = string\r\n  > {\r\n    /**\r\n     * Overrides the api-wide definition of `keepUnusedDataFor` for this endpoint only. _(This value is in seconds.)_\r\n     *\r\n     * This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\r\n     */\r\n    keepUnusedDataFor?: number\r\n  }\r\n}\r\n\r\n// Per https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value , browsers store\r\n// `setTimeout()` timer values in a 32-bit int. If we pass a value in that's larger than that,\r\n// it wraps and ends up executing immediately.\r\n// Our `keepUnusedDataFor` values are in seconds, so adjust the numbers here accordingly.\r\nexport const THIRTY_TWO_BIT_MAX_INT = 2_147_483_647\r\nexport const THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2_147_483_647 / 1_000 - 1\r\n\r\nexport const buildCacheCollectionHandler: InternalHandlerBuilder = ({\r\n  reducerPath,\r\n  api,\r\n  context,\r\n  internalState,\r\n}) => {\r\n  const { removeQueryResult, unsubscribeQueryResult } = api.internalActions\r\n\r\n  function anySubscriptionsRemainingForKey(queryCacheKey: string) {\r\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey]\r\n    return !!subscriptions && !isObjectEmpty(subscriptions)\r\n  }\r\n\r\n  const currentRemovalTimeouts: QueryStateMeta<TimeoutId> = {}\r\n\r\n  const handler: ApiMiddlewareInternalHandler = (\r\n    action,\r\n    mwApi,\r\n    internalState\r\n  ) => {\r\n    if (unsubscribeQueryResult.match(action)) {\r\n      const state = mwApi.getState()[reducerPath]\r\n      const { queryCacheKey } = action.payload\r\n\r\n      handleUnsubscribe(\r\n        queryCacheKey,\r\n        state.queries[queryCacheKey]?.endpointName,\r\n        mwApi,\r\n        state.config\r\n      )\r\n    }\r\n\r\n    if (api.util.resetApiState.match(action)) {\r\n      for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {\r\n        if (timeout) clearTimeout(timeout)\r\n        delete currentRemovalTimeouts[key]\r\n      }\r\n    }\r\n\r\n    if (context.hasRehydrationInfo(action)) {\r\n      const state = mwApi.getState()[reducerPath]\r\n      const { queries } = context.extractRehydrationInfo(action)!\r\n      for (const [queryCacheKey, queryState] of Object.entries(queries)) {\r\n        // Gotcha:\r\n        // If rehydrating before the endpoint has been injected,the global `keepUnusedDataFor`\r\n        // will be used instead of the endpoint-specific one.\r\n        handleUnsubscribe(\r\n          queryCacheKey as QueryCacheKey,\r\n          queryState?.endpointName,\r\n          mwApi,\r\n          state.config\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleUnsubscribe(\r\n    queryCacheKey: QueryCacheKey,\r\n    endpointName: string | undefined,\r\n    api: SubMiddlewareApi,\r\n    config: ConfigState<string>\r\n  ) {\r\n    const endpointDefinition = context.endpointDefinitions[\r\n      endpointName!\r\n    ] as QueryDefinition<any, any, any, any>\r\n    const keepUnusedDataFor =\r\n      endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor\r\n\r\n    if (keepUnusedDataFor === Infinity) {\r\n      // Hey, user said keep this forever!\r\n      return\r\n    }\r\n    // Prevent `setTimeout` timers from overflowing a 32-bit internal int, by\r\n    // clamping the max value to be at most 1000ms less than the 32-bit max.\r\n    // Look, a 24.8-day keepalive ought to be enough for anybody, right? :)\r\n    // Also avoid negative values too.\r\n    const finalKeepUnusedDataFor = Math.max(\r\n      0,\r\n      Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS)\r\n    )\r\n\r\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\r\n      const currentTimeout = currentRemovalTimeouts[queryCacheKey]\r\n      if (currentTimeout) {\r\n        clearTimeout(currentTimeout)\r\n      }\r\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {\r\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\r\n          api.dispatch(removeQueryResult({ queryCacheKey }))\r\n        }\r\n        delete currentRemovalTimeouts![queryCacheKey]\r\n      }, finalKeepUnusedDataFor * 1000)\r\n    }\r\n  }\r\n\r\n  return handler\r\n}\r\n","import { isAnyOf, isFulfilled, isRejectedWithValue } from '@reduxjs/toolkit'\r\n\r\nimport type { FullTagDescription } from '../../endpointDefinitions'\r\nimport { calculateProvidedBy } from '../../endpointDefinitions'\r\nimport type { QueryCacheKey } from '../apiState'\r\nimport { QueryStatus } from '../apiState'\r\nimport { calculateProvidedByThunk } from '../buildThunks'\r\nimport type {\r\n  SubMiddlewareApi,\r\n  InternalHandlerBuilder,\r\n  ApiMiddlewareInternalHandler,\r\n} from './types'\r\n\r\nexport const buildInvalidationByTagsHandler: InternalHandlerBuilder = ({\r\n  reducerPath,\r\n  context,\r\n  context: { endpointDefinitions },\r\n  mutationThunk,\r\n  api,\r\n  assertTagType,\r\n  refetchQuery,\r\n}) => {\r\n  const { removeQueryResult } = api.internalActions\r\n  const isThunkActionWithTags = isAnyOf(\r\n    isFulfilled(mutationThunk),\r\n    isRejectedWithValue(mutationThunk)\r\n  )\r\n\r\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\r\n    if (isThunkActionWithTags(action)) {\r\n      invalidateTags(\r\n        calculateProvidedByThunk(\r\n          action,\r\n          'invalidatesTags',\r\n          endpointDefinitions,\r\n          assertTagType\r\n        ),\r\n        mwApi\r\n      )\r\n    }\r\n\r\n    if (api.util.invalidateTags.match(action)) {\r\n      invalidateTags(\r\n        calculateProvidedBy(\r\n          action.payload,\r\n          undefined,\r\n          undefined,\r\n          undefined,\r\n          undefined,\r\n          assertTagType\r\n        ),\r\n        mwApi\r\n      )\r\n    }\r\n  }\r\n\r\n  function invalidateTags(\r\n    tags: readonly FullTagDescription<string>[],\r\n    mwApi: SubMiddlewareApi\r\n  ) {\r\n    const rootState = mwApi.getState()\r\n    const state = rootState[reducerPath]\r\n\r\n    const toInvalidate = api.util.selectInvalidatedBy(rootState, tags)\r\n\r\n    context.batch(() => {\r\n      const valuesArray = Array.from(toInvalidate.values())\r\n      for (const { queryCacheKey } of valuesArray) {\r\n        const querySubState = state.queries[queryCacheKey]\r\n        const subscriptionSubState = state.subscriptions[queryCacheKey] ?? {}\r\n\r\n        if (querySubState) {\r\n          if (Object.keys(subscriptionSubState).length === 0) {\r\n            mwApi.dispatch(\r\n              removeQueryResult({\r\n                queryCacheKey: queryCacheKey as QueryCacheKey,\r\n              })\r\n            )\r\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\r\n            mwApi.dispatch(refetchQuery(querySubState, queryCacheKey))\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  return handler\r\n}\r\n","import type { QuerySubstateIdentifier, Subscribers } from '../apiState'\r\nimport { QueryStatus } from '../apiState'\r\nimport type {\r\n  QueryStateMeta,\r\n  SubMiddlewareApi,\r\n  TimeoutId,\r\n  InternalHandlerBuilder,\r\n  ApiMiddlewareInternalHandler,\r\n  InternalMiddlewareState,\r\n} from './types'\r\n\r\nexport const buildPollingHandler: InternalHandlerBuilder = ({\r\n  reducerPath,\r\n  queryThunk,\r\n  api,\r\n  refetchQuery,\r\n  internalState,\r\n}) => {\r\n  const currentPolls: QueryStateMeta<{\r\n    nextPollTimestamp: number\r\n    timeout?: TimeoutId\r\n    pollingInterval: number\r\n  }> = {}\r\n\r\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\r\n    if (\r\n      api.internalActions.updateSubscriptionOptions.match(action) ||\r\n      api.internalActions.unsubscribeQueryResult.match(action)\r\n    ) {\r\n      updatePollingInterval(action.payload, mwApi)\r\n    }\r\n\r\n    if (\r\n      queryThunk.pending.match(action) ||\r\n      (queryThunk.rejected.match(action) && action.meta.condition)\r\n    ) {\r\n      updatePollingInterval(action.meta.arg, mwApi)\r\n    }\r\n\r\n    if (\r\n      queryThunk.fulfilled.match(action) ||\r\n      (queryThunk.rejected.match(action) && !action.meta.condition)\r\n    ) {\r\n      startNextPoll(action.meta.arg, mwApi)\r\n    }\r\n\r\n    if (api.util.resetApiState.match(action)) {\r\n      clearPolls()\r\n    }\r\n  }\r\n\r\n  function startNextPoll(\r\n    { queryCacheKey }: QuerySubstateIdentifier,\r\n    api: SubMiddlewareApi\r\n  ) {\r\n    const state = api.getState()[reducerPath]\r\n    const querySubState = state.queries[queryCacheKey]\r\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey]\r\n\r\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized)\r\n      return\r\n\r\n    const lowestPollingInterval = findLowestPollingInterval(subscriptions)\r\n    if (!Number.isFinite(lowestPollingInterval)) return\r\n\r\n    const currentPoll = currentPolls[queryCacheKey]\r\n\r\n    if (currentPoll?.timeout) {\r\n      clearTimeout(currentPoll.timeout)\r\n      currentPoll.timeout = undefined\r\n    }\r\n\r\n    const nextPollTimestamp = Date.now() + lowestPollingInterval\r\n\r\n    const currentInterval: typeof currentPolls[number] = (currentPolls[\r\n      queryCacheKey\r\n    ] = {\r\n      nextPollTimestamp,\r\n      pollingInterval: lowestPollingInterval,\r\n      timeout: setTimeout(() => {\r\n        currentInterval!.timeout = undefined\r\n        api.dispatch(refetchQuery(querySubState, queryCacheKey))\r\n      }, lowestPollingInterval),\r\n    })\r\n  }\r\n\r\n  function updatePollingInterval(\r\n    { queryCacheKey }: QuerySubstateIdentifier,\r\n    api: SubMiddlewareApi\r\n  ) {\r\n    const state = api.getState()[reducerPath]\r\n    const querySubState = state.queries[queryCacheKey]\r\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey]\r\n\r\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\r\n      return\r\n    }\r\n\r\n    const lowestPollingInterval = findLowestPollingInterval(subscriptions)\r\n\r\n    if (!Number.isFinite(lowestPollingInterval)) {\r\n      cleanupPollForKey(queryCacheKey)\r\n      return\r\n    }\r\n\r\n    const currentPoll = currentPolls[queryCacheKey]\r\n    const nextPollTimestamp = Date.now() + lowestPollingInterval\r\n\r\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\r\n      startNextPoll({ queryCacheKey }, api)\r\n    }\r\n  }\r\n\r\n  function cleanupPollForKey(key: string) {\r\n    const existingPoll = currentPolls[key]\r\n    if (existingPoll?.timeout) {\r\n      clearTimeout(existingPoll.timeout)\r\n    }\r\n    delete currentPolls[key]\r\n  }\r\n\r\n  function clearPolls() {\r\n    for (const key of Object.keys(currentPolls)) {\r\n      cleanupPollForKey(key)\r\n    }\r\n  }\r\n\r\n  function findLowestPollingInterval(subscribers: Subscribers = {}) {\r\n    let lowestPollingInterval = Number.POSITIVE_INFINITY\r\n    for (let key in subscribers) {\r\n      if (!!subscribers[key].pollingInterval) {\r\n        lowestPollingInterval = Math.min(\r\n          subscribers[key].pollingInterval!,\r\n          lowestPollingInterval\r\n        )\r\n      }\r\n    }\r\n\r\n    return lowestPollingInterval\r\n  }\r\n  return handler\r\n}\r\n","import { QueryStatus } from '../apiState'\r\nimport type { QueryCacheKey } from '../apiState'\r\nimport { onFocus, onOnline } from '../setupListeners'\r\nimport type {\r\n  ApiMiddlewareInternalHandler,\r\n  InternalHandlerBuilder,\r\n  SubMiddlewareApi,\r\n} from './types'\r\n\r\nexport const buildWindowEventHandler: InternalHandlerBuilder = ({\r\n  reducerPath,\r\n  context,\r\n  api,\r\n  refetchQuery,\r\n  internalState,\r\n}) => {\r\n  const { removeQueryResult } = api.internalActions\r\n\r\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\r\n    if (onFocus.match(action)) {\r\n      refetchValidQueries(mwApi, 'refetchOnFocus')\r\n    }\r\n    if (onOnline.match(action)) {\r\n      refetchValidQueries(mwApi, 'refetchOnReconnect')\r\n    }\r\n  }\r\n\r\n  function refetchValidQueries(\r\n    api: SubMiddlewareApi,\r\n    type: 'refetchOnFocus' | 'refetchOnReconnect'\r\n  ) {\r\n    const state = api.getState()[reducerPath]\r\n    const queries = state.queries\r\n    const subscriptions = internalState.currentSubscriptions\r\n\r\n    context.batch(() => {\r\n      for (const queryCacheKey of Object.keys(subscriptions)) {\r\n        const querySubState = queries[queryCacheKey]\r\n        const subscriptionSubState = subscriptions[queryCacheKey]\r\n\r\n        if (!subscriptionSubState || !querySubState) continue\r\n\r\n        const shouldRefetch =\r\n          Object.values(subscriptionSubState).some(\r\n            (sub) => sub[type] === true\r\n          ) ||\r\n          (Object.values(subscriptionSubState).every(\r\n            (sub) => sub[type] === undefined\r\n          ) &&\r\n            state.config[type])\r\n\r\n        if (shouldRefetch) {\r\n          if (Object.keys(subscriptionSubState).length === 0) {\r\n            api.dispatch(\r\n              removeQueryResult({\r\n                queryCacheKey: queryCacheKey as QueryCacheKey,\r\n              })\r\n            )\r\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\r\n            api.dispatch(refetchQuery(querySubState, queryCacheKey))\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  return handler\r\n}\r\n","import { isAsyncThunkAction, isFulfilled } from '@reduxjs/toolkit'\r\nimport type { AnyAction } from 'redux'\r\nimport type { ThunkDispatch } from 'redux-thunk'\r\nimport type { BaseQueryFn, BaseQueryMeta } from '../../baseQueryTypes'\r\nimport { DefinitionType } from '../../endpointDefinitions'\r\nimport type { RootState } from '../apiState'\r\nimport type {\r\n  MutationResultSelectorResult,\r\n  QueryResultSelectorResult,\r\n} from '../buildSelectors'\r\nimport { getMutationCacheKey } from '../buildSlice'\r\nimport type { PatchCollection, Recipe } from '../buildThunks'\r\nimport type {\r\n  ApiMiddlewareInternalHandler,\r\n  InternalHandlerBuilder,\r\n  PromiseWithKnownReason,\r\n  SubMiddlewareApi,\r\n} from './types'\r\n\r\nexport type ReferenceCacheLifecycle = never\r\n\r\ndeclare module '../../endpointDefinitions' {\r\n  export interface QueryBaseLifecycleApi<\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ResultType,\r\n    ReducerPath extends string = string\r\n  > extends LifecycleApi<ReducerPath> {\r\n    /**\r\n     * Gets the current value of this cache entry.\r\n     */\r\n    getCacheEntry(): QueryResultSelectorResult<\r\n      { type: DefinitionType.query } & BaseEndpointDefinition<\r\n        QueryArg,\r\n        BaseQuery,\r\n        ResultType\r\n      >\r\n    >\r\n    /**\r\n     * Updates the current cache entry value.\r\n     * For documentation see `api.util.updateQueryData`.\r\n     */\r\n    updateCachedData(updateRecipe: Recipe<ResultType>): PatchCollection\r\n  }\r\n\r\n  export interface MutationBaseLifecycleApi<\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ResultType,\r\n    ReducerPath extends string = string\r\n  > extends LifecycleApi<ReducerPath> {\r\n    /**\r\n     * Gets the current value of this cache entry.\r\n     */\r\n    getCacheEntry(): MutationResultSelectorResult<\r\n      { type: DefinitionType.mutation } & BaseEndpointDefinition<\r\n        QueryArg,\r\n        BaseQuery,\r\n        ResultType\r\n      >\r\n    >\r\n  }\r\n\r\n  export interface LifecycleApi<ReducerPath extends string = string> {\r\n    /**\r\n     * The dispatch method for the store\r\n     */\r\n    dispatch: ThunkDispatch<any, any, AnyAction>\r\n    /**\r\n     * A method to get the current state\r\n     */\r\n    getState(): RootState<any, any, ReducerPath>\r\n    /**\r\n     * `extra` as provided as `thunk.extraArgument` to the `configureStore` `getDefaultMiddleware` option.\r\n     */\r\n    extra: unknown\r\n    /**\r\n     * A unique ID generated for the mutation\r\n     */\r\n    requestId: string\r\n  }\r\n\r\n  export interface CacheLifecyclePromises<\r\n    ResultType = unknown,\r\n    MetaType = unknown\r\n  > {\r\n    /**\r\n     * Promise that will resolve with the first value for this cache key.\r\n     * This allows you to `await` until an actual value is in cache.\r\n     *\r\n     * If the cache entry is removed from the cache before any value has ever\r\n     * been resolved, this Promise will reject with\r\n     * `new Error('Promise never resolved before cacheEntryRemoved.')`\r\n     * to prevent memory leaks.\r\n     * You can just re-throw that error (or not handle it at all) -\r\n     * it will be caught outside of `cacheEntryAdded`.\r\n     *\r\n     * If you don't interact with this promise, it will not throw.\r\n     */\r\n    cacheDataLoaded: PromiseWithKnownReason<\r\n      {\r\n        /**\r\n         * The (transformed) query result.\r\n         */\r\n        data: ResultType\r\n        /**\r\n         * The `meta` returned by the `baseQuery`\r\n         */\r\n        meta: MetaType\r\n      },\r\n      typeof neverResolvedError\r\n    >\r\n    /**\r\n     * Promise that allows you to wait for the point in time when the cache entry\r\n     * has been removed from the cache, by not being used/subscribed to any more\r\n     * in the application for too long or by dispatching `api.util.resetApiState`.\r\n     */\r\n    cacheEntryRemoved: Promise<void>\r\n  }\r\n\r\n  export interface QueryCacheLifecycleApi<\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ResultType,\r\n    ReducerPath extends string = string\r\n  > extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>,\r\n      CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>> {}\r\n\r\n  export interface MutationCacheLifecycleApi<\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ResultType,\r\n    ReducerPath extends string = string\r\n  > extends MutationBaseLifecycleApi<\r\n        QueryArg,\r\n        BaseQuery,\r\n        ResultType,\r\n        ReducerPath\r\n      >,\r\n      CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>> {}\r\n\r\n  interface QueryExtraOptions<\r\n    TagTypes extends string,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ReducerPath extends string = string\r\n  > {\r\n    onCacheEntryAdded?(\r\n      arg: QueryArg,\r\n      api: QueryCacheLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>\r\n    ): Promise<void> | void\r\n  }\r\n\r\n  interface MutationExtraOptions<\r\n    TagTypes extends string,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ReducerPath extends string = string\r\n  > {\r\n    onCacheEntryAdded?(\r\n      arg: QueryArg,\r\n      api: MutationCacheLifecycleApi<\r\n        QueryArg,\r\n        BaseQuery,\r\n        ResultType,\r\n        ReducerPath\r\n      >\r\n    ): Promise<void> | void\r\n  }\r\n}\r\n\r\nconst neverResolvedError = new Error(\r\n  'Promise never resolved before cacheEntryRemoved.'\r\n) as Error & {\r\n  message: 'Promise never resolved before cacheEntryRemoved.'\r\n}\r\n\r\nexport const buildCacheLifecycleHandler: InternalHandlerBuilder = ({\r\n  api,\r\n  reducerPath,\r\n  context,\r\n  queryThunk,\r\n  mutationThunk,\r\n  internalState,\r\n}) => {\r\n  const isQueryThunk = isAsyncThunkAction(queryThunk)\r\n  const isMutationThunk = isAsyncThunkAction(mutationThunk)\r\n  const isFulfilledThunk = isFulfilled(queryThunk, mutationThunk)\r\n\r\n  type CacheLifecycle = {\r\n    valueResolved?(value: { data: unknown; meta: unknown }): unknown\r\n    cacheEntryRemoved(): void\r\n  }\r\n  const lifecycleMap: Record<string, CacheLifecycle> = {}\r\n\r\n  const handler: ApiMiddlewareInternalHandler = (\r\n    action,\r\n    mwApi,\r\n    stateBefore\r\n  ) => {\r\n    const cacheKey = getCacheKey(action)\r\n\r\n    if (queryThunk.pending.match(action)) {\r\n      const oldState = stateBefore[reducerPath].queries[cacheKey]\r\n      const state = mwApi.getState()[reducerPath].queries[cacheKey]\r\n      if (!oldState && state) {\r\n        handleNewKey(\r\n          action.meta.arg.endpointName,\r\n          action.meta.arg.originalArgs,\r\n          cacheKey,\r\n          mwApi,\r\n          action.meta.requestId\r\n        )\r\n      }\r\n    } else if (mutationThunk.pending.match(action)) {\r\n      const state = mwApi.getState()[reducerPath].mutations[cacheKey]\r\n      if (state) {\r\n        handleNewKey(\r\n          action.meta.arg.endpointName,\r\n          action.meta.arg.originalArgs,\r\n          cacheKey,\r\n          mwApi,\r\n          action.meta.requestId\r\n        )\r\n      }\r\n    } else if (isFulfilledThunk(action)) {\r\n      const lifecycle = lifecycleMap[cacheKey]\r\n      if (lifecycle?.valueResolved) {\r\n        lifecycle.valueResolved({\r\n          data: action.payload,\r\n          meta: action.meta.baseQueryMeta,\r\n        })\r\n        delete lifecycle.valueResolved\r\n      }\r\n    } else if (\r\n      api.internalActions.removeQueryResult.match(action) ||\r\n      api.internalActions.removeMutationResult.match(action)\r\n    ) {\r\n      const lifecycle = lifecycleMap[cacheKey]\r\n      if (lifecycle) {\r\n        delete lifecycleMap[cacheKey]\r\n        lifecycle.cacheEntryRemoved()\r\n      }\r\n    } else if (api.util.resetApiState.match(action)) {\r\n      for (const [cacheKey, lifecycle] of Object.entries(lifecycleMap)) {\r\n        delete lifecycleMap[cacheKey]\r\n        lifecycle.cacheEntryRemoved()\r\n      }\r\n    }\r\n  }\r\n\r\n  function getCacheKey(action: any) {\r\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey\r\n    if (isMutationThunk(action)) return action.meta.requestId\r\n    if (api.internalActions.removeQueryResult.match(action))\r\n      return action.payload.queryCacheKey\r\n    if (api.internalActions.removeMutationResult.match(action))\r\n      return getMutationCacheKey(action.payload)\r\n    return ''\r\n  }\r\n\r\n  function handleNewKey(\r\n    endpointName: string,\r\n    originalArgs: any,\r\n    queryCacheKey: string,\r\n    mwApi: SubMiddlewareApi,\r\n    requestId: string\r\n  ) {\r\n    const endpointDefinition = context.endpointDefinitions[endpointName]\r\n    const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded\r\n    if (!onCacheEntryAdded) return\r\n\r\n    let lifecycle = {} as CacheLifecycle\r\n\r\n    const cacheEntryRemoved = new Promise<void>((resolve) => {\r\n      lifecycle.cacheEntryRemoved = resolve\r\n    })\r\n    const cacheDataLoaded: PromiseWithKnownReason<\r\n      { data: unknown; meta: unknown },\r\n      typeof neverResolvedError\r\n    > = Promise.race([\r\n      new Promise<{ data: unknown; meta: unknown }>((resolve) => {\r\n        lifecycle.valueResolved = resolve\r\n      }),\r\n      cacheEntryRemoved.then(() => {\r\n        throw neverResolvedError\r\n      }),\r\n    ])\r\n    // prevent uncaught promise rejections from happening.\r\n    // if the original promise is used in any way, that will create a new promise that will throw again\r\n    cacheDataLoaded.catch(() => {})\r\n    lifecycleMap[queryCacheKey] = lifecycle\r\n    const selector = (api.endpoints[endpointName] as any).select(\r\n      endpointDefinition.type === DefinitionType.query\r\n        ? originalArgs\r\n        : queryCacheKey\r\n    )\r\n\r\n    const extra = mwApi.dispatch((_, __, extra) => extra)\r\n    const lifecycleApi = {\r\n      ...mwApi,\r\n      getCacheEntry: () => selector(mwApi.getState()),\r\n      requestId,\r\n      extra,\r\n      updateCachedData: (endpointDefinition.type === DefinitionType.query\r\n        ? (updateRecipe: Recipe<any>) =>\r\n            mwApi.dispatch(\r\n              api.util.updateQueryData(\r\n                endpointName as never,\r\n                originalArgs,\r\n                updateRecipe\r\n              )\r\n            )\r\n        : undefined) as any,\r\n\r\n      cacheDataLoaded,\r\n      cacheEntryRemoved,\r\n    }\r\n\r\n    const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi)\r\n    // if a `neverResolvedError` was thrown, but not handled in the running handler, do not let it leak out further\r\n    Promise.resolve(runningHandler).catch((e) => {\r\n      if (e === neverResolvedError) return\r\n      throw e\r\n    })\r\n  }\r\n\r\n  return handler\r\n}\r\n","import { isPending, isRejected, isFulfilled } from '@reduxjs/toolkit'\r\nimport type {\r\n  BaseQueryError,\r\n  BaseQueryFn,\r\n  BaseQueryMeta,\r\n} from '../../baseQueryTypes'\r\nimport { DefinitionType } from '../../endpointDefinitions'\r\nimport type { QueryFulfilledRejectionReason } from '../../endpointDefinitions'\r\nimport type { Recipe } from '../buildThunks'\r\nimport type {\r\n  PromiseWithKnownReason,\r\n  PromiseConstructorWithKnownReason,\r\n  InternalHandlerBuilder,\r\n  ApiMiddlewareInternalHandler,\r\n} from './types'\r\n\r\nexport type ReferenceQueryLifecycle = never\r\n\r\ndeclare module '../../endpointDefinitions' {\r\n  export interface QueryLifecyclePromises<\r\n    ResultType,\r\n    BaseQuery extends BaseQueryFn\r\n  > {\r\n    /**\r\n     * Promise that will resolve with the (transformed) query result.\r\n     *\r\n     * If the query fails, this promise will reject with the error.\r\n     *\r\n     * This allows you to `await` for the query to finish.\r\n     *\r\n     * If you don't interact with this promise, it will not throw.\r\n     */\r\n    queryFulfilled: PromiseWithKnownReason<\r\n      {\r\n        /**\r\n         * The (transformed) query result.\r\n         */\r\n        data: ResultType\r\n        /**\r\n         * The `meta` returned by the `baseQuery`\r\n         */\r\n        meta: BaseQueryMeta<BaseQuery>\r\n      },\r\n      QueryFulfilledRejectionReason<BaseQuery>\r\n    >\r\n  }\r\n\r\n  type QueryFulfilledRejectionReason<BaseQuery extends BaseQueryFn> =\r\n    | {\r\n        error: BaseQueryError<BaseQuery>\r\n        /**\r\n         * If this is `false`, that means this error was returned from the `baseQuery` or `queryFn` in a controlled manner.\r\n         */\r\n        isUnhandledError: false\r\n        /**\r\n         * The `meta` returned by the `baseQuery`\r\n         */\r\n        meta: BaseQueryMeta<BaseQuery>\r\n      }\r\n    | {\r\n        error: unknown\r\n        meta?: undefined\r\n        /**\r\n         * If this is `true`, that means that this error is the result of `baseQueryFn`, `queryFn`, `transformResponse` or `transformErrorResponse` throwing an error instead of handling it properly.\r\n         * There can not be made any assumption about the shape of `error`.\r\n         */\r\n        isUnhandledError: true\r\n      }\r\n\r\n  interface QueryExtraOptions<\r\n    TagTypes extends string,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ReducerPath extends string = string\r\n  > {\r\n    /**\r\n     * A function that is called when the individual query is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\r\n     *\r\n     * Can be used to perform side-effects throughout the lifecycle of the query.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\r\n     * import { messageCreated } from './notificationsSlice\r\n     * export interface Post {\r\n     *   id: number\r\n     *   name: string\r\n     * }\r\n     *\r\n     * const api = createApi({\r\n     *   baseQuery: fetchBaseQuery({\r\n     *     baseUrl: '/',\r\n     *   }),\r\n     *   endpoints: (build) => ({\r\n     *     getPost: build.query<Post, number>({\r\n     *       query: (id) => `post/${id}`,\r\n     *       async onQueryStarted(id, { dispatch, queryFulfilled }) {\r\n     *         // `onStart` side-effect\r\n     *         dispatch(messageCreated('Fetching posts...'))\r\n     *         try {\r\n     *           const { data } = await queryFulfilled\r\n     *           // `onSuccess` side-effect\r\n     *           dispatch(messageCreated('Posts received!'))\r\n     *         } catch (err) {\r\n     *           // `onError` side-effect\r\n     *           dispatch(messageCreated('Error fetching posts!'))\r\n     *         }\r\n     *       }\r\n     *     }),\r\n     *   }),\r\n     * })\r\n     * ```\r\n     */\r\n    onQueryStarted?(\r\n      arg: QueryArg,\r\n      api: QueryLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>\r\n    ): Promise<void> | void\r\n  }\r\n\r\n  interface MutationExtraOptions<\r\n    TagTypes extends string,\r\n    ResultType,\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ReducerPath extends string = string\r\n  > {\r\n    /**\r\n     * A function that is called when the individual mutation is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\r\n     *\r\n     * Can be used for `optimistic updates`.\r\n     *\r\n     * @example\r\n     *\r\n     * ```ts\r\n     * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\r\n     * export interface Post {\r\n     *   id: number\r\n     *   name: string\r\n     * }\r\n     *\r\n     * const api = createApi({\r\n     *   baseQuery: fetchBaseQuery({\r\n     *     baseUrl: '/',\r\n     *   }),\r\n     *   tagTypes: ['Post'],\r\n     *   endpoints: (build) => ({\r\n     *     getPost: build.query<Post, number>({\r\n     *       query: (id) => `post/${id}`,\r\n     *       providesTags: ['Post'],\r\n     *     }),\r\n     *     updatePost: build.mutation<void, Pick<Post, 'id'> & Partial<Post>>({\r\n     *       query: ({ id, ...patch }) => ({\r\n     *         url: `post/${id}`,\r\n     *         method: 'PATCH',\r\n     *         body: patch,\r\n     *       }),\r\n     *       invalidatesTags: ['Post'],\r\n     *       async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\r\n     *         const patchResult = dispatch(\r\n     *           api.util.updateQueryData('getPost', id, (draft) => {\r\n     *             Object.assign(draft, patch)\r\n     *           })\r\n     *         )\r\n     *         try {\r\n     *           await queryFulfilled\r\n     *         } catch {\r\n     *           patchResult.undo()\r\n     *         }\r\n     *       },\r\n     *     }),\r\n     *   }),\r\n     * })\r\n     * ```\r\n     */\r\n    onQueryStarted?(\r\n      arg: QueryArg,\r\n      api: MutationLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>\r\n    ): Promise<void> | void\r\n  }\r\n\r\n  export interface QueryLifecycleApi<\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ResultType,\r\n    ReducerPath extends string = string\r\n  > extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>,\r\n      QueryLifecyclePromises<ResultType, BaseQuery> {}\r\n\r\n  export interface MutationLifecycleApi<\r\n    QueryArg,\r\n    BaseQuery extends BaseQueryFn,\r\n    ResultType,\r\n    ReducerPath extends string = string\r\n  > extends MutationBaseLifecycleApi<\r\n        QueryArg,\r\n        BaseQuery,\r\n        ResultType,\r\n        ReducerPath\r\n      >,\r\n      QueryLifecyclePromises<ResultType, BaseQuery> {}\r\n}\r\n\r\nexport const buildQueryLifecycleHandler: InternalHandlerBuilder = ({\r\n  api,\r\n  context,\r\n  queryThunk,\r\n  mutationThunk,\r\n}) => {\r\n  const isPendingThunk = isPending(queryThunk, mutationThunk)\r\n  const isRejectedThunk = isRejected(queryThunk, mutationThunk)\r\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk)\r\n\r\n  type CacheLifecycle = {\r\n    resolve(value: { data: unknown; meta: unknown }): unknown\r\n    reject(value: QueryFulfilledRejectionReason<any>): unknown\r\n  }\r\n  const lifecycleMap: Record<string, CacheLifecycle> = {}\r\n\r\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\r\n    if (isPendingThunk(action)) {\r\n      const {\r\n        requestId,\r\n        arg: { endpointName, originalArgs },\r\n      } = action.meta\r\n      const endpointDefinition = context.endpointDefinitions[endpointName]\r\n      const onQueryStarted = endpointDefinition?.onQueryStarted\r\n      if (onQueryStarted) {\r\n        const lifecycle = {} as CacheLifecycle\r\n        const queryFulfilled =\r\n          new (Promise as PromiseConstructorWithKnownReason)<\r\n            { data: unknown; meta: unknown },\r\n            QueryFulfilledRejectionReason<any>\r\n          >((resolve, reject) => {\r\n            lifecycle.resolve = resolve\r\n            lifecycle.reject = reject\r\n          })\r\n        // prevent uncaught promise rejections from happening.\r\n        // if the original promise is used in any way, that will create a new promise that will throw again\r\n        queryFulfilled.catch(() => {})\r\n        lifecycleMap[requestId] = lifecycle\r\n        const selector = (api.endpoints[endpointName] as any).select(\r\n          endpointDefinition.type === DefinitionType.query\r\n            ? originalArgs\r\n            : requestId\r\n        )\r\n\r\n        const extra = mwApi.dispatch((_, __, extra) => extra)\r\n        const lifecycleApi = {\r\n          ...mwApi,\r\n          getCacheEntry: () => selector(mwApi.getState()),\r\n          requestId,\r\n          extra,\r\n          updateCachedData: (endpointDefinition.type === DefinitionType.query\r\n            ? (updateRecipe: Recipe<any>) =>\r\n                mwApi.dispatch(\r\n                  api.util.updateQueryData(\r\n                    endpointName as never,\r\n                    originalArgs,\r\n                    updateRecipe\r\n                  )\r\n                )\r\n            : undefined) as any,\r\n          queryFulfilled,\r\n        }\r\n        onQueryStarted(originalArgs, lifecycleApi)\r\n      }\r\n    } else if (isFullfilledThunk(action)) {\r\n      const { requestId, baseQueryMeta } = action.meta\r\n      lifecycleMap[requestId]?.resolve({\r\n        data: action.payload,\r\n        meta: baseQueryMeta,\r\n      })\r\n      delete lifecycleMap[requestId]\r\n    } else if (isRejectedThunk(action)) {\r\n      const { requestId, rejectedWithValue, baseQueryMeta } = action.meta\r\n      lifecycleMap[requestId]?.reject({\r\n        error: action.payload ?? action.error,\r\n        isUnhandledError: !rejectedWithValue,\r\n        meta: baseQueryMeta as any,\r\n      })\r\n      delete lifecycleMap[requestId]\r\n    }\r\n  }\r\n\r\n  return handler\r\n}\r\n","import type { InternalHandlerBuilder } from './types'\r\n\r\nexport const buildDevCheckHandler: InternalHandlerBuilder = ({\r\n  api,\r\n  context: { apiUid },\r\n  reducerPath,\r\n}) => {\r\n  return (action, mwApi) => {\r\n    if (api.util.resetApiState.match(action)) {\r\n      // dispatch after api reset\r\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid))\r\n    }\r\n\r\n    if (\r\n      typeof process !== 'undefined' &&\r\n      process.env.NODE_ENV === 'development'\r\n    ) {\r\n      if (\r\n        api.internalActions.middlewareRegistered.match(action) &&\r\n        action.payload === apiUid &&\r\n        mwApi.getState()[reducerPath]?.config?.middlewareRegistered ===\r\n          'conflict'\r\n      ) {\r\n        console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\r\nYou can only have one api per reducer path, this will lead to crashes in various situations!${\r\n          reducerPath === 'api'\r\n            ? `\r\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!`\r\n            : ''\r\n        }`)\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { QueryThunk, RejectedAction } from '../buildThunks'\r\nimport type { InternalHandlerBuilder } from './types'\r\nimport type {\r\n  SubscriptionState,\r\n  QuerySubstateIdentifier,\r\n  Subscribers,\r\n} from '../apiState'\r\nimport { produceWithPatches } from 'immer'\r\nimport { createSlice, PayloadAction, AnyAction } from '@reduxjs/toolkit'\r\n\r\n// Copied from https://github.com/feross/queue-microtask\r\nlet promise: Promise<any>\r\nconst queueMicrotaskShim =\r\n  typeof queueMicrotask === 'function'\r\n    ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\r\n    : // reuse resolved promise, and allocate it lazily\r\n      (cb: () => void) =>\r\n        (promise || (promise = Promise.resolve())).then(cb).catch((err: any) =>\r\n          setTimeout(() => {\r\n            throw err\r\n          }, 0)\r\n        )\r\n\r\nexport const buildBatchedActionsHandler: InternalHandlerBuilder<\r\n  [actionShouldContinue: boolean, subscriptionExists: boolean]\r\n> = ({ api, queryThunk, internalState }) => {\r\n  const subscriptionsPrefix = `${api.reducerPath}/subscriptions`\r\n\r\n  let previousSubscriptions: SubscriptionState =\r\n    null as unknown as SubscriptionState\r\n\r\n  let dispatchQueued = false\r\n\r\n  const { updateSubscriptionOptions, unsubscribeQueryResult } =\r\n    api.internalActions\r\n\r\n  // Actually intentionally mutate the subscriptions state used in the middleware\r\n  // This is done to speed up perf when loading many components\r\n  const actuallyMutateSubscriptions = (\r\n    mutableState: SubscriptionState,\r\n    action: AnyAction\r\n  ) => {\r\n    if (updateSubscriptionOptions.match(action)) {\r\n      const { queryCacheKey, requestId, options } = action.payload\r\n\r\n      if (mutableState?.[queryCacheKey]?.[requestId]) {\r\n        mutableState[queryCacheKey]![requestId] = options\r\n      }\r\n      return true\r\n    }\r\n    if (unsubscribeQueryResult.match(action)) {\r\n      const { queryCacheKey, requestId } = action.payload\r\n      if (mutableState[queryCacheKey]) {\r\n        delete mutableState[queryCacheKey]![requestId]\r\n      }\r\n      return true\r\n    }\r\n    if (api.internalActions.removeQueryResult.match(action)) {\r\n      delete mutableState[action.payload.queryCacheKey]\r\n      return true\r\n    }\r\n    if (queryThunk.pending.match(action)) {\r\n      const {\r\n        meta: { arg, requestId },\r\n      } = action\r\n      if (arg.subscribe) {\r\n        const substate = (mutableState[arg.queryCacheKey] ??= {})\r\n        substate[requestId] =\r\n          arg.subscriptionOptions ?? substate[requestId] ?? {}\r\n\r\n        return true\r\n      }\r\n    }\r\n    if (queryThunk.rejected.match(action)) {\r\n      const {\r\n        meta: { condition, arg, requestId },\r\n      } = action\r\n      if (condition && arg.subscribe) {\r\n        const substate = (mutableState[arg.queryCacheKey] ??= {})\r\n        substate[requestId] =\r\n          arg.subscriptionOptions ?? substate[requestId] ?? {}\r\n\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  return (action, mwApi) => {\r\n    if (!previousSubscriptions) {\r\n      // Initialize it the first time this handler runs\r\n      previousSubscriptions = JSON.parse(\r\n        JSON.stringify(internalState.currentSubscriptions)\r\n      )\r\n    }\r\n\r\n    // Intercept requests by hooks to see if they're subscribed\r\n    // Necessary because we delay updating store state to the end of the tick\r\n    if (api.internalActions.internal_probeSubscription.match(action)) {\r\n      const { queryCacheKey, requestId } = action.payload\r\n      const hasSubscription =\r\n        !!internalState.currentSubscriptions[queryCacheKey]?.[requestId]\r\n      return [false, hasSubscription]\r\n    }\r\n\r\n    // Update subscription data based on this action\r\n    const didMutate = actuallyMutateSubscriptions(\r\n      internalState.currentSubscriptions,\r\n      action\r\n    )\r\n\r\n    if (didMutate) {\r\n      if (!dispatchQueued) {\r\n        queueMicrotaskShim(() => {\r\n          // Deep clone the current subscription data\r\n          const newSubscriptions: SubscriptionState = JSON.parse(\r\n            JSON.stringify(internalState.currentSubscriptions)\r\n          )\r\n          // Figure out a smaller diff between original and current\r\n          const [, patches] = produceWithPatches(\r\n            previousSubscriptions,\r\n            () => newSubscriptions\r\n          )\r\n\r\n          // Sync the store state for visibility\r\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches))\r\n          // Save the cloned state for later reference\r\n          previousSubscriptions = newSubscriptions\r\n          dispatchQueued = false\r\n        })\r\n        dispatchQueued = true\r\n      }\r\n\r\n      const isSubscriptionSliceAction =\r\n        !!action.type?.startsWith(subscriptionsPrefix)\r\n      const isAdditionalSubscriptionAction =\r\n        queryThunk.rejected.match(action) &&\r\n        action.meta.condition &&\r\n        !!action.meta.arg.subscribe\r\n\r\n      const actionShouldContinue =\r\n        !isSubscriptionSliceAction && !isAdditionalSubscriptionAction\r\n\r\n      return [actionShouldContinue, false]\r\n    }\r\n\r\n    return [true, false]\r\n  }\r\n}\r\n","export type Id<T> = { [K in keyof T]: T[K] } & {}\r\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> &\r\n  Required<Pick<T, K>>\r\nexport type Override<T1, T2> = T2 extends any ? Omit<T1, keyof T2> & T2 : never\r\nexport function assertCast<T>(v: any): asserts v is T {}\r\n\r\nexport function safeAssign<T extends object>(\r\n  target: T,\r\n  ...args: Array<Partial<NoInfer<T>>>\r\n) {\r\n  Object.assign(target, ...args)\r\n}\r\n\r\n/**\r\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\r\n */\r\nexport type UnionToIntersection<U> = (\r\n  U extends any ? (k: U) => void : never\r\n) extends (k: infer I) => void\r\n  ? I\r\n  : never\r\n\r\nexport type NonOptionalKeys<T> = {\r\n  [K in keyof T]-?: undefined extends T[K] ? never : K\r\n}[keyof T]\r\n\r\nexport type HasRequiredProps<T, True, False> = NonOptionalKeys<T> extends never\r\n  ? False\r\n  : True\r\n\r\nexport type OptionalIfAllPropsOptional<T> = HasRequiredProps<T, T, T | never>\r\n\r\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\r\n\r\nexport type UnwrapPromise<T> = T extends PromiseLike<infer V> ? V : T\r\n\r\nexport type MaybePromise<T> = T | PromiseLike<T>\r\n\r\nexport type OmitFromUnion<T, K extends keyof T> = T extends any\r\n  ? Omit<T, K>\r\n  : never\r\n\r\nexport type IsAny<T, True, False = never> = true | false extends (\r\n  T extends never ? true : false\r\n)\r\n  ? True\r\n  : False\r\n\r\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>\r\n","/**\r\n * Note: this file should import all other files for type discovery and declaration merging\r\n */\r\nimport type {\r\n  PatchQueryDataThunk,\r\n  UpdateQueryDataThunk,\r\n  UpsertQueryDataThunk,\r\n} from './buildThunks'\r\nimport { buildThunks } from './buildThunks'\r\nimport type {\r\n  ActionCreatorWithPayload,\r\n  AnyAction,\r\n  Middleware,\r\n  Reducer,\r\n  ThunkAction,\r\n  ThunkDispatch,\r\n} from '@reduxjs/toolkit'\r\nimport type {\r\n  EndpointDefinitions,\r\n  QueryArgFrom,\r\n  QueryDefinition,\r\n  MutationDefinition,\r\n  AssertTagTypes,\r\n  TagDescription,\r\n} from '../endpointDefinitions'\r\nimport { isQueryDefinition, isMutationDefinition } from '../endpointDefinitions'\r\nimport type {\r\n  CombinedState,\r\n  QueryKeys,\r\n  MutationKeys,\r\n  RootState,\r\n} from './apiState'\r\nimport type { Api, Module } from '../apiTypes'\r\nimport { onFocus, onFocusLost, onOnline, onOffline } from './setupListeners'\r\nimport { buildSlice } from './buildSlice'\r\nimport { buildMiddleware } from './buildMiddleware'\r\nimport { buildSelectors } from './buildSelectors'\r\nimport type {\r\n  MutationActionCreatorResult,\r\n  QueryActionCreatorResult,\r\n} from './buildInitiate'\r\nimport { buildInitiate } from './buildInitiate'\r\nimport { assertCast, safeAssign } from '../tsHelpers'\r\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\r\nimport type { SliceActions } from './buildSlice'\r\nimport type { BaseQueryFn } from '../baseQueryTypes'\r\n\r\nimport type { ReferenceCacheLifecycle } from './buildMiddleware/cacheLifecycle'\r\nimport type { ReferenceQueryLifecycle } from './buildMiddleware/queryLifecycle'\r\nimport type { ReferenceCacheCollection } from './buildMiddleware/cacheCollection'\r\nimport { enablePatches } from 'immer'\r\n\r\n/**\r\n * `ifOlderThan` - (default: `false` | `number`) - _number is value in seconds_\r\n * - If specified, it will only run the query if the difference between `new Date()` and the last `fulfilledTimeStamp` is greater than the given value\r\n *\r\n * @overloadSummary\r\n * `force`\r\n * - If `force: true`, it will ignore the `ifOlderThan` value if it is set and the query will be run even if it exists in the cache.\r\n */\r\nexport type PrefetchOptions =\r\n  | {\r\n      ifOlderThan?: false | number\r\n    }\r\n  | { force?: boolean }\r\n\r\nexport const coreModuleName = /* @__PURE__ */ Symbol()\r\nexport type CoreModule =\r\n  | typeof coreModuleName\r\n  | ReferenceCacheLifecycle\r\n  | ReferenceQueryLifecycle\r\n  | ReferenceCacheCollection\r\n\r\ninterface ThunkWithReturnValue<T> extends ThunkAction<T, any, any, AnyAction> {}\r\n\r\ndeclare module '../apiTypes' {\r\n  export interface ApiModules<\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    BaseQuery extends BaseQueryFn,\r\n    Definitions extends EndpointDefinitions,\r\n    ReducerPath extends string,\r\n    TagTypes extends string\r\n  > {\r\n    [coreModuleName]: {\r\n      /**\r\n       * This api's reducer should be mounted at `store[api.reducerPath]`.\r\n       *\r\n       * @example\r\n       * ```ts\r\n       * configureStore({\r\n       *   reducer: {\r\n       *     [api.reducerPath]: api.reducer,\r\n       *   },\r\n       *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\r\n       * })\r\n       * ```\r\n       */\r\n      reducerPath: ReducerPath\r\n      /**\r\n       * Internal actions not part of the public API. Note: These are subject to change at any given time.\r\n       */\r\n      internalActions: InternalActions\r\n      /**\r\n       *  A standard redux reducer that enables core functionality. Make sure it's included in your store.\r\n       *\r\n       * @example\r\n       * ```ts\r\n       * configureStore({\r\n       *   reducer: {\r\n       *     [api.reducerPath]: api.reducer,\r\n       *   },\r\n       *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\r\n       * })\r\n       * ```\r\n       */\r\n      reducer: Reducer<\r\n        CombinedState<Definitions, TagTypes, ReducerPath>,\r\n        AnyAction\r\n      >\r\n      /**\r\n       * This is a standard redux middleware and is responsible for things like polling, garbage collection and a handful of other things. Make sure it's included in your store.\r\n       *\r\n       * @example\r\n       * ```ts\r\n       * configureStore({\r\n       *   reducer: {\r\n       *     [api.reducerPath]: api.reducer,\r\n       *   },\r\n       *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\r\n       * })\r\n       * ```\r\n       */\r\n      middleware: Middleware<\r\n        {},\r\n        RootState<Definitions, string, ReducerPath>,\r\n        ThunkDispatch<any, any, AnyAction>\r\n      >\r\n      /**\r\n       * A collection of utility thunks for various situations.\r\n       */\r\n      util: {\r\n        /**\r\n         * This method had to be removed due to a conceptual bug in RTK.\r\n         *\r\n         * Despite TypeScript errors, it will continue working in the \"buggy\" way it did\r\n         * before in production builds and will be removed in the next major release.\r\n         *\r\n         * Nonetheless, you should immediately replace it with the new recommended approach.\r\n         * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for new guidance on SSR.\r\n         *\r\n         * Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\r\n         * @deprecated\r\n         */\r\n        getRunningOperationPromises: never // this is now types as `never` to immediately throw TS errors on use, but still allow for a comment\r\n\r\n        /**\r\n         * This method had to be removed due to a conceptual bug in RTK.\r\n         * It has been replaced by `api.util.getRunningQueryThunk` and `api.util.getRunningMutationThunk`.\r\n         * Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\r\n         * @deprecated\r\n         */\r\n        getRunningOperationPromise: never // this is now types as `never` to immediately throw TS errors on use, but still allow for a comment\r\n\r\n        /**\r\n         * A thunk that (if dispatched) will return a specific running query, identified\r\n         * by `endpointName` and `args`.\r\n         * If that query is not running, dispatching the thunk will result in `undefined`.\r\n         *\r\n         * Can be used to await a specific query triggered in any way,\r\n         * including via hook calls or manually dispatching `initiate` actions.\r\n         *\r\n         * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\r\n         */\r\n        getRunningQueryThunk<EndpointName extends QueryKeys<Definitions>>(\r\n          endpointName: EndpointName,\r\n          args: QueryArgFrom<Definitions[EndpointName]>\r\n        ): ThunkWithReturnValue<\r\n          | QueryActionCreatorResult<\r\n              Definitions[EndpointName] & { type: 'query' }\r\n            >\r\n          | undefined\r\n        >\r\n\r\n        /**\r\n         * A thunk that (if dispatched) will return a specific running mutation, identified\r\n         * by `endpointName` and `fixedCacheKey` or `requestId`.\r\n         * If that mutation is not running, dispatching the thunk will result in `undefined`.\r\n         *\r\n         * Can be used to await a specific mutation triggered in any way,\r\n         * including via hook trigger functions or manually dispatching `initiate` actions.\r\n         *\r\n         * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\r\n         */\r\n        getRunningMutationThunk<EndpointName extends MutationKeys<Definitions>>(\r\n          endpointName: EndpointName,\r\n          fixedCacheKeyOrRequestId: string\r\n        ): ThunkWithReturnValue<\r\n          | MutationActionCreatorResult<\r\n              Definitions[EndpointName] & { type: 'mutation' }\r\n            >\r\n          | undefined\r\n        >\r\n\r\n        /**\r\n         * A thunk that (if dispatched) will return all running queries.\r\n         *\r\n         * Useful for SSR scenarios to await all running queries triggered in any way,\r\n         * including via hook calls or manually dispatching `initiate` actions.\r\n         *\r\n         * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\r\n         */\r\n        getRunningQueriesThunk(): ThunkWithReturnValue<\r\n          Array<QueryActionCreatorResult<any>>\r\n        >\r\n\r\n        /**\r\n         * A thunk that (if dispatched) will return all running mutations.\r\n         *\r\n         * Useful for SSR scenarios to await all running mutations triggered in any way,\r\n         * including via hook calls or manually dispatching `initiate` actions.\r\n         *\r\n         * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\r\n         */\r\n        getRunningMutationsThunk(): ThunkWithReturnValue<\r\n          Array<MutationActionCreatorResult<any>>\r\n        >\r\n\r\n        /**\r\n         * A Redux thunk that can be used to manually trigger pre-fetching of data.\r\n         *\r\n         * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and a set of options used to determine if the data actually should be re-fetched based on cache staleness.\r\n         *\r\n         * React Hooks users will most likely never need to use this directly, as the `usePrefetch` hook will dispatch this thunk internally as needed when you call the prefetching function supplied by the hook.\r\n         *\r\n         * @example\r\n         *\r\n         * ```ts no-transpile\r\n         * dispatch(api.util.prefetch('getPosts', undefined, { force: true }))\r\n         * ```\r\n         */\r\n        prefetch<EndpointName extends QueryKeys<Definitions>>(\r\n          endpointName: EndpointName,\r\n          arg: QueryArgFrom<Definitions[EndpointName]>,\r\n          options: PrefetchOptions\r\n        ): ThunkAction<void, any, any, AnyAction>\r\n        /**\r\n         * A Redux thunk action creator that, when dispatched, creates and applies a set of JSON diff/patch objects to the current state. This immediately updates the Redux state with those changes.\r\n         *\r\n         * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and an `updateRecipe` callback function. The callback receives an Immer-wrapped `draft` of the current state, and may modify the draft to match the expected results after the mutation completes successfully.\r\n         *\r\n         * The thunk executes _synchronously_, and returns an object containing `{patches: Patch[], inversePatches: Patch[], undo: () => void}`. The `patches` and `inversePatches` are generated using Immer's [`produceWithPatches` method](https://immerjs.github.io/immer/patches).\r\n         *\r\n         * This is typically used as the first step in implementing optimistic updates. The generated `inversePatches` can be used to revert the updates by calling `dispatch(patchQueryData(endpointName, args, inversePatches))`. Alternatively, the `undo` method can be called directly to achieve the same effect.\r\n         *\r\n         * Note that the first two arguments (`endpointName` and `args`) are used to determine which existing cache entry to update. If no existing cache entry is found, the `updateRecipe` callback will not run.\r\n         *\r\n         * @example\r\n         *\r\n         * ```ts\r\n         * const patchCollection = dispatch(\r\n         *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\r\n         *     draftPosts.push({ id: 1, name: 'Teddy' })\r\n         *   })\r\n         * )\r\n         * ```\r\n         */\r\n        updateQueryData: UpdateQueryDataThunk<\r\n          Definitions,\r\n          RootState<Definitions, string, ReducerPath>\r\n        >\r\n        /** @deprecated renamed to `updateQueryData` */\r\n        updateQueryResult: UpdateQueryDataThunk<\r\n          Definitions,\r\n          RootState<Definitions, string, ReducerPath>\r\n        >\r\n        /**\r\n         * A Redux thunk action creator that, when dispatched, acts as an artificial API request to upsert a value into the cache.\r\n         *\r\n         * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and the data to upsert.\r\n         *\r\n         * If no cache entry for that cache key exists, a cache entry will be created and the data added. If a cache entry already exists, this will _overwrite_ the existing cache entry data.\r\n         *\r\n         * The thunk executes _asynchronously_, and returns a promise that resolves when the store has been updated.\r\n         *\r\n         * If dispatched while an actual request is in progress, both the upsert and request will be handled as soon as they resolve, resulting in a \"last result wins\" update behavior.\r\n         *\r\n         * @example\r\n         *\r\n         * ```ts\r\n         * await dispatch(\r\n         *   api.util.upsertQueryData('getPost', {id: 1}, {id: 1, text: \"Hello!\"})\r\n         * )\r\n         * ```\r\n         */\r\n        upsertQueryData: UpsertQueryDataThunk<\r\n          Definitions,\r\n          RootState<Definitions, string, ReducerPath>\r\n        >\r\n        /**\r\n         * A Redux thunk that applies a JSON diff/patch array to the cached data for a given query result. This immediately updates the Redux state with those changes.\r\n         *\r\n         * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and a JSON diff/patch array as produced by Immer's `produceWithPatches`.\r\n         *\r\n         * This is typically used as the second step in implementing optimistic updates. If a request fails, the optimistically-applied changes can be reverted by dispatching `patchQueryData` with the `inversePatches` that were generated by `updateQueryData` earlier.\r\n         *\r\n         * In cases where it is desired to simply revert the previous changes, it may be preferable to call the `undo` method returned from dispatching `updateQueryData` instead.\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * const patchCollection = dispatch(\r\n         *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\r\n         *     draftPosts.push({ id: 1, name: 'Teddy' })\r\n         *   })\r\n         * )\r\n         *\r\n         * // later\r\n         * dispatch(\r\n         *   api.util.patchQueryData('getPosts', undefined, patchCollection.inversePatches)\r\n         * )\r\n         *\r\n         * // or\r\n         * patchCollection.undo()\r\n         * ```\r\n         */\r\n        patchQueryData: PatchQueryDataThunk<\r\n          Definitions,\r\n          RootState<Definitions, string, ReducerPath>\r\n        >\r\n        /** @deprecated renamed to `patchQueryData` */\r\n        patchQueryResult: PatchQueryDataThunk<\r\n          Definitions,\r\n          RootState<Definitions, string, ReducerPath>\r\n        >\r\n        /**\r\n         * A Redux action creator that can be dispatched to manually reset the api state completely. This will immediately remove all existing cache entries, and all queries will be considered 'uninitialized'.\r\n         *\r\n         * @example\r\n         *\r\n         * ```ts\r\n         * dispatch(api.util.resetApiState())\r\n         * ```\r\n         */\r\n        resetApiState: SliceActions['resetApiState']\r\n        /**\r\n         * A Redux action creator that can be used to manually invalidate cache tags for [automated re-fetching](../../usage/automated-refetching.mdx).\r\n         *\r\n         * The action creator accepts one argument: the cache tags to be invalidated. It returns an action with those tags as a payload, and the corresponding `invalidateTags` action type for the api.\r\n         *\r\n         * Dispatching the result of this action creator will [invalidate](../../usage/automated-refetching.mdx#invalidating-cache-data) the given tags, causing queries to automatically re-fetch if they are subscribed to cache data that [provides](../../usage/automated-refetching.mdx#providing-cache-data) the corresponding tags.\r\n         *\r\n         * The array of tags provided to the action creator should be in one of the following formats, where `TagType` is equal to a string provided to the [`tagTypes`](../createApi.mdx#tagtypes) property of the api:\r\n         *\r\n         * - `[TagType]`\r\n         * - `[{ type: TagType }]`\r\n         * - `[{ type: TagType, id: number | string }]`\r\n         *\r\n         * @example\r\n         *\r\n         * ```ts\r\n         * dispatch(api.util.invalidateTags(['Post']))\r\n         * dispatch(api.util.invalidateTags([{ type: 'Post', id: 1 }]))\r\n         * dispatch(\r\n         *   api.util.invalidateTags([\r\n         *     { type: 'Post', id: 1 },\r\n         *     { type: 'Post', id: 'LIST' },\r\n         *   ])\r\n         * )\r\n         * ```\r\n         */\r\n        invalidateTags: ActionCreatorWithPayload<\r\n          Array<TagDescription<TagTypes>>,\r\n          string\r\n        >\r\n\r\n        /**\r\n         * A function to select all `{ endpointName, originalArgs, queryCacheKey }` combinations that would be invalidated by a specific set of tags.\r\n         *\r\n         * Can be used for mutations that want to do optimistic updates instead of invalidating a set of tags, but don't know exactly what they need to update.\r\n         */\r\n        selectInvalidatedBy: (\r\n          state: RootState<Definitions, string, ReducerPath>,\r\n          tags: ReadonlyArray<TagDescription<TagTypes>>\r\n        ) => Array<{\r\n          endpointName: string\r\n          originalArgs: any\r\n          queryCacheKey: string\r\n        }>\r\n      }\r\n      /**\r\n       * Endpoints based on the input endpoints provided to `createApi`, containing `select` and `action matchers`.\r\n       */\r\n      endpoints: {\r\n        [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\r\n          any,\r\n          any,\r\n          any,\r\n          any,\r\n          any\r\n        >\r\n          ? ApiEndpointQuery<Definitions[K], Definitions>\r\n          : Definitions[K] extends MutationDefinition<any, any, any, any, any>\r\n          ? ApiEndpointMutation<Definitions[K], Definitions>\r\n          : never\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ApiEndpointQuery<\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Definition extends QueryDefinition<any, any, any, any, any>,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Definitions extends EndpointDefinitions\r\n> {\r\n  /**\r\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\r\n   */\r\n  Types: NonNullable<Definition['Types']>\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface ApiEndpointMutation<\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Definition extends MutationDefinition<any, any, any, any, any>,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Definitions extends EndpointDefinitions\r\n> {\r\n  /**\r\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\r\n   */\r\n  Types: NonNullable<Definition['Types']>\r\n}\r\n\r\nexport type ListenerActions = {\r\n  /**\r\n   * Will cause the RTK Query middleware to trigger any refetchOnReconnect-related behavior\r\n   * @link https://rtk-query-docs.netlify.app/api/setupListeners\r\n   */\r\n  onOnline: typeof onOnline\r\n  onOffline: typeof onOffline\r\n  /**\r\n   * Will cause the RTK Query middleware to trigger any refetchOnFocus-related behavior\r\n   * @link https://rtk-query-docs.netlify.app/api/setupListeners\r\n   */\r\n  onFocus: typeof onFocus\r\n  onFocusLost: typeof onFocusLost\r\n}\r\n\r\nexport type InternalActions = SliceActions & ListenerActions\r\n\r\n/**\r\n * Creates a module containing the basic redux logic for use with `buildCreateApi`.\r\n *\r\n * @example\r\n * ```ts\r\n * const createBaseApi = buildCreateApi(coreModule());\r\n * ```\r\n */\r\nexport const coreModule = (): Module<CoreModule> => ({\r\n  name: coreModuleName,\r\n  init(\r\n    api,\r\n    {\r\n      baseQuery,\r\n      tagTypes,\r\n      reducerPath,\r\n      serializeQueryArgs,\r\n      keepUnusedDataFor,\r\n      refetchOnMountOrArgChange,\r\n      refetchOnFocus,\r\n      refetchOnReconnect,\r\n    },\r\n    context\r\n  ) {\r\n    enablePatches()\r\n\r\n    assertCast<InternalSerializeQueryArgs>(serializeQueryArgs)\r\n\r\n    const assertTagType: AssertTagTypes = (tag) => {\r\n      if (\r\n        typeof process !== 'undefined' &&\r\n        process.env.NODE_ENV === 'development'\r\n      ) {\r\n        if (!tagTypes.includes(tag.type as any)) {\r\n          console.error(\r\n            `Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`\r\n          )\r\n        }\r\n      }\r\n      return tag\r\n    }\r\n\r\n    Object.assign(api, {\r\n      reducerPath,\r\n      endpoints: {},\r\n      internalActions: {\r\n        onOnline,\r\n        onOffline,\r\n        onFocus,\r\n        onFocusLost,\r\n      },\r\n      util: {},\r\n    })\r\n\r\n    const {\r\n      queryThunk,\r\n      mutationThunk,\r\n      patchQueryData,\r\n      updateQueryData,\r\n      upsertQueryData,\r\n      prefetch,\r\n      buildMatchThunkActions,\r\n    } = buildThunks({\r\n      baseQuery,\r\n      reducerPath,\r\n      context,\r\n      api,\r\n      serializeQueryArgs,\r\n    })\r\n\r\n    const { reducer, actions: sliceActions } = buildSlice({\r\n      context,\r\n      queryThunk,\r\n      mutationThunk,\r\n      reducerPath,\r\n      assertTagType,\r\n      config: {\r\n        refetchOnFocus,\r\n        refetchOnReconnect,\r\n        refetchOnMountOrArgChange,\r\n        keepUnusedDataFor,\r\n        reducerPath,\r\n      },\r\n    })\r\n\r\n    safeAssign(api.util, {\r\n      patchQueryData,\r\n      updateQueryData,\r\n      upsertQueryData,\r\n      prefetch,\r\n      resetApiState: sliceActions.resetApiState,\r\n    })\r\n    safeAssign(api.internalActions, sliceActions)\r\n\r\n    const { middleware, actions: middlewareActions } = buildMiddleware({\r\n      reducerPath,\r\n      context,\r\n      queryThunk,\r\n      mutationThunk,\r\n      api,\r\n      assertTagType,\r\n    })\r\n    safeAssign(api.util, middlewareActions)\r\n\r\n    safeAssign(api, { reducer: reducer as any, middleware })\r\n\r\n    const { buildQuerySelector, buildMutationSelector, selectInvalidatedBy } =\r\n      buildSelectors({\r\n        serializeQueryArgs: serializeQueryArgs as any,\r\n        reducerPath,\r\n      })\r\n\r\n    safeAssign(api.util, { selectInvalidatedBy })\r\n\r\n    const {\r\n      buildInitiateQuery,\r\n      buildInitiateMutation,\r\n      getRunningMutationThunk,\r\n      getRunningMutationsThunk,\r\n      getRunningQueriesThunk,\r\n      getRunningQueryThunk,\r\n      getRunningOperationPromises,\r\n      removalWarning,\r\n    } = buildInitiate({\r\n      queryThunk,\r\n      mutationThunk,\r\n      api,\r\n      serializeQueryArgs: serializeQueryArgs as any,\r\n      context,\r\n    })\r\n\r\n    safeAssign(api.util, {\r\n      getRunningOperationPromises: getRunningOperationPromises as any,\r\n      getRunningOperationPromise: removalWarning as any,\r\n      getRunningMutationThunk,\r\n      getRunningMutationsThunk,\r\n      getRunningQueryThunk,\r\n      getRunningQueriesThunk,\r\n    })\r\n\r\n    return {\r\n      name: coreModuleName,\r\n      injectEndpoint(endpointName, definition) {\r\n        const anyApi = api as any as Api<\r\n          any,\r\n          Record<string, any>,\r\n          string,\r\n          string,\r\n          CoreModule\r\n        >\r\n        anyApi.endpoints[endpointName] ??= {} as any\r\n        if (isQueryDefinition(definition)) {\r\n          safeAssign(\r\n            anyApi.endpoints[endpointName],\r\n            {\r\n              select: buildQuerySelector(endpointName, definition),\r\n              initiate: buildInitiateQuery(endpointName, definition),\r\n            },\r\n            buildMatchThunkActions(queryThunk, endpointName)\r\n          )\r\n        } else if (isMutationDefinition(definition)) {\r\n          safeAssign(\r\n            anyApi.endpoints[endpointName],\r\n            {\r\n              select: buildMutationSelector(),\r\n              initiate: buildInitiateMutation(endpointName),\r\n            },\r\n            buildMatchThunkActions(mutationThunk, endpointName)\r\n          )\r\n        }\r\n      },\r\n    }\r\n  },\r\n})\r\n","import { buildCreateApi, CreateApi } from '../createApi'\r\nimport { coreModule, coreModuleName } from './module'\r\n\r\nconst createApi = /* @__PURE__ */ buildCreateApi(coreModule())\r\n\r\nexport { createApi, coreModule }\r\n"]},"metadata":{},"sourceType":"module"}