{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\05_React-Router\\\\09_hooks-demo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport Some from \"./components/Some\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sum(a, b) {\n  // 减速，让函数执行时间延长1秒\n  const begin = Date.now();\n\n  while (1) {\n    if (Date.now() - begin > 1000) {\n      break;\n    }\n  }\n\n  console.log('函数执行了');\n  return a + b;\n}\n\nconst App = () => {\n  _s();\n\n  const [count, setCount] = useState(1);\n  let a = 123;\n  let b = 456;\n\n  if (count % 10 === 0) {\n    a += count;\n  } // sum函数每次组件渲染时都会重新执行\n  // const result = sum(123, 456)\n  // 如果不想让这个函数每次都重新执行，就用useMemo\n  // 传一个回调函数和依赖数组\n\n\n  const result = useMemo(() => {\n    // useMemo用来存储函数的执行结果    返回的是结果\n    // return sum(123, 456)\n    return sum(a, b);\n  }, [a, b]);\n  const someEle = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(Some, {\n      a: 10,\n      b: 22\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(prevstate => prevstate + 1),\n      children: \"\\u70B9\\u6211\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"xhfMIj5OExFJ3Dw+MLqPulWuVHc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useMemo","useState","Some","sum","a","b","begin","Date","now","console","log","App","count","setCount","result","someEle","prevstate"],"sources":["D:/前端学习/00-react/00-React/05_React-Router/09_hooks-demo/src/App.js"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport Some from \"./components/Some\";\r\n\r\nfunction sum(a, b) {\r\n    // 减速，让函数执行时间延长1秒\r\n    const begin = Date.now()\r\n    while(1){\r\n        if(Date.now() - begin > 1000){\r\n            break;\r\n        }\r\n    }\r\n    console.log('函数执行了');\r\n    return a + b;\r\n}\r\n\r\nconst App = () => {\r\n    const [count, setCount] = useState(1)\r\n\r\n    let a = 123\r\n    let b = 456\r\n    if(count % 10 === 0){\r\n        a += count\r\n    }\r\n\r\n    // sum函数每次组件渲染时都会重新执行\r\n    // const result = sum(123, 456)\r\n\r\n    // 如果不想让这个函数每次都重新执行，就用useMemo\r\n    // 传一个回调函数和依赖数组\r\n    const result = useMemo(() => {\r\n        // useMemo用来存储函数的执行结果    返回的是结果\r\n        // return sum(123, 456)\r\n        return sum(a, b)\r\n    }, [a,b])\r\n\r\n    const someEle = useMemo(() => {\r\n        return <Some a={10} b={22}></Some>\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h1>App</h1>\r\n            {/* <h2>result: {result}</h2> */}\r\n            <h3>{count}</h3>\r\n            {/* 每次点的时候，sum函数都会重新执行 */}\r\n            <button onClick={() => setCount(prevstate => prevstate + 1)}>点我</button>\r\n\r\n            {/* <Some a={10} b={22}></Some> */}\r\n            {/*  */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;;AAEA,SAASC,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;EACf;EACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;;EACA,OAAM,CAAN,EAAQ;IACJ,IAAGD,IAAI,CAACC,GAAL,KAAaF,KAAb,GAAqB,IAAxB,EAA6B;MACzB;IACH;EACJ;;EACDG,OAAO,CAACC,GAAR,CAAY,OAAZ;EACA,OAAON,CAAC,GAAGC,CAAX;AACH;;AAED,MAAMM,GAAG,GAAG,MAAM;EAAA;;EACd,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;EAEA,IAAIG,CAAC,GAAG,GAAR;EACA,IAAIC,CAAC,GAAG,GAAR;;EACA,IAAGO,KAAK,GAAG,EAAR,KAAe,CAAlB,EAAoB;IAChBR,CAAC,IAAIQ,KAAL;EACH,CAPa,CASd;EACA;EAEA;EACA;;;EACA,MAAME,MAAM,GAAGd,OAAO,CAAC,MAAM;IACzB;IACA;IACA,OAAOG,GAAG,CAACC,CAAD,EAAIC,CAAJ,CAAV;EACH,CAJqB,EAInB,CAACD,CAAD,EAAGC,CAAH,CAJmB,CAAtB;EAMA,MAAMU,OAAO,GAAGf,OAAO,CAAC,MAAM;IAC1B,oBAAO,QAAC,IAAD;MAAM,CAAC,EAAE,EAAT;MAAa,CAAC,EAAE;IAAhB;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAFsB,EAEpB,EAFoB,CAAvB;EAIA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI;MAAA,UAAKY;IAAL;MAAA;MAAA;MAAA;IAAA,QAHJ,eAKI;MAAQ,OAAO,EAAE,MAAMC,QAAQ,CAACG,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAA/B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAYH,CApCD;;GAAML,G;;KAAAA,G;AAsCN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}