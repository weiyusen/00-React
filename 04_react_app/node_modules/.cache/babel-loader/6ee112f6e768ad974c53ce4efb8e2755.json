{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useGetStudentsQuery } from './store/studentApi';\nimport StudentList from './components/StudentList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const result = useGetStudentsQuery('666', {\n    // useQuery可以接收一个对象作为第二个参数,通过该对象可以对请求进行配置\n    // 在studentApi里做的是默认配置,在这里是只针对这里的请求做的配置\n    selectFromResult: result => {\n      //用来指定useQuery返回的结果,作用类似于响应拦截器\n      // 与transformResponse的区别是:transformResponse只对数据进行处理,像isLoading这些是不处理的\n      // 这里是对整个结果进行过滤,并且只对当前请求生效\n      if (result.data) {\n        // 过滤,保留年龄小于58的\n        result.data = result.data.filter(item => item.attributes.age < 58);\n      }\n      return result;\n    },\n    pollingInterval: 0,\n    // 设置轮询(隔一段时间发一次请求)的间隔，单位毫秒 如果为0则表示不轮询 聊天室zhi'l\n    skip: false,\n    // 设置是否跳过当前请求，默认false\n    refetchOnMountOrArgChange: false,\n    // 设置是否每次都重新加载数据 false正常使用缓存，\n    // true每次都重载数据\n    //数字，数据缓存的时间（秒）\n    refetchOnFocus: false,\n    // 是否在重新获取焦点时重载数据\n    refetchOnReconnect: true // 是否在重新连接后重载数据\n  });\n\n  console.log(result.data === result.currentData);\n  const {\n    data: stus,\n    isSuccess,\n    isLoading,\n    refetch\n  } = result;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => refetch(),\n      children: \"\\u5237\\u65B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6570\\u636E\\u52A0\\u8F7D\\u4E2D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 27\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(StudentList, {\n      stus: stus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"oDRi4PqEuNdOH8MaAbTZ5Q868cg=\", false, function () {\n  return [useGetStudentsQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useGetStudentsQuery","StudentList","App","result","selectFromResult","data","filter","item","attributes","age","pollingInterval","skip","refetchOnMountOrArgChange","refetchOnFocus","refetchOnReconnect","console","log","currentData","stus","isSuccess","isLoading","refetch"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport { useGetStudentsQuery } from './store/studentApi';\r\nimport StudentList from './components/StudentList'\r\n\r\nconst App = () => {\r\n    const result = useGetStudentsQuery('666', {\r\n        // useQuery可以接收一个对象作为第二个参数,通过该对象可以对请求进行配置\r\n        // 在studentApi里做的是默认配置,在这里是只针对这里的请求做的配置\r\n        selectFromResult: result => {\r\n            //用来指定useQuery返回的结果,作用类似于响应拦截器\r\n            // 与transformResponse的区别是:transformResponse只对数据进行处理,像isLoading这些是不处理的\r\n            // 这里是对整个结果进行过滤,并且只对当前请求生效\r\n            if (result.data) {\r\n                // 过滤,保留年龄小于58的\r\n                result.data = result.data.filter(item => item.attributes.age < 58)\r\n            }\r\n            return result\r\n        },\r\n        pollingInterval: 0, // 设置轮询(隔一段时间发一次请求)的间隔，单位毫秒 如果为0则表示不轮询 聊天室zhi'l\r\n        skip: false, // 设置是否跳过当前请求，默认false\r\n        refetchOnMountOrArgChange: false, // 设置是否每次都重新加载数据 false正常使用缓存，\r\n        // true每次都重载数据\r\n        //数字，数据缓存的时间（秒）\r\n        refetchOnFocus: false, // 是否在重新获取焦点时重载数据\r\n        refetchOnReconnect: true, // 是否在重新连接后重载数据\r\n    })\r\n    console.log(result.data === result.currentData);\r\n\r\n    const { data: stus, isSuccess, isLoading, refetch } = result\r\n    return (\r\n        <div>\r\n            <button onClick={() => refetch()}>刷新</button>\r\n            {isLoading && <p>数据加载中</p>}\r\n            {isSuccess && <StudentList stus={stus}></StudentList>}\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAAA;AAElD,MAAMC,GAAG,GAAG,MAAM;EAAA;EACd,MAAMC,MAAM,GAAGH,mBAAmB,CAAC,KAAK,EAAE;IACtC;IACA;IACAI,gBAAgB,EAAED,MAAM,IAAI;MACxB;MACA;MACA;MACA,IAAIA,MAAM,CAACE,IAAI,EAAE;QACb;QACAF,MAAM,CAACE,IAAI,GAAGF,MAAM,CAACE,IAAI,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,UAAU,CAACC,GAAG,GAAG,EAAE,CAAC;MACtE;MACA,OAAON,MAAM;IACjB,CAAC;IACDO,eAAe,EAAE,CAAC;IAAE;IACpBC,IAAI,EAAE,KAAK;IAAE;IACbC,yBAAyB,EAAE,KAAK;IAAE;IAClC;IACA;IACAC,cAAc,EAAE,KAAK;IAAE;IACvBC,kBAAkB,EAAE,IAAI,CAAE;EAC9B,CAAC,CAAC;;EACFC,OAAO,CAACC,GAAG,CAACb,MAAM,CAACE,IAAI,KAAKF,MAAM,CAACc,WAAW,CAAC;EAE/C,MAAM;IAAEZ,IAAI,EAAEa,IAAI;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGlB,MAAM;EAC5D,oBACI;IAAA,wBACI;MAAQ,OAAO,EAAE,MAAMkB,OAAO,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,EAC5CD,SAAS,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,EACzBD,SAAS,iBAAI,QAAC,WAAW;MAAC,IAAI,EAAED;IAAK;MAAA;MAAA;MAAA;IAAA,QAAe;EAAA;IAAA;IAAA;IAAA;EAAA,QACnD;AAEd,CAAC;AAAC,GAhCIhB,GAAG;EAAA,QACUF,mBAAmB;AAAA;AAAA,KADhCE,GAAG;AAiCT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}