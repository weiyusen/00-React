{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport B from './B';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('App组件重新渲染了！');\n  const [count, setCount] = useState(0);\n\n  /*\r\n  * Too many re-renders.\r\n  *   - 当我们直接在函数体中调用setState时，就会触发上述错误\r\n  *   - 问题：\r\n  *       不是说过，当新的state值和旧值相同时，它是不会触发组件的重新渲染的\r\n  *   - setState()的执行流程（函数组件）\r\n  *       setCount() --> dispatchSetDate()\r\n  *                       --> 会先判断，组件当前处于什么阶段\r\n  *                   如果是渲染阶段 --> 不会检查state值是否相同\r\n  *                   如果不是渲染阶段 --> 会检查state的值是否相同\r\n  *                       - 如果值不相同，则对组件进行重新渲染\r\n  *                       - 如果值相同，则不对组件进行重新渲染\r\n  *                           如果值相同，React在一些情况下会继续执行当前组件的渲染\r\n  *                               但是这个渲染不会触发其子组件的渲染，这次渲染不会产生实际的效果\r\n  *                               这种情况通常发生在值第一次相同时\r\n  *\r\n  * */\n\n  /*\r\n  *   count 0\r\n  *       第一次点击按钮 count --> 1\r\n  *           'App组件重新渲染了！' 执行了\r\n  *       第二次点击按钮 count --> 1\r\n  *           'App组件重新渲染了！' 执行了\r\n  *       第三次点击按钮 count --> 1\r\n  *           'App组件重新渲染了！' 没执行\r\n  *\r\n  * */\n  const clickHandler = () => {\n    console.log('点击按钮！');\n    setCount(1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [count, /*#__PURE__*/_jsxDEV(B, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"\\u70B9\\u6211\\u4E00\\u4E0B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","B","App","console","log","count","setCount","clickHandler"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport B from './B';\r\n\r\nconst App = () => {\r\n    console.log('App组件重新渲染了！');\r\n\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n    /*\r\n    * Too many re-renders.\r\n    *   - 当我们直接在函数体中调用setState时，就会触发上述错误\r\n    *   - 问题：\r\n    *       不是说过，当新的state值和旧值相同时，它是不会触发组件的重新渲染的\r\n    *   - setState()的执行流程（函数组件）\r\n    *       setCount() --> dispatchSetDate()\r\n    *                       --> 会先判断，组件当前处于什么阶段\r\n    *                   如果是渲染阶段 --> 不会检查state值是否相同\r\n    *                   如果不是渲染阶段 --> 会检查state的值是否相同\r\n    *                       - 如果值不相同，则对组件进行重新渲染\r\n    *                       - 如果值相同，则不对组件进行重新渲染\r\n    *                           如果值相同，React在一些情况下会继续执行当前组件的渲染\r\n    *                               但是这个渲染不会触发其子组件的渲染，这次渲染不会产生实际的效果\r\n    *                               这种情况通常发生在值第一次相同时\r\n    *\r\n    * */\r\n    \r\n\r\n    /*\r\n    *   count 0\r\n    *       第一次点击按钮 count --> 1\r\n    *           'App组件重新渲染了！' 执行了\r\n    *       第二次点击按钮 count --> 1\r\n    *           'App组件重新渲染了！' 执行了\r\n    *       第三次点击按钮 count --> 1\r\n    *           'App组件重新渲染了！' 没执行\r\n    *\r\n    * */\r\n    const clickHandler = ()=>{\r\n        console.log('点击按钮！');\r\n      setCount(1);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {count}\r\n\r\n            <B/>\r\n            <button onClick={clickHandler}>点我一下</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,CAAC,MAAM,KAAK;AAAC;AAEpB,MAAMC,GAAG,GAAG,MAAM;EAAA;EACdC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAG1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAErC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMO,YAAY,GAAG,MAAI;IACrBJ,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACtBE,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;EAED,oBACI;IAAA,WACKD,KAAK,eAEN,QAAC,CAAC;MAAA;MAAA;MAAA;IAAA,QAAE,eACJ;MAAQ,OAAO,EAAEE,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1C;AAEd,CAAC;AAAC,GAhDIL,GAAG;AAAA,KAAHA,GAAG;AAkDT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}