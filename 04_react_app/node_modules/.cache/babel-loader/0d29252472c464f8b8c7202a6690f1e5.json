{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useReducer } from 'react';\n// useReducer(reducer, initialArg, init)\n/*\r\n*   参数：\r\n*       reducer : 整合函数\r\n*           对于我们当前state的所有操作都应该在该函数中定义\r\n*           该函数的返回值，会成为state的新值\r\n*           reducer在执行时，会收到两个参数：\r\n*               state 当前最新的state\r\n*               action 它需要一个对象\r\n*                       在对象中会存储dispatch所发送的指令\r\n*       initialArg : state的初始值，作用和useState()中的值是一样\r\n        init:\r\n*   返回值：\r\n*       数组：\r\n*           第一个参数，state 用来获取state的值\r\n*           第二个参数，state 修改的派发器\r\n*                   通过派发器可以发送操作state的命令\r\n*                   具体的修改行为将会由另外一个函数(reducer)执行\r\n*\r\n* */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  /*  之前的做法\r\n      const [count, setCount] = useState(1)\r\n  \r\n      const addHandler = () => {\r\n          setCount(prevState => prevState + 1)\r\n      }\r\n  \r\n      const subHandler = () => {\r\n          setCount(prevState => prevState - 1)\r\n      }\r\n  */\n\n  const [count, countDispatch] = useReducer(() => {}, 1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 30,\n      width: 200,\n      height: 200,\n      margin: '100px auto',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\u51CF\\u5C11\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this), count, /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\u589E\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"I1ziWp55P/2jWhb8brp8uXhD2+s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useReducer","App","count","countDispatch","fontSize","width","height","margin","textAlign"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React, { useState, useReducer } from 'react'\r\n// useReducer(reducer, initialArg, init)\r\n/*\r\n*   参数：\r\n*       reducer : 整合函数\r\n*           对于我们当前state的所有操作都应该在该函数中定义\r\n*           该函数的返回值，会成为state的新值\r\n*           reducer在执行时，会收到两个参数：\r\n*               state 当前最新的state\r\n*               action 它需要一个对象\r\n*                       在对象中会存储dispatch所发送的指令\r\n*       initialArg : state的初始值，作用和useState()中的值是一样\r\n        init:\r\n*   返回值：\r\n*       数组：\r\n*           第一个参数，state 用来获取state的值\r\n*           第二个参数，state 修改的派发器\r\n*                   通过派发器可以发送操作state的命令\r\n*                   具体的修改行为将会由另外一个函数(reducer)执行\r\n*\r\n* */\r\nconst App = () => {\r\n/*  之前的做法\r\n    const [count, setCount] = useState(1)\r\n\r\n    const addHandler = () => {\r\n        setCount(prevState => prevState + 1)\r\n    }\r\n\r\n    const subHandler = () => {\r\n        setCount(prevState => prevState - 1)\r\n    }\r\n*/\r\n\r\n    const [count, countDispatch] = useReducer(() => {}, 1)\r\n    return (\r\n        <div style={{ fontSize: 30, width: 200, height: 200, margin: '100px auto', textAlign: 'center' }}>\r\n           <button >减少</button>\r\n            {count}\r\n            <button>增加</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAmBA,MAAMC,GAAG,GAAG,MAAM;EAAA;EAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAM,CAACC,KAAK,EAAEC,aAAa,CAAC,GAAGH,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACtD,oBACI;IAAK,KAAK,EAAE;MAAEI,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE,GAAG;MAAEC,MAAM,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAA,wBAC9F;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoB,EAClBN,KAAK,eACN;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB;EAAA;IAAA;IAAA;IAAA;EAAA,QACjB;AAEd,CAAC;AAAA,GArBKD,GAAG;AAAA,KAAHA,GAAG;AAuBT,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}