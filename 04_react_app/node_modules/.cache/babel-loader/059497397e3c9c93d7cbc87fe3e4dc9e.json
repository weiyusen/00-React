{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/**\r\n * Strapi 可以帮助我们快速搭建一个供我们使用的API服务器\r\n * 在server文件夹下\r\n */\n\nimport React, { useEffect, useState } from 'react';\nimport StudentList from \"./components/StudentList\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [stuData, setStuData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // 添加一个 state 来记录数据是否正在加载， false表示没有加载数据，true表示加载\n\n  /*  需求：\r\n  *   将写死的数据替换为从接口 http://localhost:1337/api/students  中加载的数据\r\n  *\r\n  *   组件初始化时需要向服务器发送请求来加载数据    只是这一次 所以用useEffect\r\n  * */\n  useEffect(() => {\n    // 设置loading为true,表示正在加载\n    setLoading(true);\n\n    // 在effect中加载数据\n    // fetch() 用来向服务器发送请求加载数据，是Ajax的升级版\n    // 它需要两个参数：1.请求地址 2.请求信息  默认发的就是get请求\n    fetch('http://localhost:1337/api/student').then(res => {\n      // response表示响应信息\n      // console.log(res);\n      // 先判断是否正常返回响应信息  因为即使是404也会走这个then   用ok\n      // Response.ok  包含了一个布尔值，标示该 Response 成功（HTTP 状态码的范围在 200-299）\n      if (res.ok) {\n        // 请求发送成功时调用\n        return res.json(); // 该方法可以将响应的json直接转换为js对象 返回的是一个promise   只有fetch里能用的\n        /**\r\n        * Response mixin 的 json() 方法接收一个 Response 流，并将其读取完成。\r\n        * 它返回一个 Promise，Promise 的解析 resolve 结果是将文本体解析为 JSON。 */\n      }\n\n      // 代码运行到这里，说明没有成功加载到数据\n      setLoading(false);\n      // 抛出一个错误\n      throw new Error('数据加载失败！');\n    }).then(data => {\n      // 参数是上一个then里转换得到的js对象\n      // console.log(data.data);\n      // 将加载到的数据设置到state中\n      setStuData(data.data);\n\n      // 数据加载完毕设置loading为false\n      setLoading(false);\n    }).catch(e => {\n      // 用来同一处理错误\n      // catch一执行，说明上述代码出错了\n      setLoading;\n      console.log(e);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [!loading && /*#__PURE__*/_jsxDEV(StudentList, {\n      stus: stuData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 26\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u6570\\u636E\\u6B63\\u5728\\u52A0\\u8F7D\\u4E2D\\u3002\\u3002\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"p9LdvUTGRisIVcJwPaVI41X9RE0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","StudentList","App","stuData","setStuData","loading","setLoading","fetch","then","res","ok","json","Error","data","catch","e","console","log"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["/**\r\n * Strapi 可以帮助我们快速搭建一个供我们使用的API服务器\r\n * 在server文件夹下\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport StudentList from \"./components/StudentList\";\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [stuData, setStuData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // 添加一个 state 来记录数据是否正在加载， false表示没有加载数据，true表示加载\r\n\r\n    /*  需求：\r\n    *   将写死的数据替换为从接口 http://localhost:1337/api/students  中加载的数据\r\n    *\r\n    *   组件初始化时需要向服务器发送请求来加载数据    只是这一次 所以用useEffect\r\n    * */\r\n    useEffect(() => {\r\n        // 设置loading为true,表示正在加载\r\n        setLoading(true)\r\n\r\n        // 在effect中加载数据\r\n        // fetch() 用来向服务器发送请求加载数据，是Ajax的升级版\r\n        // 它需要两个参数：1.请求地址 2.请求信息  默认发的就是get请求\r\n        fetch('http://localhost:1337/api/student',)\r\n            .then((res) => {\r\n                // response表示响应信息\r\n                // console.log(res);\r\n                // 先判断是否正常返回响应信息  因为即使是404也会走这个then   用ok\r\n                // Response.ok  包含了一个布尔值，标示该 Response 成功（HTTP 状态码的范围在 200-299）\r\n                if (res.ok) {\r\n                    // 请求发送成功时调用\r\n                    return res.json() // 该方法可以将响应的json直接转换为js对象 返回的是一个promise   只有fetch里能用的\r\n                    /**\r\n                * Response mixin 的 json() 方法接收一个 Response 流，并将其读取完成。\r\n                * 它返回一个 Promise，Promise 的解析 resolve 结果是将文本体解析为 JSON。 */\r\n                }\r\n\r\n                // 代码运行到这里，说明没有成功加载到数据\r\n                setLoading(false)\r\n                // 抛出一个错误\r\n                throw new Error('数据加载失败！')\r\n            })\r\n            .then((data) => {\r\n                // 参数是上一个then里转换得到的js对象\r\n                // console.log(data.data);\r\n                // 将加载到的数据设置到state中\r\n                setStuData(data.data)\r\n\r\n                // 数据加载完毕设置loading为false\r\n                setLoading(false)\r\n            })\r\n            .catch((e) => {\r\n                // 用来同一处理错误\r\n                // catch一执行，说明上述代码出错了\r\n                setLoading\r\n                console.log(e);\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {!loading && <StudentList stus={stuData} />}\r\n            {loading && <p>数据正在加载中。。。</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAO,WAAW;AAAC;AAGnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAEd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;;EAE7C;;EAEA;AACJ;AACA;AACA;AACA;EACID,SAAS,CAAC,MAAM;IACZ;IACAO,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACA;IACA;IACAC,KAAK,CAAC,mCAAmC,CAAE,CACtCC,IAAI,CAAEC,GAAG,IAAK;MACX;MACA;MACA;MACA;MACA,IAAIA,GAAG,CAACC,EAAE,EAAE;QACR;QACA,OAAOD,GAAG,CAACE,IAAI,EAAE,EAAC;QAClB;AACpB;AACA;MACgB;;MAEA;MACAL,UAAU,CAAC,KAAK,CAAC;MACjB;MACA,MAAM,IAAIM,KAAK,CAAC,SAAS,CAAC;IAC9B,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACZ;MACA;MACA;MACAT,UAAU,CAACS,IAAI,CAACA,IAAI,CAAC;;MAErB;MACAP,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDQ,KAAK,CAAEC,CAAC,IAAK;MACV;MACA;MACAT,UAAU;MACVU,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAClB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,WACf,CAACV,OAAO,iBAAI,QAAC,WAAW;MAAC,IAAI,EAAEF;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,EAC1CE,OAAO,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC3B;AAEd,CAAC;AAAC,GA7DIH,GAAG;AAAA,KAAHA,GAAG;AA+DT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}