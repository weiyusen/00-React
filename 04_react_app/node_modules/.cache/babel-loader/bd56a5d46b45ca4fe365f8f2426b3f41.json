{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\components\\\\A.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport B from './B';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst A = props => {\n  _s();\n  console.log('A渲染');\n  const [count, setCount] = useState(1);\n  const clickHandler = useCallback(() => {\n    setCount(prev => prev + 1);\n  }, []);\n\n  // const clickHandler = () => {\n  //     setCount(prev => prev + 1)\n  // }\n  const test = count % 4 === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u7EC4\\u4EF6A - \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"\\u589E\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.onAdd,\n      children: \"\\u589E\\u52A0App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(B, {\n      test: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n/**\r\n * 这里的问题是 给A组件用memo包装， 在App那里传了一个事件 onAdd , 如果点的是App的按钮，A组件仍然会重新渲染\r\n * 原因：点App的按钮，App肯定是重新渲染的，而重新渲染会把代码重新执行一遍，自然props传的响应函数也重新执行了，因此props变了，A的memo就识别到\r\n * \r\n * 引入 useCallback  是一个钩子函数，用来创建React中的回调函数\r\n * useCallback 创建的回调函数不会总在组件重新渲染时重新创建\r\n */\n\n/*\r\n*   useCallback()\r\n*       参数：\r\n*           1. 回调函数\r\n*           2. 依赖数组\r\n*               - 当依赖数组中的变量发生变化时，回调函数才会重新创建\r\n*               - 如果不指定依赖数组，回调函数每次都会重新创建\r\n*               - 一定要将回调函数中使用到的所有变量都设置到依赖数组中\r\n*                   除了（setState）\r\n* */\n_s(A, \"hkKWa2e8qkbA3nQvJEjDD5OClpU=\");\n_c = A;\nexport default _c2 = /*#__PURE__*/React.memo(A);\nvar _c, _c2;\n$RefreshReg$(_c, \"A\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useCallback","B","A","props","console","log","count","setCount","clickHandler","prev","test","onAdd","memo"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/components/A.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport B from './B'\r\n\r\nconst A = (props) => {\r\n    console.log('A渲染');\r\n    const [count, setCount] = useState(1);\r\n\r\n    const clickHandler = useCallback(() => {\r\n        setCount(prev => prev + 1)\r\n    }, [])\r\n\r\n    // const clickHandler = () => {\r\n    //     setCount(prev => prev + 1)\r\n    // }\r\n    const test = count % 4 === 0\r\n    return (\r\n        <div>\r\n            <h2>组件A - {count}</h2>\r\n            <button onClick={clickHandler}>增加</button>\r\n            <button onClick={props.onAdd}>增加App</button>\r\n            <B test={test}></B>\r\n        </div>\r\n    );\r\n}\r\n/**\r\n * 这里的问题是 给A组件用memo包装， 在App那里传了一个事件 onAdd , 如果点的是App的按钮，A组件仍然会重新渲染\r\n * 原因：点App的按钮，App肯定是重新渲染的，而重新渲染会把代码重新执行一遍，自然props传的响应函数也重新执行了，因此props变了，A的memo就识别到\r\n * \r\n * 引入 useCallback  是一个钩子函数，用来创建React中的回调函数\r\n * useCallback 创建的回调函数不会总在组件重新渲染时重新创建\r\n */\r\n\r\n\r\n/*\r\n*   useCallback()\r\n*       参数：\r\n*           1. 回调函数\r\n*           2. 依赖数组\r\n*               - 当依赖数组中的变量发生变化时，回调函数才会重新创建\r\n*               - 如果不指定依赖数组，回调函数每次都会重新创建\r\n*               - 一定要将回调函数中使用到的所有变量都设置到依赖数组中\r\n*                   除了（setState）\r\n* */\r\nexport default React.memo(A)"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,CAAC,MAAM,KAAK;AAAA;AAEnB,MAAMC,CAAC,GAAIC,KAAK,IAAK;EAAA;EACjBC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMS,YAAY,GAAGR,WAAW,CAAC,MAAM;IACnCO,QAAQ,CAACE,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA,MAAMC,IAAI,GAAGJ,KAAK,GAAG,CAAC,KAAK,CAAC;EAC5B,oBACI;IAAA,wBACI;MAAA,+BAAWA,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eACtB;MAAQ,OAAO,EAAEE,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,eAC1C;MAAQ,OAAO,EAAEL,KAAK,CAACQ,KAAM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,eAC5C,QAAC,CAAC;MAAC,IAAI,EAAED;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QACjB;AAEd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,GA9BMR,CAAC;AAAA,KAADA,CAAC;AAwCP,kCAAeJ,KAAK,CAACc,IAAI,CAACV,CAAC,CAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}