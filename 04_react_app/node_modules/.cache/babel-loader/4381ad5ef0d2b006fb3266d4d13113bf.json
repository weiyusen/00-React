{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\00-react\\\\00-React\\\\04_react_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport A from './components/A';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('App渲染');\n  const [count, setCount] = useState(1);\n  const clickHandler = () => {\n    setCount(prev => prev + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"App - \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"\\u589E\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(A, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"2zt0xIm16ZAkTfzs1tD1YE/ZHbE=\");\n_c = App;\nexport default App;\n/**\r\n * React组件重新渲染的两种情况：\r\n *   1、当组件自身的state发生变化时\r\n *   2、当组件的父组件重新渲染时\r\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","A","App","console","log","count","setCount","clickHandler","prev"],"sources":["D:/前端学习/00-react/00-React/04_react_app/src/App.js"],"sourcesContent":["import React,{useState} from 'react';\r\nimport A from './components/A'\r\n\r\nconst App = () => {\r\n    console.log('App渲染');\r\n    const [count, setCount] = useState(1);\r\n    const clickHandler = () => {\r\n        setCount(prev => prev + 1)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>App - {count}</h2>\r\n            <button onClick={clickHandler}>增加</button>\r\n            {/* 父组件App渲染，会导致所有的子组件（A，B）都重新渲染\r\n                但B组件没有自己的state，没有必要每次都重新渲染，因为每次渲染的结果都是一样的（\r\n                这时就可以用React.memo()进行包装  见B组件\r\n            */}\r\n            <A></A> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n/**\r\n * React组件重新渲染的两种情况：\r\n *   1、当组件自身的state发生变化时\r\n *   2、当组件的父组件重新渲染时\r\n */"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,CAAC,MAAM,gBAAgB;AAAA;AAE9B,MAAMC,GAAG,GAAG,MAAM;EAAA;EACdC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMO,YAAY,GAAG,MAAM;IACvBD,QAAQ,CAACE,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;EAC9B,CAAC;EAED,oBACI;IAAA,wBACI;MAAA,qBAAWH,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eACtB;MAAQ,OAAO,EAAEE,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,eAK1C,QAAC,CAAC;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEd,CAAC;AAAA,GAlBKL,GAAG;AAAA,KAAHA,GAAG;AAoBT,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AACA;AAJA;AAAA"},"metadata":{},"sourceType":"module"}